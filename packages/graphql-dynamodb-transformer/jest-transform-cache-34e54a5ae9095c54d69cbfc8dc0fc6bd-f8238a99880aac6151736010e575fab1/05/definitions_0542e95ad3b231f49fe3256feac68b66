214d1eff4c0f04a81eead8bdfcbe94d1
"use strict";

/* istanbul ignore next */
function cov_20luglzvq8() {
  var path = "/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/definitions.ts";
  var hash = "57c4b88e5ce4e6aca52c2dfa961e4e6fbb0bc9fd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/definitions.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 538
        }
      },
      "2": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 37
        },
        end: {
          line: 5,
          column: 74
        }
      },
      "4": {
        start: {
          line: 6,
          column: 29
        },
        end: {
          line: 6,
          column: 60
        }
      },
      "5": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 114
        }
      },
      "6": {
        start: {
          line: 8,
          column: 22
        },
        end: {
          line: 8,
          column: 110
        }
      },
      "7": {
        start: {
          line: 9,
          column: 23
        },
        end: {
          line: 9,
          column: 70
        }
      },
      "8": {
        start: {
          line: 10,
          column: 25
        },
        end: {
          line: 10,
          column: 72
        }
      },
      "9": {
        start: {
          line: 11,
          column: 27
        },
        end: {
          line: 11,
          column: 39
        }
      },
      "10": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 71
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 13,
          column: 78
        }
      },
      "12": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 74
        }
      },
      "13": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 67
        }
      },
      "14": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 16,
          column: 69
        }
      },
      "15": {
        start: {
          line: 17,
          column: 26
        },
        end: {
          line: 17,
          column: 71
        }
      },
      "16": {
        start: {
          line: 18,
          column: 24
        },
        end: {
          line: 18,
          column: 125
        }
      },
      "17": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "18": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "19": {
        start: {
          line: 23,
          column: 24
        },
        end: {
          line: 23,
          column: 89
        }
      },
      "20": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 32,
          column: 13
        }
      },
      "21": {
        start: {
          line: 26,
          column: 42
        },
        end: {
          line: 26,
          column: 66
        }
      },
      "22": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 46
        }
      },
      "23": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 31,
          column: 55
        }
      },
      "24": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 37
        }
      },
      "25": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 37,
          column: 56
        }
      },
      "26": {
        start: {
          line: 39,
          column: 17
        },
        end: {
          line: 39,
          column: 102
        }
      },
      "27": {
        start: {
          line: 40,
          column: 19
        },
        end: {
          line: 62,
          column: 6
        }
      },
      "28": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 42,
          column: 91
        }
      },
      "29": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "30": {
        start: {
          line: 44,
          column: 36
        },
        end: {
          line: 44,
          column: 105
        }
      },
      "31": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 24
        }
      },
      "32": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 21
        }
      },
      "33": {
        start: {
          line: 51,
          column: 21
        },
        end: {
          line: 53,
          column: 24
        }
      },
      "34": {
        start: {
          line: 51,
          column: 45
        },
        end: {
          line: 51,
          column: 114
        }
      },
      "35": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 61,
          column: 10
        }
      },
      "36": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 76,
          column: 6
        }
      },
      "37": {
        start: {
          line: 78,
          column: 0
        },
        end: {
          line: 78,
          column: 58
        }
      },
      "38": {
        start: {
          line: 80,
          column: 17
        },
        end: {
          line: 80,
          column: 105
        }
      },
      "39": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 81,
          column: 80
        }
      },
      "40": {
        start: {
          line: 82,
          column: 27
        },
        end: {
          line: 82,
          column: 80
        }
      },
      "41": {
        start: {
          line: 84,
          column: 42
        },
        end: {
          line: 88,
          column: 5
        }
      },
      "42": {
        start: {
          line: 89,
          column: 19
        },
        end: {
          line: 121,
          column: 6
        }
      },
      "43": {
        start: {
          line: 91,
          column: 26
        },
        end: {
          line: 91,
          column: 91
        }
      },
      "44": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "45": {
        start: {
          line: 93,
          column: 36
        },
        end: {
          line: 93,
          column: 105
        }
      },
      "46": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 24
        }
      },
      "47": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 21
        }
      },
      "48": {
        start: {
          line: 101,
          column: 26
        },
        end: {
          line: 101,
          column: 42
        }
      },
      "49": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "50": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 74
        }
      },
      "51": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 111,
          column: 29
        }
      },
      "52": {
        start: {
          line: 109,
          column: 43
        },
        end: {
          line: 109,
          column: 112
        }
      },
      "53": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 120,
          column: 10
        }
      },
      "54": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "55": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 138
        }
      },
      "56": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 139,
          column: 6
        }
      },
      "57": {
        start: {
          line: 141,
          column: 0
        },
        end: {
          line: 141,
          column: 54
        }
      },
      "58": {
        start: {
          line: 143,
          column: 17
        },
        end: {
          line: 143,
          column: 105
        }
      },
      "59": {
        start: {
          line: 144,
          column: 19
        },
        end: {
          line: 173,
          column: 6
        }
      },
      "60": {
        start: {
          line: 146,
          column: 26
        },
        end: {
          line: 146,
          column: 87
        }
      },
      "61": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "62": {
        start: {
          line: 148,
          column: 36
        },
        end: {
          line: 148,
          column: 101
        }
      },
      "63": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 24
        }
      },
      "64": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 21
        }
      },
      "65": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "66": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 157,
          column: 72
        }
      },
      "67": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 74
        }
      },
      "68": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 19
        }
      },
      "69": {
        start: {
          line: 162,
          column: 39
        },
        end: {
          line: 162,
          column: 108
        }
      },
      "70": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 172,
          column: 10
        }
      },
      "71": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 176,
          column: 5
        }
      },
      "72": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 138
        }
      },
      "73": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 190,
          column: 6
        }
      },
      "74": {
        start: {
          line: 192,
          column: 0
        },
        end: {
          line: 192,
          column: 54
        }
      },
      "75": {
        start: {
          line: 194,
          column: 17
        },
        end: {
          line: 194,
          column: 105
        }
      },
      "76": {
        start: {
          line: 195,
          column: 19
        },
        end: {
          line: 207,
          column: 5
        }
      },
      "77": {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 210,
          column: 5
        }
      },
      "78": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 138
        }
      },
      "79": {
        start: {
          line: 211,
          column: 4
        },
        end: {
          line: 224,
          column: 6
        }
      },
      "80": {
        start: {
          line: 226,
          column: 0
        },
        end: {
          line: 226,
          column: 54
        }
      },
      "81": {
        start: {
          line: 228,
          column: 17
        },
        end: {
          line: 228,
          column: 103
        }
      },
      "82": {
        start: {
          line: 229,
          column: 19
        },
        end: {
          line: 252,
          column: 6
        }
      },
      "83": {
        start: {
          line: 231,
          column: 26
        },
        end: {
          line: 231,
          column: 91
        }
      },
      "84": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "85": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 24
        }
      },
      "86": {
        start: {
          line: 237,
          column: 25
        },
        end: {
          line: 237,
          column: 77
        }
      },
      "87": {
        start: {
          line: 238,
          column: 26
        },
        end: {
          line: 238,
          column: 47
        }
      },
      "88": {
        start: {
          line: 239,
          column: 23
        },
        end: {
          line: 239,
          column: 74
        }
      },
      "89": {
        start: {
          line: 240,
          column: 27
        },
        end: {
          line: 240,
          column: 94
        }
      },
      "90": {
        start: {
          line: 241,
          column: 31
        },
        end: {
          line: 243,
          column: 121
        }
      },
      "91": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 251,
          column: 10
        }
      },
      "92": {
        start: {
          line: 253,
          column: 4
        },
        end: {
          line: 283,
          column: 7
        }
      },
      "93": {
        start: {
          line: 284,
          column: 4
        },
        end: {
          line: 297,
          column: 6
        }
      },
      "94": {
        start: {
          line: 299,
          column: 0
        },
        end: {
          line: 299,
          column: 66
        }
      },
      "95": {
        start: {
          line: 301,
          column: 17
        },
        end: {
          line: 301,
          column: 106
        }
      },
      "96": {
        start: {
          line: 302,
          column: 19
        },
        end: {
          line: 325,
          column: 6
        }
      },
      "97": {
        start: {
          line: 304,
          column: 26
        },
        end: {
          line: 304,
          column: 91
        }
      },
      "98": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "99": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 24
        }
      },
      "100": {
        start: {
          line: 310,
          column: 25
        },
        end: {
          line: 310,
          column: 77
        }
      },
      "101": {
        start: {
          line: 311,
          column: 26
        },
        end: {
          line: 311,
          column: 47
        }
      },
      "102": {
        start: {
          line: 312,
          column: 23
        },
        end: {
          line: 312,
          column: 74
        }
      },
      "103": {
        start: {
          line: 313,
          column: 27
        },
        end: {
          line: 313,
          column: 94
        }
      },
      "104": {
        start: {
          line: 314,
          column: 34
        },
        end: {
          line: 316,
          column: 121
        }
      },
      "105": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 324,
          column: 10
        }
      },
      "106": {
        start: {
          line: 326,
          column: 4
        },
        end: {
          line: 356,
          column: 7
        }
      },
      "107": {
        start: {
          line: 357,
          column: 4
        },
        end: {
          line: 370,
          column: 6
        }
      },
      "108": {
        start: {
          line: 372,
          column: 0
        },
        end: {
          line: 372,
          column: 72
        }
      },
      "109": {
        start: {
          line: 374,
          column: 4
        },
        end: {
          line: 433,
          column: 7
        }
      },
      "110": {
        start: {
          line: 376,
          column: 26
        },
        end: {
          line: 376,
          column: 91
        }
      },
      "111": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 377,
          column: 83
        }
      },
      "112": {
        start: {
          line: 380,
          column: 25
        },
        end: {
          line: 380,
          column: 81
        }
      },
      "113": {
        start: {
          line: 381,
          column: 23
        },
        end: {
          line: 381,
          column: 78
        }
      },
      "114": {
        start: {
          line: 382,
          column: 21
        },
        end: {
          line: 384,
          column: 121
        }
      },
      "115": {
        start: {
          line: 385,
          column: 23
        },
        end: {
          line: 385,
          column: 25
        }
      },
      "116": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 394,
          column: 11
        }
      },
      "117": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 403,
          column: 11
        }
      },
      "118": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "119": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 413,
          column: 15
        }
      },
      "120": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 422,
          column: 15
        }
      },
      "121": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 432,
          column: 10
        }
      },
      "122": {
        start: {
          line: 435,
          column: 0
        },
        end: {
          line: 435,
          column: 64
        }
      },
      "123": {
        start: {
          line: 437,
          column: 17
        },
        end: {
          line: 437,
          column: 79
        }
      },
      "124": {
        start: {
          line: 438,
          column: 4
        },
        end: {
          line: 457,
          column: 6
        }
      },
      "125": {
        start: {
          line: 459,
          column: 0
        },
        end: {
          line: 459,
          column: 76
        }
      },
      "126": {
        start: {
          line: 461,
          column: 17
        },
        end: {
          line: 461,
          column: 120
        }
      },
      "127": {
        start: {
          line: 462,
          column: 23
        },
        end: {
          line: 462,
          column: 48
        }
      },
      "128": {
        start: {
          line: 463,
          column: 19
        },
        end: {
          line: 470,
          column: 7
        }
      },
      "129": {
        start: {
          line: 463,
          column: 50
        },
        end: {
          line: 470,
          column: 5
        }
      },
      "130": {
        start: {
          line: 471,
          column: 30
        },
        end: {
          line: 471,
          column: 32
        }
      },
      "131": {
        start: {
          line: 472,
          column: 4
        },
        end: {
          line: 474,
          column: 5
        }
      },
      "132": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 473,
          column: 60
        }
      },
      "133": {
        start: {
          line: 475,
          column: 4
        },
        end: {
          line: 488,
          column: 6
        }
      },
      "134": {
        start: {
          line: 490,
          column: 0
        },
        end: {
          line: 490,
          column: 76
        }
      },
      "135": {
        start: {
          line: 492,
          column: 4
        },
        end: {
          line: 500,
          column: 5
        }
      },
      "136": {
        start: {
          line: 494,
          column: 12
        },
        end: {
          line: 494,
          column: 111
        }
      },
      "137": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 497,
          column: 79
        }
      },
      "138": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 68
        }
      },
      "139": {
        start: {
          line: 503,
          column: 4
        },
        end: {
          line: 516,
          column: 5
        }
      },
      "140": {
        start: {
          line: 505,
          column: 12
        },
        end: {
          line: 505,
          column: 37
        }
      },
      "141": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 507,
          column: 33
        }
      },
      "142": {
        start: {
          line: 509,
          column: 12
        },
        end: {
          line: 509,
          column: 34
        }
      },
      "143": {
        start: {
          line: 511,
          column: 12
        },
        end: {
          line: 511,
          column: 36
        }
      },
      "144": {
        start: {
          line: 513,
          column: 12
        },
        end: {
          line: 513,
          column: 38
        }
      },
      "145": {
        start: {
          line: 515,
          column: 12
        },
        end: {
          line: 515,
          column: 79
        }
      },
      "146": {
        start: {
          line: 519,
          column: 17
        },
        end: {
          line: 519,
          column: 87
        }
      },
      "147": {
        start: {
          line: 520,
          column: 19
        },
        end: {
          line: 527,
          column: 7
        }
      },
      "148": {
        start: {
          line: 520,
          column: 55
        },
        end: {
          line: 527,
          column: 5
        }
      },
      "149": {
        start: {
          line: 528,
          column: 4
        },
        end: {
          line: 541,
          column: 6
        }
      },
      "150": {
        start: {
          line: 544,
          column: 4
        },
        end: {
          line: 557,
          column: 5
        }
      },
      "151": {
        start: {
          line: 546,
          column: 12
        },
        end: {
          line: 546,
          column: 36
        }
      },
      "152": {
        start: {
          line: 548,
          column: 12
        },
        end: {
          line: 548,
          column: 32
        }
      },
      "153": {
        start: {
          line: 550,
          column: 12
        },
        end: {
          line: 550,
          column: 33
        }
      },
      "154": {
        start: {
          line: 552,
          column: 12
        },
        end: {
          line: 552,
          column: 35
        }
      },
      "155": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 554,
          column: 37
        }
      },
      "156": {
        start: {
          line: 556,
          column: 12
        },
        end: {
          line: 556,
          column: 79
        }
      },
      "157": {
        start: {
          line: 560,
          column: 22
        },
        end: {
          line: 560,
          column: 54
        }
      },
      "158": {
        start: {
          line: 561,
          column: 19
        },
        end: {
          line: 561,
          column: 30
        }
      },
      "159": {
        start: {
          line: 562,
          column: 4
        },
        end: {
          line: 571,
          column: 5
        }
      },
      "160": {
        start: {
          line: 563,
          column: 8
        },
        end: {
          line: 570,
          column: 11
        }
      },
      "161": {
        start: {
          line: 572,
          column: 4
        },
        end: {
          line: 581,
          column: 5
        }
      },
      "162": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 580,
          column: 11
        }
      },
      "163": {
        start: {
          line: 582,
          column: 4
        },
        end: {
          line: 591,
          column: 5
        }
      },
      "164": {
        start: {
          line: 583,
          column: 8
        },
        end: {
          line: 590,
          column: 11
        }
      },
      "165": {
        start: {
          line: 592,
          column: 4
        },
        end: {
          line: 592,
          column: 18
        }
      },
      "166": {
        start: {
          line: 595,
          column: 26
        },
        end: {
          line: 599,
          column: 6
        }
      },
      "167": {
        start: {
          line: 595,
          column: 42
        },
        end: {
          line: 599,
          column: 5
        }
      },
      "168": {
        start: {
          line: 600,
          column: 4
        },
        end: {
          line: 605,
          column: 6
        }
      },
      "169": {
        start: {
          line: 603,
          column: 41
        },
        end: {
          line: 603,
          column: 57
        }
      },
      "170": {
        start: {
          line: 607,
          column: 0
        },
        end: {
          line: 607,
          column: 54
        }
      },
      "171": {
        start: {
          line: 609,
          column: 27
        },
        end: {
          line: 609,
          column: 106
        }
      },
      "172": {
        start: {
          line: 610,
          column: 34
        },
        end: {
          line: 610,
          column: 99
        }
      },
      "173": {
        start: {
          line: 611,
          column: 4
        },
        end: {
          line: 611,
          column: 256
        }
      },
      "174": {
        start: {
          line: 612,
          column: 4
        },
        end: {
          line: 612,
          column: 217
        }
      },
      "175": {
        start: {
          line: 613,
          column: 4
        },
        end: {
          line: 615,
          column: 5
        }
      },
      "176": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 614,
          column: 227
        }
      },
      "177": {
        start: {
          line: 616,
          column: 4
        },
        end: {
          line: 616,
          column: 35
        }
      },
      "178": {
        start: {
          line: 618,
          column: 0
        },
        end: {
          line: 618,
          column: 58
        }
      },
      "179": {
        start: {
          line: 620,
          column: 4
        },
        end: {
          line: 622,
          column: 7
        }
      },
      "180": {
        start: {
          line: 624,
          column: 0
        },
        end: {
          line: 624,
          column: 54
        }
      },
      "181": {
        start: {
          line: 626,
          column: 17
        },
        end: {
          line: 631,
          column: 5
        }
      },
      "182": {
        start: {
          line: 632,
          column: 4
        },
        end: {
          line: 641,
          column: 5
        }
      },
      "183": {
        start: {
          line: 634,
          column: 8
        },
        end: {
          line: 639,
          column: 9
        }
      },
      "184": {
        start: {
          line: 635,
          column: 12
        },
        end: {
          line: 635,
          column: 232
        }
      },
      "185": {
        start: {
          line: 638,
          column: 12
        },
        end: {
          line: 638,
          column: 167
        }
      },
      "186": {
        start: {
          line: 640,
          column: 8
        },
        end: {
          line: 640,
          column: 110
        }
      },
      "187": {
        start: {
          line: 642,
          column: 4
        },
        end: {
          line: 642,
          column: 210
        }
      },
      "188": {
        start: {
          line: 644,
          column: 0
        },
        end: {
          line: 644,
          column: 60
        }
      },
      "189": {
        start: {
          line: 646,
          column: 19
        },
        end: {
          line: 652,
          column: 5
        }
      },
      "190": {
        start: {
          line: 653,
          column: 4
        },
        end: {
          line: 655,
          column: 5
        }
      },
      "191": {
        start: {
          line: 654,
          column: 8
        },
        end: {
          line: 654,
          column: 41
        }
      },
      "192": {
        start: {
          line: 656,
          column: 4
        },
        end: {
          line: 656,
          column: 18
        }
      },
      "193": {
        start: {
          line: 658,
          column: 0
        },
        end: {
          line: 658,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "getNonModelObjectArray",
        decl: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 31
          }
        },
        loc: {
          start: {
            line: 19,
            column: 48
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 37
          },
          end: {
            line: 26,
            column: 38
          }
        },
        loc: {
          start: {
            line: 26,
            column: 42
          },
          end: {
            line: 26,
            column: 66
          }
        },
        line: 26
      },
      "2": {
        name: "makeNonModelInputObject",
        decl: {
          start: {
            line: 38,
            column: 9
          },
          end: {
            line: 38,
            column: 32
          }
        },
        loc: {
          start: {
            line: 38,
            column: 58
          },
          end: {
            line: 77,
            column: 1
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 41,
            column: 17
          }
        },
        loc: {
          start: {
            line: 41,
            column: 27
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 41
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 44,
            column: 31
          },
          end: {
            line: 44,
            column: 32
          }
        },
        loc: {
          start: {
            line: 44,
            column: 36
          },
          end: {
            line: 44,
            column: 105
          }
        },
        line: 44
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 50,
            column: 13
          },
          end: {
            line: 50,
            column: 14
          }
        },
        loc: {
          start: {
            line: 50,
            column: 24
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 50
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 51,
            column: 40
          },
          end: {
            line: 51,
            column: 41
          }
        },
        loc: {
          start: {
            line: 51,
            column: 45
          },
          end: {
            line: 51,
            column: 114
          }
        },
        line: 51
      },
      "7": {
        name: "makeCreateInputObject",
        decl: {
          start: {
            line: 79,
            column: 9
          },
          end: {
            line: 79,
            column: 30
          }
        },
        loc: {
          start: {
            line: 79,
            column: 83
          },
          end: {
            line: 140,
            column: 1
          }
        },
        line: 79
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 90,
            column: 16
          },
          end: {
            line: 90,
            column: 17
          }
        },
        loc: {
          start: {
            line: 90,
            column: 27
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 90
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 93,
            column: 31
          },
          end: {
            line: 93,
            column: 32
          }
        },
        loc: {
          start: {
            line: 93,
            column: 36
          },
          end: {
            line: 93,
            column: 105
          }
        },
        line: 93
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 99,
            column: 13
          },
          end: {
            line: 99,
            column: 14
          }
        },
        loc: {
          start: {
            line: 99,
            column: 24
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 99
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 109,
            column: 38
          },
          end: {
            line: 109,
            column: 39
          }
        },
        loc: {
          start: {
            line: 109,
            column: 43
          },
          end: {
            line: 109,
            column: 112
          }
        },
        line: 109
      },
      "12": {
        name: "makeUpdateInputObject",
        decl: {
          start: {
            line: 142,
            column: 9
          },
          end: {
            line: 142,
            column: 30
          }
        },
        loc: {
          start: {
            line: 142,
            column: 72
          },
          end: {
            line: 191,
            column: 1
          }
        },
        line: 142
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        },
        loc: {
          start: {
            line: 145,
            column: 21
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 145
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 148,
            column: 31
          },
          end: {
            line: 148,
            column: 32
          }
        },
        loc: {
          start: {
            line: 148,
            column: 36
          },
          end: {
            line: 148,
            column: 101
          }
        },
        line: 148
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 154,
            column: 13
          },
          end: {
            line: 154,
            column: 14
          }
        },
        loc: {
          start: {
            line: 154,
            column: 24
          },
          end: {
            line: 173,
            column: 5
          }
        },
        line: 154
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 162,
            column: 34
          },
          end: {
            line: 162,
            column: 35
          }
        },
        loc: {
          start: {
            line: 162,
            column: 39
          },
          end: {
            line: 162,
            column: 108
          }
        },
        line: 162
      },
      "17": {
        name: "makeDeleteInputObject",
        decl: {
          start: {
            line: 193,
            column: 9
          },
          end: {
            line: 193,
            column: 30
          }
        },
        loc: {
          start: {
            line: 193,
            column: 52
          },
          end: {
            line: 225,
            column: 1
          }
        },
        line: 193
      },
      "18": {
        name: "makeModelXFilterInputObject",
        decl: {
          start: {
            line: 227,
            column: 9
          },
          end: {
            line: 227,
            column: 36
          }
        },
        loc: {
          start: {
            line: 227,
            column: 67
          },
          end: {
            line: 298,
            column: 1
          }
        },
        line: 227
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 230,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        },
        loc: {
          start: {
            line: 230,
            column: 27
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 230
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 236,
            column: 13
          },
          end: {
            line: 236,
            column: 14
          }
        },
        loc: {
          start: {
            line: 236,
            column: 24
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 236
      },
      "21": {
        name: "makeModelXConditionInputObject",
        decl: {
          start: {
            line: 300,
            column: 9
          },
          end: {
            line: 300,
            column: 39
          }
        },
        loc: {
          start: {
            line: 300,
            column: 70
          },
          end: {
            line: 371,
            column: 1
          }
        },
        line: 300
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 303,
            column: 16
          },
          end: {
            line: 303,
            column: 17
          }
        },
        loc: {
          start: {
            line: 303,
            column: 27
          },
          end: {
            line: 308,
            column: 5
          }
        },
        line: 303
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 309,
            column: 13
          },
          end: {
            line: 309,
            column: 14
          }
        },
        loc: {
          start: {
            line: 309,
            column: 24
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 309
      },
      "24": {
        name: "makeEnumFilterInputObjects",
        decl: {
          start: {
            line: 373,
            column: 9
          },
          end: {
            line: 373,
            column: 35
          }
        },
        loc: {
          start: {
            line: 373,
            column: 66
          },
          end: {
            line: 434,
            column: 1
          }
        },
        line: 373
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 375,
            column: 16
          },
          end: {
            line: 375,
            column: 17
          }
        },
        loc: {
          start: {
            line: 375,
            column: 27
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 375
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 379,
            column: 13
          },
          end: {
            line: 379,
            column: 14
          }
        },
        loc: {
          start: {
            line: 379,
            column: 28
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 379
      },
      "27": {
        name: "makeModelSortDirectionEnumObject",
        decl: {
          start: {
            line: 436,
            column: 9
          },
          end: {
            line: 436,
            column: 41
          }
        },
        loc: {
          start: {
            line: 436,
            column: 44
          },
          end: {
            line: 458,
            column: 1
          }
        },
        line: 436
      },
      "28": {
        name: "makeModelScalarFilterInputObject",
        decl: {
          start: {
            line: 460,
            column: 9
          },
          end: {
            line: 460,
            column: 41
          }
        },
        loc: {
          start: {
            line: 460,
            column: 68
          },
          end: {
            line: 489,
            column: 1
          }
        },
        line: 460
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 463,
            column: 34
          },
          end: {
            line: 463,
            column: 35
          }
        },
        loc: {
          start: {
            line: 463,
            column: 50
          },
          end: {
            line: 470,
            column: 5
          }
        },
        line: 463
      },
      "30": {
        name: "getScalarFilterInputType",
        decl: {
          start: {
            line: 491,
            column: 9
          },
          end: {
            line: 491,
            column: 33
          }
        },
        loc: {
          start: {
            line: 491,
            column: 68
          },
          end: {
            line: 501,
            column: 1
          }
        },
        line: 491
      },
      "31": {
        name: "getScalarConditions",
        decl: {
          start: {
            line: 502,
            column: 9
          },
          end: {
            line: 502,
            column: 28
          }
        },
        loc: {
          start: {
            line: 502,
            column: 35
          },
          end: {
            line: 517,
            column: 1
          }
        },
        line: 502
      },
      "32": {
        name: "makeSizeInputType",
        decl: {
          start: {
            line: 518,
            column: 9
          },
          end: {
            line: 518,
            column: 26
          }
        },
        loc: {
          start: {
            line: 518,
            column: 29
          },
          end: {
            line: 542,
            column: 1
          }
        },
        line: 518
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 520,
            column: 39
          },
          end: {
            line: 520,
            column: 40
          }
        },
        loc: {
          start: {
            line: 520,
            column: 55
          },
          end: {
            line: 527,
            column: 5
          }
        },
        line: 520
      },
      "34": {
        name: "getFunctionListForType",
        decl: {
          start: {
            line: 543,
            column: 9
          },
          end: {
            line: 543,
            column: 31
          }
        },
        loc: {
          start: {
            line: 543,
            column: 42
          },
          end: {
            line: 558,
            column: 1
          }
        },
        line: 543
      },
      "35": {
        name: "makeFunctionInputFields",
        decl: {
          start: {
            line: 559,
            column: 9
          },
          end: {
            line: 559,
            column: 32
          }
        },
        loc: {
          start: {
            line: 559,
            column: 43
          },
          end: {
            line: 593,
            column: 1
          }
        },
        line: 559
      },
      "36": {
        name: "makeAttributeTypeEnum",
        decl: {
          start: {
            line: 594,
            column: 9
          },
          end: {
            line: 594,
            column: 30
          }
        },
        loc: {
          start: {
            line: 594,
            column: 33
          },
          end: {
            line: 606,
            column: 1
          }
        },
        line: 594
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 595,
            column: 26
          },
          end: {
            line: 595,
            column: 27
          }
        },
        loc: {
          start: {
            line: 595,
            column: 42
          },
          end: {
            line: 599,
            column: 5
          }
        },
        line: 595
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 603,
            column: 36
          },
          end: {
            line: 603,
            column: 37
          }
        },
        loc: {
          start: {
            line: 603,
            column: 41
          },
          end: {
            line: 603,
            column: 57
          }
        },
        line: 603
      },
      "39": {
        name: "makeModelConnectionType",
        decl: {
          start: {
            line: 608,
            column: 9
          },
          end: {
            line: 608,
            column: 32
          }
        },
        loc: {
          start: {
            line: 608,
            column: 59
          },
          end: {
            line: 617,
            column: 1
          }
        },
        line: 608
      },
      "40": {
        name: "makeSubscriptionField",
        decl: {
          start: {
            line: 619,
            column: 9
          },
          end: {
            line: 619,
            column: 30
          }
        },
        loc: {
          start: {
            line: 619,
            column: 69
          },
          end: {
            line: 623,
            column: 1
          }
        },
        line: 619
      },
      "41": {
        name: "makeModelConnectionField",
        decl: {
          start: {
            line: 625,
            column: 9
          },
          end: {
            line: 625,
            column: 33
          }
        },
        loc: {
          start: {
            line: 625,
            column: 86
          },
          end: {
            line: 643,
            column: 1
          }
        },
        line: 625
      },
      "42": {
        name: "makeScalarFilterInputs",
        decl: {
          start: {
            line: 645,
            column: 9
          },
          end: {
            line: 645,
            column: 31
          }
        },
        loc: {
          start: {
            line: 645,
            column: 52
          },
          end: {
            line: 657,
            column: 1
          }
        },
        line: 645
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        }, {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 32,
            column: 13
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 27,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 19
          }
        }, {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 25,
            column: 66
          }
        }, {
          start: {
            line: 26,
            column: 16
          },
          end: {
            line: 26,
            column: 67
          }
        }, {
          start: {
            line: 27,
            column: 16
          },
          end: {
            line: 27,
            column: 54
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 45,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 43,
            column: 61
          }
        }, {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 106
          }
        }, {
          start: {
            line: 45,
            column: 13
          },
          end: {
            line: 45,
            column: 22
          }
        }, {
          start: {
            line: 45,
            column: 26
          },
          end: {
            line: 45,
            column: 80
          }
        }],
        line: 43
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 21
          },
          end: {
            line: 53,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 52,
            column: 14
          },
          end: {
            line: 52,
            column: 198
          }
        }, {
          start: {
            line: 53,
            column: 14
          },
          end: {
            line: 53,
            column: 24
          }
        }],
        line: 51
      },
      "6": {
        loc: {
          start: {
            line: 79,
            column: 67
          },
          end: {
            line: 79,
            column: 81
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 79,
            column: 76
          },
          end: {
            line: 79,
            column: 81
          }
        }],
        line: 79
      },
      "7": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }],
        line: 92
      },
      "8": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 94,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 61
          }
        }, {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 106
          }
        }, {
          start: {
            line: 94,
            column: 13
          },
          end: {
            line: 94,
            column: 22
          }
        }, {
          start: {
            line: 94,
            column: 26
          },
          end: {
            line: 94,
            column: 80
          }
        }],
        line: 92
      },
      "9": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }],
        line: 102
      },
      "10": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 103,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 102,
            column: 80
          }
        }, {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 103,
            column: 134
          }
        }],
        line: 102
      },
      "11": {
        loc: {
          start: {
            line: 109,
            column: 19
          },
          end: {
            line: 111,
            column: 28
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 18
          },
          end: {
            line: 110,
            column: 202
          }
        }, {
          start: {
            line: 111,
            column: 18
          },
          end: {
            line: 111,
            column: 28
          }
        }],
        line: 109
      },
      "12": {
        loc: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        }, {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        }],
        line: 123
      },
      "13": {
        loc: {
          start: {
            line: 142,
            column: 56
          },
          end: {
            line: 142,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 142,
            column: 65
          },
          end: {
            line: 142,
            column: 70
          }
        }],
        line: 142
      },
      "14": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }, {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 151,
            column: 9
          }
        }],
        line: 147
      },
      "15": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 149,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 57
          }
        }, {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 148,
            column: 102
          }
        }, {
          start: {
            line: 149,
            column: 13
          },
          end: {
            line: 149,
            column: 22
          }
        }, {
          start: {
            line: 149,
            column: 26
          },
          end: {
            line: 149,
            column: 80
          }
        }],
        line: 147
      },
      "16": {
        loc: {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }],
        line: 156
      },
      "17": {
        loc: {
          start: {
            line: 162,
            column: 15
          },
          end: {
            line: 164,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 14
          },
          end: {
            line: 163,
            column: 192
          }
        }, {
          start: {
            line: 164,
            column: 14
          },
          end: {
            line: 164,
            column: 18
          }
        }],
        line: 162
      },
      "18": {
        loc: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        }, {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        }],
        line: 174
      },
      "19": {
        loc: {
          start: {
            line: 193,
            column: 36
          },
          end: {
            line: 193,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 193,
            column: 45
          },
          end: {
            line: 193,
            column: 50
          }
        }],
        line: 193
      },
      "20": {
        loc: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        }, {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        }],
        line: 208
      },
      "21": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }, {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 234,
            column: 9
          }
        }],
        line: 232
      },
      "22": {
        loc: {
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 232,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 12
          },
          end: {
            line: 232,
            column: 61
          }
        }, {
          start: {
            line: 232,
            column: 66
          },
          end: {
            line: 232,
            column: 75
          }
        }, {
          start: {
            line: 232,
            column: 79
          },
          end: {
            line: 232,
            column: 133
          }
        }],
        line: 232
      },
      "23": {
        loc: {
          start: {
            line: 240,
            column: 27
          },
          end: {
            line: 240,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 27
          },
          end: {
            line: 240,
            column: 36
          }
        }, {
          start: {
            line: 240,
            column: 40
          },
          end: {
            line: 240,
            column: 94
          }
        }],
        line: 240
      },
      "24": {
        loc: {
          start: {
            line: 241,
            column: 31
          },
          end: {
            line: 243,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 242,
            column: 14
          },
          end: {
            line: 242,
            column: 119
          }
        }, {
          start: {
            line: 243,
            column: 14
          },
          end: {
            line: 243,
            column: 121
          }
        }],
        line: 241
      },
      "25": {
        loc: {
          start: {
            line: 241,
            column: 31
          },
          end: {
            line: 241,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 31
          },
          end: {
            line: 241,
            column: 41
          }
        }, {
          start: {
            line: 241,
            column: 45
          },
          end: {
            line: 241,
            column: 51
          }
        }],
        line: 241
      },
      "26": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }, {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 307,
            column: 9
          }
        }],
        line: 305
      },
      "27": {
        loc: {
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 134
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 61
          }
        }, {
          start: {
            line: 305,
            column: 66
          },
          end: {
            line: 305,
            column: 75
          }
        }, {
          start: {
            line: 305,
            column: 79
          },
          end: {
            line: 305,
            column: 133
          }
        }],
        line: 305
      },
      "28": {
        loc: {
          start: {
            line: 313,
            column: 27
          },
          end: {
            line: 313,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 313,
            column: 27
          },
          end: {
            line: 313,
            column: 36
          }
        }, {
          start: {
            line: 313,
            column: 40
          },
          end: {
            line: 313,
            column: 94
          }
        }],
        line: 313
      },
      "29": {
        loc: {
          start: {
            line: 314,
            column: 34
          },
          end: {
            line: 316,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 315,
            column: 14
          },
          end: {
            line: 315,
            column: 119
          }
        }, {
          start: {
            line: 316,
            column: 14
          },
          end: {
            line: 316,
            column: 121
          }
        }],
        line: 314
      },
      "30": {
        loc: {
          start: {
            line: 314,
            column: 34
          },
          end: {
            line: 314,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 314,
            column: 34
          },
          end: {
            line: 314,
            column: 44
          }
        }, {
          start: {
            line: 314,
            column: 48
          },
          end: {
            line: 314,
            column: 54
          }
        }],
        line: 314
      },
      "31": {
        loc: {
          start: {
            line: 377,
            column: 15
          },
          end: {
            line: 377,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 377,
            column: 15
          },
          end: {
            line: 377,
            column: 24
          }
        }, {
          start: {
            line: 377,
            column: 28
          },
          end: {
            line: 377,
            column: 82
          }
        }],
        line: 377
      },
      "32": {
        loc: {
          start: {
            line: 382,
            column: 21
          },
          end: {
            line: 384,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 383,
            column: 14
          },
          end: {
            line: 383,
            column: 119
          }
        }, {
          start: {
            line: 384,
            column: 14
          },
          end: {
            line: 384,
            column: 121
          }
        }],
        line: 382
      },
      "33": {
        loc: {
          start: {
            line: 392,
            column: 18
          },
          end: {
            line: 392,
            column: 177
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 392,
            column: 27
          },
          end: {
            line: 392,
            column: 122
          }
        }, {
          start: {
            line: 392,
            column: 125
          },
          end: {
            line: 392,
            column: 177
          }
        }],
        line: 392
      },
      "34": {
        loc: {
          start: {
            line: 401,
            column: 18
          },
          end: {
            line: 401,
            column: 177
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 401,
            column: 27
          },
          end: {
            line: 401,
            column: 122
          }
        }, {
          start: {
            line: 401,
            column: 125
          },
          end: {
            line: 401,
            column: 177
          }
        }],
        line: 401
      },
      "35": {
        loc: {
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        }, {
          start: {
            line: 404,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        }],
        line: 404
      },
      "36": {
        loc: {
          start: {
            line: 472,
            column: 4
          },
          end: {
            line: 474,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 4
          },
          end: {
            line: 474,
            column: 5
          }
        }, {
          start: {
            line: 472,
            column: 4
          },
          end: {
            line: 474,
            column: 5
          }
        }],
        line: 472
      },
      "37": {
        loc: {
          start: {
            line: 492,
            column: 4
          },
          end: {
            line: 500,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 493,
            column: 8
          },
          end: {
            line: 494,
            column: 111
          }
        }, {
          start: {
            line: 495,
            column: 8
          },
          end: {
            line: 495,
            column: 19
          }
        }, {
          start: {
            line: 496,
            column: 8
          },
          end: {
            line: 497,
            column: 79
          }
        }, {
          start: {
            line: 498,
            column: 8
          },
          end: {
            line: 499,
            column: 68
          }
        }],
        line: 492
      },
      "38": {
        loc: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 516,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 504,
            column: 8
          },
          end: {
            line: 505,
            column: 37
          }
        }, {
          start: {
            line: 506,
            column: 8
          },
          end: {
            line: 507,
            column: 33
          }
        }, {
          start: {
            line: 508,
            column: 8
          },
          end: {
            line: 509,
            column: 34
          }
        }, {
          start: {
            line: 510,
            column: 8
          },
          end: {
            line: 511,
            column: 36
          }
        }, {
          start: {
            line: 512,
            column: 8
          },
          end: {
            line: 513,
            column: 38
          }
        }, {
          start: {
            line: 514,
            column: 8
          },
          end: {
            line: 515,
            column: 79
          }
        }],
        line: 503
      },
      "39": {
        loc: {
          start: {
            line: 544,
            column: 4
          },
          end: {
            line: 557,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 545,
            column: 8
          },
          end: {
            line: 546,
            column: 36
          }
        }, {
          start: {
            line: 547,
            column: 8
          },
          end: {
            line: 548,
            column: 32
          }
        }, {
          start: {
            line: 549,
            column: 8
          },
          end: {
            line: 550,
            column: 33
          }
        }, {
          start: {
            line: 551,
            column: 8
          },
          end: {
            line: 552,
            column: 35
          }
        }, {
          start: {
            line: 553,
            column: 8
          },
          end: {
            line: 554,
            column: 37
          }
        }, {
          start: {
            line: 555,
            column: 8
          },
          end: {
            line: 556,
            column: 79
          }
        }],
        line: 544
      },
      "40": {
        loc: {
          start: {
            line: 562,
            column: 4
          },
          end: {
            line: 571,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 562,
            column: 4
          },
          end: {
            line: 571,
            column: 5
          }
        }, {
          start: {
            line: 562,
            column: 4
          },
          end: {
            line: 571,
            column: 5
          }
        }],
        line: 562
      },
      "41": {
        loc: {
          start: {
            line: 572,
            column: 4
          },
          end: {
            line: 581,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 572,
            column: 4
          },
          end: {
            line: 581,
            column: 5
          }
        }, {
          start: {
            line: 572,
            column: 4
          },
          end: {
            line: 581,
            column: 5
          }
        }],
        line: 572
      },
      "42": {
        loc: {
          start: {
            line: 582,
            column: 4
          },
          end: {
            line: 591,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 582,
            column: 4
          },
          end: {
            line: 591,
            column: 5
          }
        }, {
          start: {
            line: 582,
            column: 4
          },
          end: {
            line: 591,
            column: 5
          }
        }],
        line: 582
      },
      "43": {
        loc: {
          start: {
            line: 608,
            column: 43
          },
          end: {
            line: 608,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 608,
            column: 52
          },
          end: {
            line: 608,
            column: 57
          }
        }],
        line: 608
      },
      "44": {
        loc: {
          start: {
            line: 613,
            column: 4
          },
          end: {
            line: 615,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 613,
            column: 4
          },
          end: {
            line: 615,
            column: 5
          }
        }, {
          start: {
            line: 613,
            column: 4
          },
          end: {
            line: 615,
            column: 5
          }
        }],
        line: 613
      },
      "45": {
        loc: {
          start: {
            line: 632,
            column: 4
          },
          end: {
            line: 641,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 632,
            column: 4
          },
          end: {
            line: 641,
            column: 5
          }
        }, {
          start: {
            line: 632,
            column: 4
          },
          end: {
            line: 641,
            column: 5
          }
        }],
        line: 632
      },
      "46": {
        loc: {
          start: {
            line: 634,
            column: 8
          },
          end: {
            line: 639,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 634,
            column: 8
          },
          end: {
            line: 639,
            column: 9
          }
        }, {
          start: {
            line: 634,
            column: 8
          },
          end: {
            line: 639,
            column: 9
          }
        }],
        line: 634
      },
      "47": {
        loc: {
          start: {
            line: 653,
            column: 4
          },
          end: {
            line: 655,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 653,
            column: 4
          },
          end: {
            line: 655,
            column: 5
          }
        }, {
          start: {
            line: 653,
            column: 4
          },
          end: {
            line: 655,
            column: 5
          }
        }],
        line: 653
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0, 0, 0],
      "38": [0, 0, 0, 0, 0, 0],
      "39": [0, 0, 0, 0, 0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      file: "/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/definitions.ts",
      sources: ["/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/definitions.ts"],
      names: [],
      mappings: "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",
      sourcesContent: ["import {\n  ObjectTypeDefinitionNode,\n  InputObjectTypeDefinitionNode,\n  InputValueDefinitionNode,\n  FieldDefinitionNode,\n  Kind,\n  TypeNode,\n  EnumTypeDefinitionNode,\n  ObjectTypeExtensionNode,\n  NamedTypeNode,\n  DirectiveNode,\n  InterfaceTypeDefinitionNode,\n  EnumValueDefinitionNode,\n} from 'graphql';\nimport {\n  wrapNonNull,\n  unwrapNonNull,\n  makeNamedType,\n  toUpper,\n  graphqlName,\n  makeListType,\n  isScalar,\n  getBaseType,\n  blankObjectExtension,\n  extensionWithFields,\n  makeField,\n  makeInputValueDefinition,\n  ModelResourceIDs,\n  makeDirective,\n  makeArgument,\n  makeValueNode,\n  withNamedNodeNamed,\n  isListType,\n} from 'graphql-transformer-common';\nimport { TransformerContext } from 'graphql-transformer-core';\nimport { getCreatedAtFieldName, getUpdatedAtFieldName } from './ModelDirectiveArgs';\n\nconst STRING_CONDITIONS = ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'contains', 'notContains', 'between', 'beginsWith'];\nconst ID_CONDITIONS = ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'contains', 'notContains', 'between', 'beginsWith'];\nconst INT_CONDITIONS = ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'between'];\nconst FLOAT_CONDITIONS = ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'between'];\nconst BOOLEAN_CONDITIONS = ['ne', 'eq'];\nconst SIZE_CONDITIONS = ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'between'];\n\nconst STRING_FUNCTIONS = new Set<string>(['attributeExists', 'attributeType', 'size']);\nconst ID_FUNCTIONS = new Set<string>(['attributeExists', 'attributeType', 'size']);\nconst INT_FUNCTIONS = new Set<string>(['attributeExists', 'attributeType']);\nconst FLOAT_FUNCTIONS = new Set<string>(['attributeExists', 'attributeType']);\nconst BOOLEAN_FUNCTIONS = new Set<string>(['attributeExists', 'attributeType']);\n\nconst ATTRIBUTE_TYPES = ['binary', 'binarySet', 'bool', 'list', 'map', 'number', 'numberSet', 'string', 'stringSet', '_null'];\n\nexport function getNonModelObjectArray(\n  obj: ObjectTypeDefinitionNode,\n  ctx: TransformerContext,\n  pMap: Map<string, ObjectTypeDefinitionNode>,\n): ObjectTypeDefinitionNode[] {\n  // loop over all fields in the object, picking out all nonscalars that are not @model types\n  for (const field of obj.fields) {\n    if (!isScalar(field.type)) {\n      const def = ctx.getType(getBaseType(field.type));\n\n      if (\n        def &&\n        def.kind === Kind.OBJECT_TYPE_DEFINITION &&\n        !def.directives.find(e => e.name.value === 'model') &&\n        pMap.get(def.name.value) === undefined\n      ) {\n        // recursively find any non @model types referenced by the current\n        // non @model type\n        pMap.set(def.name.value, def);\n        getNonModelObjectArray(def, ctx, pMap);\n      }\n    }\n  }\n\n  return Array.from(pMap.values());\n}\n\nexport function makeNonModelInputObject(\n  obj: ObjectTypeDefinitionNode,\n  nonModelTypes: ObjectTypeDefinitionNode[],\n  ctx: TransformerContext,\n): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.NonModelInputObjectName(obj.name.value);\n  const fields: InputValueDefinitionNode[] = obj.fields\n    .filter((field: FieldDefinitionNode) => {\n      const fieldType = ctx.getType(getBaseType(field.type));\n      if (\n        isScalar(field.type) ||\n        nonModelTypes.find(e => e.name.value === getBaseType(field.type)) ||\n        (fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION)\n      ) {\n        return true;\n      }\n      return false;\n    })\n    .map((field: FieldDefinitionNode) => {\n      const type = nonModelTypes.find(e => e.name.value === getBaseType(field.type))\n        ? withNamedNodeNamed(field.type, ModelResourceIDs.NonModelInputObjectName(getBaseType(field.type)))\n        : field.type;\n      return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: field.name,\n        type,\n        // TODO: Service does not support new style descriptions so wait.\n        // description: field.description,\n        directives: [],\n      };\n    });\n  return {\n    kind: 'InputObjectTypeDefinition',\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeCreateInputObject(\n  obj: ObjectTypeDefinitionNode,\n  directive: DirectiveNode,\n  nonModelTypes: ObjectTypeDefinitionNode[],\n  ctx: TransformerContext,\n  isSync: boolean = false,\n): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelCreateInputObjectName(obj.name.value);\n  const createdAtField = getCreatedAtFieldName(directive);\n  const updatedAtField = getUpdatedAtFieldName(directive);\n\n  // List of fields that can be assigend in resolver if they are not passed in input\n  const autoGeneratableFieldsWithType: Record<string, string[]> = {\n    id: ['ID'],\n    [createdAtField]: ['AWSDateTime', 'String'],\n    [updatedAtField]: ['AWSDateTime', 'String'],\n  };\n\n  const fields: InputValueDefinitionNode[] = obj.fields\n    .filter((field: FieldDefinitionNode) => {\n      const fieldType = ctx.getType(getBaseType(field.type));\n      if (\n        isScalar(field.type) ||\n        nonModelTypes.find(e => e.name.value === getBaseType(field.type)) ||\n        (fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION)\n      ) {\n        return true;\n      }\n      return false;\n    })\n    .map((field: FieldDefinitionNode) => {\n      let type: TypeNode;\n      const fieldName = field.name.value;\n      if (\n        Object.keys(autoGeneratableFieldsWithType).indexOf(fieldName) !== -1 &&\n        autoGeneratableFieldsWithType[fieldName].indexOf(unwrapNonNull(field.type).name.value) !== -1\n      ) {\n        // ids are always optional. when provided the value is used.\n        // when not provided the value is not used.\n        type = unwrapNonNull(field.type);\n      } else {\n        type = nonModelTypes.find(e => e.name.value === getBaseType(field.type))\n          ? withNamedNodeNamed(field.type, ModelResourceIDs.NonModelInputObjectName(getBaseType(field.type)))\n          : field.type;\n      }\n      return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: field.name,\n        type,\n        // TODO: Service does not support new style descriptions so wait.\n        // description: field.description,\n        directives: [],\n      };\n    });\n  // add the version if this project is a sync project\n  if (isSync) {\n    fields.push(makeInputValueDefinition('_version', makeNamedType('Int')));\n  }\n  return {\n    kind: 'InputObjectTypeDefinition',\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeUpdateInputObject(\n  obj: ObjectTypeDefinitionNode,\n  nonModelTypes: ObjectTypeDefinitionNode[],\n  ctx: TransformerContext,\n  isSync: boolean = false,\n): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelUpdateInputObjectName(obj.name.value);\n  const fields: InputValueDefinitionNode[] = obj.fields\n    .filter(f => {\n      const fieldType = ctx.getType(getBaseType(f.type));\n      if (\n        isScalar(f.type) ||\n        nonModelTypes.find(e => e.name.value === getBaseType(f.type)) ||\n        (fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION)\n      ) {\n        return true;\n      }\n      return false;\n    })\n    .map((field: FieldDefinitionNode) => {\n      let type;\n      if (field.name.value === 'id') {\n        type = wrapNonNull(field.type);\n      } else {\n        type = unwrapNonNull(field.type);\n      }\n      type = nonModelTypes.find(e => e.name.value === getBaseType(field.type))\n        ? withNamedNodeNamed(type, ModelResourceIDs.NonModelInputObjectName(getBaseType(field.type)))\n        : type;\n      return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: field.name,\n        type,\n        // TODO: Service does not support new style descriptions so wait.\n        // description: field.description,\n        directives: [],\n      };\n    });\n  if (isSync) {\n    fields.push(makeInputValueDefinition('_version', makeNamedType('Int')));\n  }\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeDeleteInputObject(obj: ObjectTypeDefinitionNode, isSync: boolean = false): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelDeleteInputObjectName(obj.name.value);\n  const fields: InputValueDefinitionNode[] = [\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: { kind: 'Name', value: 'id' },\n      type: makeNamedType('ID'),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: {\n      //     kind: 'StringValue',\n      //     value: `The id of the ${obj.name.value} to delete.`\n      // },\n      directives: [],\n    },\n  ];\n  if (isSync) {\n    fields.push(makeInputValueDefinition('_version', makeNamedType('Int')));\n  }\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} delete mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeModelXFilterInputObject(\n  obj: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode,\n  ctx: TransformerContext,\n  supportsConditions: Boolean,\n): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelFilterInputTypeName(obj.name.value);\n  const fields: InputValueDefinitionNode[] = obj.fields\n    .filter((field: FieldDefinitionNode) => {\n      const fieldType = ctx.getType(getBaseType(field.type));\n      if (isScalar(field.type) || (fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION)) {\n        return true;\n      }\n    })\n    .map((field: FieldDefinitionNode) => {\n      const baseType = getBaseType(field.type);\n      const fieldType = ctx.getType(baseType);\n      const isList = isListType(field.type);\n      const isEnumType = fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION;\n      const filterTypeName =\n        isEnumType && isList\n          ? ModelResourceIDs.ModelFilterListInputTypeName(baseType, !supportsConditions)\n          : ModelResourceIDs.ModelScalarFilterInputTypeName(baseType, !supportsConditions);\n\n      return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: field.name,\n        type: makeNamedType(filterTypeName),\n        // TODO: Service does not support new style descriptions so wait.\n        // description: field.description,\n        directives: [],\n      };\n    });\n\n  fields.push(\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'and',\n      },\n      type: makeListType(makeNamedType(name)),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'or',\n      },\n      type: makeListType(makeNamedType(name)),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'not',\n      },\n      type: makeNamedType(name),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n  );\n\n  return {\n    kind: 'InputObjectTypeDefinition',\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeModelXConditionInputObject(\n  obj: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode,\n  ctx: TransformerContext,\n  supportsConditions: Boolean,\n): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelConditionInputTypeName(obj.name.value);\n  const fields: InputValueDefinitionNode[] = obj.fields\n    .filter((field: FieldDefinitionNode) => {\n      const fieldType = ctx.getType(getBaseType(field.type));\n      if (isScalar(field.type) || (fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION)) {\n        return true;\n      }\n    })\n    .map((field: FieldDefinitionNode) => {\n      const baseType = getBaseType(field.type);\n      const fieldType = ctx.getType(baseType);\n      const isList = isListType(field.type);\n      const isEnumType = fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION;\n      const conditionTypeName =\n        isEnumType && isList\n          ? ModelResourceIDs.ModelFilterListInputTypeName(baseType, !supportsConditions)\n          : ModelResourceIDs.ModelScalarFilterInputTypeName(baseType, !supportsConditions);\n\n      return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: field.name,\n        type: makeNamedType(conditionTypeName),\n        // TODO: Service does not support new style descriptions so wait.\n        // description: field.description,\n        directives: [],\n      };\n    });\n\n  fields.push(\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'and',\n      },\n      type: makeListType(makeNamedType(name)),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'or',\n      },\n      type: makeListType(makeNamedType(name)),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'not',\n      },\n      type: makeNamedType(name),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n  );\n\n  return {\n    kind: 'InputObjectTypeDefinition',\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeEnumFilterInputObjects(\n  obj: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode,\n  ctx: TransformerContext,\n  supportsConditions: Boolean,\n): InputObjectTypeDefinitionNode[] {\n  return obj.fields\n    .filter((field: FieldDefinitionNode) => {\n      const fieldType = ctx.getType(getBaseType(field.type));\n      return fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION;\n    })\n    .map((enumField: FieldDefinitionNode) => {\n      const typeName = getBaseType(enumField.type);\n      const isList = isListType(enumField.type);\n      const name = isList\n        ? ModelResourceIDs.ModelFilterListInputTypeName(typeName, !supportsConditions)\n        : ModelResourceIDs.ModelScalarFilterInputTypeName(typeName, !supportsConditions);\n      const fields = [];\n\n      fields.push({\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: {\n          kind: 'Name',\n          value: 'eq',\n        },\n        type: isList ? makeListType(makeNamedType(typeName)) : makeNamedType(typeName),\n        directives: [],\n      });\n\n      fields.push({\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: {\n          kind: 'Name',\n          value: 'ne',\n        },\n        type: isList ? makeListType(makeNamedType(typeName)) : makeNamedType(typeName),\n        directives: [],\n      });\n\n      if (isList) {\n        fields.push({\n          kind: Kind.INPUT_VALUE_DEFINITION,\n          name: {\n            kind: 'Name',\n            value: 'contains',\n          },\n          type: makeNamedType(typeName),\n          directives: [],\n        });\n\n        fields.push({\n          kind: Kind.INPUT_VALUE_DEFINITION,\n          name: {\n            kind: 'Name',\n            value: 'notContains',\n          },\n          type: makeNamedType(typeName),\n          directives: [],\n        });\n      }\n\n      return {\n        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        name: {\n          kind: 'Name',\n          value: name,\n        },\n        fields,\n        directives: [],\n      } as InputObjectTypeDefinitionNode;\n    });\n}\n\nexport function makeModelSortDirectionEnumObject(): EnumTypeDefinitionNode {\n  const name = graphqlName('ModelSortDirection');\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    values: [\n      {\n        kind: Kind.ENUM_VALUE_DEFINITION,\n        name: { kind: 'Name', value: 'ASC' },\n        directives: [],\n      },\n      {\n        kind: Kind.ENUM_VALUE_DEFINITION,\n        name: { kind: 'Name', value: 'DESC' },\n        directives: [],\n      },\n    ],\n    directives: [],\n  };\n}\n\nexport function makeModelScalarFilterInputObject(type: string, supportsConditions: Boolean): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelFilterScalarInputTypeName(type, !supportsConditions);\n  const conditions = getScalarConditions(type);\n  const fields: InputValueDefinitionNode[] = conditions.map((condition: string) => ({\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    name: { kind: 'Name' as 'Name', value: condition },\n    type: getScalarFilterInputType(condition, type, name),\n    // TODO: Service does not support new style descriptions so wait.\n    // description: field.description,\n    directives: [],\n  }));\n  let functionInputFields = [];\n  if (supportsConditions) {\n    functionInputFields = makeFunctionInputFields(type);\n  }\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields: [...fields, ...functionInputFields],\n    directives: [],\n  };\n}\n\nfunction getScalarFilterInputType(condition: string, type: string, filterInputName: string): TypeNode {\n  switch (condition) {\n    case 'between':\n      return makeListType(makeNamedType(type));\n    case 'and':\n    case 'or':\n      return makeNamedType(filterInputName);\n    default:\n      return makeNamedType(type);\n  }\n}\n\nfunction getScalarConditions(type: string): string[] {\n  switch (type) {\n    case 'String':\n      return STRING_CONDITIONS;\n    case 'ID':\n      return ID_CONDITIONS;\n    case 'Int':\n      return INT_CONDITIONS;\n    case 'Float':\n      return FLOAT_CONDITIONS;\n    case 'Boolean':\n      return BOOLEAN_CONDITIONS;\n    default:\n      throw new Error('Valid types are String, ID, Int, Float, Boolean');\n  }\n}\n\nfunction makeSizeInputType(): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelSizeInputTypeName();\n  const fields: InputValueDefinitionNode[] = SIZE_CONDITIONS.map((condition: string) => ({\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    name: { kind: 'Name' as 'Name', value: condition },\n    type: getScalarFilterInputType(condition, 'Int', '' /* unused */),\n    // TODO: Service does not support new style descriptions so wait.\n    // description: field.description,\n    directives: [],\n  }));\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nfunction getFunctionListForType(typeName: string): Set<string> {\n  switch (typeName) {\n    case 'String':\n      return STRING_FUNCTIONS;\n    case 'ID':\n      return ID_FUNCTIONS;\n    case 'Int':\n      return INT_FUNCTIONS;\n    case 'Float':\n      return FLOAT_FUNCTIONS;\n    case 'Boolean':\n      return BOOLEAN_FUNCTIONS;\n    default:\n      throw new Error('Valid types are String, ID, Int, Float, Boolean');\n  }\n}\n\nfunction makeFunctionInputFields(typeName: string): InputValueDefinitionNode[] {\n  const functions = getFunctionListForType(typeName);\n  const fields = new Array<InputValueDefinitionNode>();\n\n  if (functions.has('attributeExists')) {\n    fields.push({\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: { kind: 'Name' as 'Name', value: 'attributeExists' },\n      type: makeNamedType('Boolean'),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    });\n  }\n\n  if (functions.has('attributeType')) {\n    fields.push({\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: { kind: 'Name' as 'Name', value: 'attributeType' },\n      type: makeNamedType(ModelResourceIDs.ModelAttributeTypesName()),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    });\n  }\n\n  if (functions.has('size')) {\n    fields.push({\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: { kind: 'Name' as 'Name', value: 'size' },\n      type: makeNamedType(ModelResourceIDs.ModelSizeInputTypeName()),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    });\n  }\n\n  return fields;\n}\n\nexport function makeAttributeTypeEnum(): EnumTypeDefinitionNode {\n  const makeEnumValue = (enumValue: string): EnumValueDefinitionNode => ({\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    name: { kind: 'Name' as 'Name', value: enumValue },\n    directives: [],\n  });\n\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    name: { kind: 'Name' as 'Name', value: ModelResourceIDs.ModelAttributeTypesName() },\n    values: ATTRIBUTE_TYPES.map(t => makeEnumValue(t)),\n    directives: [],\n  };\n}\n\nexport function makeModelConnectionType(typeName: string, isSync: Boolean = false): ObjectTypeExtensionNode {\n  const connectionName = ModelResourceIDs.ModelConnectionTypeName(typeName);\n  let connectionTypeExtension = blankObjectExtension(connectionName);\n  connectionTypeExtension = extensionWithFields(connectionTypeExtension, [makeField('items', [], makeListType(makeNamedType(typeName)))]);\n  connectionTypeExtension = extensionWithFields(connectionTypeExtension, [makeField('nextToken', [], makeNamedType('String'))]);\n  if (isSync) {\n    connectionTypeExtension = extensionWithFields(connectionTypeExtension, [makeField('startedAt', [], makeNamedType('AWSTimestamp'))]);\n  }\n  return connectionTypeExtension;\n}\n\nexport function makeSubscriptionField(fieldName: string, returnTypeName: string, mutations: string[]): FieldDefinitionNode {\n  return makeField(fieldName, [], makeNamedType(returnTypeName), [\n    makeDirective('aws_subscribe', [makeArgument('mutations', makeValueNode(mutations))]),\n  ]);\n}\n\nexport type SortKeyFieldInfoTypeName = 'Composite' | string;\n\nexport interface SortKeyFieldInfo {\n  // The name of the sort key field.\n  fieldName: string;\n  // The GraphQL type of the sort key field.\n  typeName: SortKeyFieldInfoTypeName;\n  // Name of the model this field is on.\n  model?: string;\n  // The name of the key  that this sortKey is on.\n  keyName?: string;\n}\n\nexport function makeModelConnectionField(\n  fieldName: string,\n  returnTypeName: string,\n  sortKeyInfo?: SortKeyFieldInfo,\n  directives?: DirectiveNode[],\n): FieldDefinitionNode {\n  const args = [\n    makeInputValueDefinition('filter', makeNamedType(ModelResourceIDs.ModelFilterInputTypeName(returnTypeName))),\n    makeInputValueDefinition('sortDirection', makeNamedType('ModelSortDirection')),\n    makeInputValueDefinition('limit', makeNamedType('Int')),\n    makeInputValueDefinition('nextToken', makeNamedType('String')),\n  ];\n  if (sortKeyInfo) {\n    let namedType: NamedTypeNode;\n    if (sortKeyInfo.typeName === 'Composite') {\n      namedType = makeNamedType(ModelResourceIDs.ModelCompositeKeyConditionInputTypeName(sortKeyInfo.model, toUpper(sortKeyInfo.keyName)));\n    } else {\n      namedType = makeNamedType(ModelResourceIDs.ModelKeyConditionInputTypeName(sortKeyInfo.typeName));\n    }\n\n    args.unshift(makeInputValueDefinition(sortKeyInfo.fieldName, namedType));\n  }\n  return makeField(fieldName, args, makeNamedType(ModelResourceIDs.ModelConnectionTypeName(returnTypeName)), directives);\n}\n\nexport function makeScalarFilterInputs(supportsConditions: Boolean): InputObjectTypeDefinitionNode[] {\n  const inputs = [\n    makeModelScalarFilterInputObject('String', supportsConditions),\n    makeModelScalarFilterInputObject('ID', supportsConditions),\n    makeModelScalarFilterInputObject('Int', supportsConditions),\n    makeModelScalarFilterInputObject('Float', supportsConditions),\n    makeModelScalarFilterInputObject('Boolean', supportsConditions),\n  ];\n\n  if (supportsConditions) {\n    inputs.push(makeSizeInputType());\n  }\n\n  return inputs;\n}\n"]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "57c4b88e5ce4e6aca52c2dfa961e4e6fbb0bc9fd"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20luglzvq8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_20luglzvq8();
cov_20luglzvq8().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_20luglzvq8().s[1]++;
exports.makeScalarFilterInputs = exports.makeModelConnectionField = exports.makeSubscriptionField = exports.makeModelConnectionType = exports.makeAttributeTypeEnum = exports.makeModelScalarFilterInputObject = exports.makeModelSortDirectionEnumObject = exports.makeEnumFilterInputObjects = exports.makeModelXConditionInputObject = exports.makeModelXFilterInputObject = exports.makeDeleteInputObject = exports.makeUpdateInputObject = exports.makeCreateInputObject = exports.makeNonModelInputObject = exports.getNonModelObjectArray = void 0;
const graphql_1 =
/* istanbul ignore next */
(cov_20luglzvq8().s[2]++, require("graphql"));
const graphql_transformer_common_1 =
/* istanbul ignore next */
(cov_20luglzvq8().s[3]++, require("graphql-transformer-common"));
const ModelDirectiveArgs_1 =
/* istanbul ignore next */
(cov_20luglzvq8().s[4]++, require("./ModelDirectiveArgs"));
const STRING_CONDITIONS =
/* istanbul ignore next */
(cov_20luglzvq8().s[5]++, ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'contains', 'notContains', 'between', 'beginsWith']);
const ID_CONDITIONS =
/* istanbul ignore next */
(cov_20luglzvq8().s[6]++, ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'contains', 'notContains', 'between', 'beginsWith']);
const INT_CONDITIONS =
/* istanbul ignore next */
(cov_20luglzvq8().s[7]++, ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'between']);
const FLOAT_CONDITIONS =
/* istanbul ignore next */
(cov_20luglzvq8().s[8]++, ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'between']);
const BOOLEAN_CONDITIONS =
/* istanbul ignore next */
(cov_20luglzvq8().s[9]++, ['ne', 'eq']);
const SIZE_CONDITIONS =
/* istanbul ignore next */
(cov_20luglzvq8().s[10]++, ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'between']);
const STRING_FUNCTIONS =
/* istanbul ignore next */
(cov_20luglzvq8().s[11]++, new Set(['attributeExists', 'attributeType', 'size']));
const ID_FUNCTIONS =
/* istanbul ignore next */
(cov_20luglzvq8().s[12]++, new Set(['attributeExists', 'attributeType', 'size']));
const INT_FUNCTIONS =
/* istanbul ignore next */
(cov_20luglzvq8().s[13]++, new Set(['attributeExists', 'attributeType']));
const FLOAT_FUNCTIONS =
/* istanbul ignore next */
(cov_20luglzvq8().s[14]++, new Set(['attributeExists', 'attributeType']));
const BOOLEAN_FUNCTIONS =
/* istanbul ignore next */
(cov_20luglzvq8().s[15]++, new Set(['attributeExists', 'attributeType']));
const ATTRIBUTE_TYPES =
/* istanbul ignore next */
(cov_20luglzvq8().s[16]++, ['binary', 'binarySet', 'bool', 'list', 'map', 'number', 'numberSet', 'string', 'stringSet', '_null']);

function getNonModelObjectArray(obj, ctx, pMap) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[0]++;
  cov_20luglzvq8().s[17]++;

  // loop over all fields in the object, picking out all nonscalars that are not @model types
  for (const field of obj.fields) {
    /* istanbul ignore next */
    cov_20luglzvq8().s[18]++;

    if (!graphql_transformer_common_1.isScalar(field.type)) {
      /* istanbul ignore next */
      cov_20luglzvq8().b[0][0]++;
      const def =
      /* istanbul ignore next */
      (cov_20luglzvq8().s[19]++, ctx.getType(graphql_transformer_common_1.getBaseType(field.type)));

      /* istanbul ignore next */
      cov_20luglzvq8().s[20]++;

      if (
      /* istanbul ignore next */
      (cov_20luglzvq8().b[2][0]++, def) &&
      /* istanbul ignore next */
      (cov_20luglzvq8().b[2][1]++, def.kind === graphql_1.Kind.OBJECT_TYPE_DEFINITION) &&
      /* istanbul ignore next */
      (cov_20luglzvq8().b[2][2]++, !def.directives.find(e => {
        /* istanbul ignore next */
        cov_20luglzvq8().f[1]++;
        cov_20luglzvq8().s[21]++;
        return e.name.value === 'model';
      })) &&
      /* istanbul ignore next */
      (cov_20luglzvq8().b[2][3]++, pMap.get(def.name.value) === undefined)) {
        /* istanbul ignore next */
        cov_20luglzvq8().b[1][0]++;
        cov_20luglzvq8().s[22]++;
        // recursively find any non @model types referenced by the current
        // non @model type
        pMap.set(def.name.value, def);

        /* istanbul ignore next */
        cov_20luglzvq8().s[23]++;
        getNonModelObjectArray(def, ctx, pMap);
      } else
      /* istanbul ignore next */
      {
        cov_20luglzvq8().b[1][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_20luglzvq8().b[0][1]++;
    }
  }

  /* istanbul ignore next */
  cov_20luglzvq8().s[24]++;
  return Array.from(pMap.values());
}

/* istanbul ignore next */
cov_20luglzvq8().s[25]++;
exports.getNonModelObjectArray = getNonModelObjectArray;

function makeNonModelInputObject(obj, nonModelTypes, ctx) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[2]++;
  const name =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[26]++, graphql_transformer_common_1.ModelResourceIDs.NonModelInputObjectName(obj.name.value));
  const fields =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[27]++, obj.fields.filter(field => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[3]++;
    const fieldType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[28]++, ctx.getType(graphql_transformer_common_1.getBaseType(field.type)));

    /* istanbul ignore next */
    cov_20luglzvq8().s[29]++;

    if (
    /* istanbul ignore next */
    (cov_20luglzvq8().b[4][0]++, graphql_transformer_common_1.isScalar(field.type)) ||
    /* istanbul ignore next */
    (cov_20luglzvq8().b[4][1]++, nonModelTypes.find(e => {
      /* istanbul ignore next */
      cov_20luglzvq8().f[4]++;
      cov_20luglzvq8().s[30]++;
      return e.name.value === graphql_transformer_common_1.getBaseType(field.type);
    })) ||
    /* istanbul ignore next */
    (cov_20luglzvq8().b[4][2]++, fieldType) &&
    /* istanbul ignore next */
    (cov_20luglzvq8().b[4][3]++, fieldType.kind === graphql_1.Kind.ENUM_TYPE_DEFINITION)) {
      /* istanbul ignore next */
      cov_20luglzvq8().b[3][0]++;
      cov_20luglzvq8().s[31]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_20luglzvq8().b[3][1]++;
    }

    cov_20luglzvq8().s[32]++;
    return false;
  }).map(field => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[5]++;
    const type =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[33]++, nonModelTypes.find(e => {
      /* istanbul ignore next */
      cov_20luglzvq8().f[6]++;
      cov_20luglzvq8().s[34]++;
      return e.name.value === graphql_transformer_common_1.getBaseType(field.type);
    }) ?
    /* istanbul ignore next */
    (cov_20luglzvq8().b[5][0]++, graphql_transformer_common_1.withNamedNodeNamed(field.type, graphql_transformer_common_1.ModelResourceIDs.NonModelInputObjectName(graphql_transformer_common_1.getBaseType(field.type)))) :
    /* istanbul ignore next */
    (cov_20luglzvq8().b[5][1]++, field.type));

    /* istanbul ignore next */
    cov_20luglzvq8().s[35]++;
    return {
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: field.name,
      type,
      // TODO: Service does not support new style descriptions so wait.
      // description: field.description,
      directives: []
    };
  }));

  /* istanbul ignore next */
  cov_20luglzvq8().s[36]++;
  return {
    kind: 'InputObjectTypeDefinition',
    // TODO: Service does not support new style descriptions so wait.
    // description: {
    //     kind: 'StringValue',
    //     value: `Input type for ${obj.name.value} mutations`
    // },
    name: {
      kind: 'Name',
      value: name
    },
    fields,
    directives: []
  };
}

/* istanbul ignore next */
cov_20luglzvq8().s[37]++;
exports.makeNonModelInputObject = makeNonModelInputObject;

function makeCreateInputObject(obj, directive, nonModelTypes, ctx, isSync =
/* istanbul ignore next */
(cov_20luglzvq8().b[6][0]++, false)) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[7]++;
  const name =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[38]++, graphql_transformer_common_1.ModelResourceIDs.ModelCreateInputObjectName(obj.name.value));
  const createdAtField =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[39]++, ModelDirectiveArgs_1.getCreatedAtFieldName(directive));
  const updatedAtField =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[40]++, ModelDirectiveArgs_1.getUpdatedAtFieldName(directive)); // List of fields that can be assigend in resolver if they are not passed in input

  const autoGeneratableFieldsWithType =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[41]++, {
    id: ['ID'],
    [createdAtField]: ['AWSDateTime', 'String'],
    [updatedAtField]: ['AWSDateTime', 'String']
  });
  const fields =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[42]++, obj.fields.filter(field => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[8]++;
    const fieldType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[43]++, ctx.getType(graphql_transformer_common_1.getBaseType(field.type)));

    /* istanbul ignore next */
    cov_20luglzvq8().s[44]++;

    if (
    /* istanbul ignore next */
    (cov_20luglzvq8().b[8][0]++, graphql_transformer_common_1.isScalar(field.type)) ||
    /* istanbul ignore next */
    (cov_20luglzvq8().b[8][1]++, nonModelTypes.find(e => {
      /* istanbul ignore next */
      cov_20luglzvq8().f[9]++;
      cov_20luglzvq8().s[45]++;
      return e.name.value === graphql_transformer_common_1.getBaseType(field.type);
    })) ||
    /* istanbul ignore next */
    (cov_20luglzvq8().b[8][2]++, fieldType) &&
    /* istanbul ignore next */
    (cov_20luglzvq8().b[8][3]++, fieldType.kind === graphql_1.Kind.ENUM_TYPE_DEFINITION)) {
      /* istanbul ignore next */
      cov_20luglzvq8().b[7][0]++;
      cov_20luglzvq8().s[46]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_20luglzvq8().b[7][1]++;
    }

    cov_20luglzvq8().s[47]++;
    return false;
  }).map(field => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[10]++;
    let type;
    const fieldName =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[48]++, field.name.value);

    /* istanbul ignore next */
    cov_20luglzvq8().s[49]++;

    if (
    /* istanbul ignore next */
    (cov_20luglzvq8().b[10][0]++, Object.keys(autoGeneratableFieldsWithType).indexOf(fieldName) !== -1) &&
    /* istanbul ignore next */
    (cov_20luglzvq8().b[10][1]++, autoGeneratableFieldsWithType[fieldName].indexOf(graphql_transformer_common_1.unwrapNonNull(field.type).name.value) !== -1)) {
      /* istanbul ignore next */
      cov_20luglzvq8().b[9][0]++;
      cov_20luglzvq8().s[50]++;
      // ids are always optional. when provided the value is used.
      // when not provided the value is not used.
      type = graphql_transformer_common_1.unwrapNonNull(field.type);
    } else {
      /* istanbul ignore next */
      cov_20luglzvq8().b[9][1]++;
      cov_20luglzvq8().s[51]++;
      type = nonModelTypes.find(e => {
        /* istanbul ignore next */
        cov_20luglzvq8().f[11]++;
        cov_20luglzvq8().s[52]++;
        return e.name.value === graphql_transformer_common_1.getBaseType(field.type);
      }) ?
      /* istanbul ignore next */
      (cov_20luglzvq8().b[11][0]++, graphql_transformer_common_1.withNamedNodeNamed(field.type, graphql_transformer_common_1.ModelResourceIDs.NonModelInputObjectName(graphql_transformer_common_1.getBaseType(field.type)))) :
      /* istanbul ignore next */
      (cov_20luglzvq8().b[11][1]++, field.type);
    }

    /* istanbul ignore next */
    cov_20luglzvq8().s[53]++;
    return {
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: field.name,
      type,
      // TODO: Service does not support new style descriptions so wait.
      // description: field.description,
      directives: []
    };
  })); // add the version if this project is a sync project

  /* istanbul ignore next */
  cov_20luglzvq8().s[54]++;

  if (isSync) {
    /* istanbul ignore next */
    cov_20luglzvq8().b[12][0]++;
    cov_20luglzvq8().s[55]++;
    fields.push(graphql_transformer_common_1.makeInputValueDefinition('_version', graphql_transformer_common_1.makeNamedType('Int')));
  } else
  /* istanbul ignore next */
  {
    cov_20luglzvq8().b[12][1]++;
  }

  cov_20luglzvq8().s[56]++;
  return {
    kind: 'InputObjectTypeDefinition',
    // TODO: Service does not support new style descriptions so wait.
    // description: {
    //     kind: 'StringValue',
    //     value: `Input type for ${obj.name.value} mutations`
    // },
    name: {
      kind: 'Name',
      value: name
    },
    fields,
    directives: []
  };
}

/* istanbul ignore next */
cov_20luglzvq8().s[57]++;
exports.makeCreateInputObject = makeCreateInputObject;

function makeUpdateInputObject(obj, nonModelTypes, ctx, isSync =
/* istanbul ignore next */
(cov_20luglzvq8().b[13][0]++, false)) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[12]++;
  const name =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[58]++, graphql_transformer_common_1.ModelResourceIDs.ModelUpdateInputObjectName(obj.name.value));
  const fields =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[59]++, obj.fields.filter(f => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[13]++;
    const fieldType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[60]++, ctx.getType(graphql_transformer_common_1.getBaseType(f.type)));

    /* istanbul ignore next */
    cov_20luglzvq8().s[61]++;

    if (
    /* istanbul ignore next */
    (cov_20luglzvq8().b[15][0]++, graphql_transformer_common_1.isScalar(f.type)) ||
    /* istanbul ignore next */
    (cov_20luglzvq8().b[15][1]++, nonModelTypes.find(e => {
      /* istanbul ignore next */
      cov_20luglzvq8().f[14]++;
      cov_20luglzvq8().s[62]++;
      return e.name.value === graphql_transformer_common_1.getBaseType(f.type);
    })) ||
    /* istanbul ignore next */
    (cov_20luglzvq8().b[15][2]++, fieldType) &&
    /* istanbul ignore next */
    (cov_20luglzvq8().b[15][3]++, fieldType.kind === graphql_1.Kind.ENUM_TYPE_DEFINITION)) {
      /* istanbul ignore next */
      cov_20luglzvq8().b[14][0]++;
      cov_20luglzvq8().s[63]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_20luglzvq8().b[14][1]++;
    }

    cov_20luglzvq8().s[64]++;
    return false;
  }).map(field => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[15]++;
    let type;

    /* istanbul ignore next */
    cov_20luglzvq8().s[65]++;

    if (field.name.value === 'id') {
      /* istanbul ignore next */
      cov_20luglzvq8().b[16][0]++;
      cov_20luglzvq8().s[66]++;
      type = graphql_transformer_common_1.wrapNonNull(field.type);
    } else {
      /* istanbul ignore next */
      cov_20luglzvq8().b[16][1]++;
      cov_20luglzvq8().s[67]++;
      type = graphql_transformer_common_1.unwrapNonNull(field.type);
    }

    /* istanbul ignore next */
    cov_20luglzvq8().s[68]++;
    type = nonModelTypes.find(e => {
      /* istanbul ignore next */
      cov_20luglzvq8().f[16]++;
      cov_20luglzvq8().s[69]++;
      return e.name.value === graphql_transformer_common_1.getBaseType(field.type);
    }) ?
    /* istanbul ignore next */
    (cov_20luglzvq8().b[17][0]++, graphql_transformer_common_1.withNamedNodeNamed(type, graphql_transformer_common_1.ModelResourceIDs.NonModelInputObjectName(graphql_transformer_common_1.getBaseType(field.type)))) :
    /* istanbul ignore next */
    (cov_20luglzvq8().b[17][1]++, type);

    /* istanbul ignore next */
    cov_20luglzvq8().s[70]++;
    return {
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: field.name,
      type,
      // TODO: Service does not support new style descriptions so wait.
      // description: field.description,
      directives: []
    };
  }));

  /* istanbul ignore next */
  cov_20luglzvq8().s[71]++;

  if (isSync) {
    /* istanbul ignore next */
    cov_20luglzvq8().b[18][0]++;
    cov_20luglzvq8().s[72]++;
    fields.push(graphql_transformer_common_1.makeInputValueDefinition('_version', graphql_transformer_common_1.makeNamedType('Int')));
  } else
  /* istanbul ignore next */
  {
    cov_20luglzvq8().b[18][1]++;
  }

  cov_20luglzvq8().s[73]++;
  return {
    kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
    // TODO: Service does not support new style descriptions so wait.
    // description: {
    //     kind: 'StringValue',
    //     value: `Input type for ${obj.name.value} mutations`
    // },
    name: {
      kind: 'Name',
      value: name
    },
    fields,
    directives: []
  };
}

/* istanbul ignore next */
cov_20luglzvq8().s[74]++;
exports.makeUpdateInputObject = makeUpdateInputObject;

function makeDeleteInputObject(obj, isSync =
/* istanbul ignore next */
(cov_20luglzvq8().b[19][0]++, false)) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[17]++;
  const name =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[75]++, graphql_transformer_common_1.ModelResourceIDs.ModelDeleteInputObjectName(obj.name.value));
  const fields =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[76]++, [{
    kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
    name: {
      kind: 'Name',
      value: 'id'
    },
    type: graphql_transformer_common_1.makeNamedType('ID'),
    // TODO: Service does not support new style descriptions so wait.
    // description: {
    //     kind: 'StringValue',
    //     value: `The id of the ${obj.name.value} to delete.`
    // },
    directives: []
  }]);

  /* istanbul ignore next */
  cov_20luglzvq8().s[77]++;

  if (isSync) {
    /* istanbul ignore next */
    cov_20luglzvq8().b[20][0]++;
    cov_20luglzvq8().s[78]++;
    fields.push(graphql_transformer_common_1.makeInputValueDefinition('_version', graphql_transformer_common_1.makeNamedType('Int')));
  } else
  /* istanbul ignore next */
  {
    cov_20luglzvq8().b[20][1]++;
  }

  cov_20luglzvq8().s[79]++;
  return {
    kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
    // TODO: Service does not support new style descriptions so wait.
    // description: {
    //     kind: 'StringValue',
    //     value: `Input type for ${obj.name.value} delete mutations`
    // },
    name: {
      kind: 'Name',
      value: name
    },
    fields,
    directives: []
  };
}

/* istanbul ignore next */
cov_20luglzvq8().s[80]++;
exports.makeDeleteInputObject = makeDeleteInputObject;

function makeModelXFilterInputObject(obj, ctx, supportsConditions) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[18]++;
  const name =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[81]++, graphql_transformer_common_1.ModelResourceIDs.ModelFilterInputTypeName(obj.name.value));
  const fields =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[82]++, obj.fields.filter(field => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[19]++;
    const fieldType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[83]++, ctx.getType(graphql_transformer_common_1.getBaseType(field.type)));

    /* istanbul ignore next */
    cov_20luglzvq8().s[84]++;

    if (
    /* istanbul ignore next */
    (cov_20luglzvq8().b[22][0]++, graphql_transformer_common_1.isScalar(field.type)) ||
    /* istanbul ignore next */
    (cov_20luglzvq8().b[22][1]++, fieldType) &&
    /* istanbul ignore next */
    (cov_20luglzvq8().b[22][2]++, fieldType.kind === graphql_1.Kind.ENUM_TYPE_DEFINITION)) {
      /* istanbul ignore next */
      cov_20luglzvq8().b[21][0]++;
      cov_20luglzvq8().s[85]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_20luglzvq8().b[21][1]++;
    }
  }).map(field => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[20]++;
    const baseType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[86]++, graphql_transformer_common_1.getBaseType(field.type));
    const fieldType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[87]++, ctx.getType(baseType));
    const isList =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[88]++, graphql_transformer_common_1.isListType(field.type));
    const isEnumType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[89]++,
    /* istanbul ignore next */
    (cov_20luglzvq8().b[23][0]++, fieldType) &&
    /* istanbul ignore next */
    (cov_20luglzvq8().b[23][1]++, fieldType.kind === graphql_1.Kind.ENUM_TYPE_DEFINITION));
    const filterTypeName =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[90]++,
    /* istanbul ignore next */
    (cov_20luglzvq8().b[25][0]++, isEnumType) &&
    /* istanbul ignore next */
    (cov_20luglzvq8().b[25][1]++, isList) ?
    /* istanbul ignore next */
    (cov_20luglzvq8().b[24][0]++, graphql_transformer_common_1.ModelResourceIDs.ModelFilterListInputTypeName(baseType, !supportsConditions)) :
    /* istanbul ignore next */
    (cov_20luglzvq8().b[24][1]++, graphql_transformer_common_1.ModelResourceIDs.ModelScalarFilterInputTypeName(baseType, !supportsConditions)));

    /* istanbul ignore next */
    cov_20luglzvq8().s[91]++;
    return {
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: field.name,
      type: graphql_transformer_common_1.makeNamedType(filterTypeName),
      // TODO: Service does not support new style descriptions so wait.
      // description: field.description,
      directives: []
    };
  }));

  /* istanbul ignore next */
  cov_20luglzvq8().s[92]++;
  fields.push({
    kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
    name: {
      kind: 'Name',
      value: 'and'
    },
    type: graphql_transformer_common_1.makeListType(graphql_transformer_common_1.makeNamedType(name)),
    // TODO: Service does not support new style descriptions so wait.
    // description: field.description,
    directives: []
  }, {
    kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
    name: {
      kind: 'Name',
      value: 'or'
    },
    type: graphql_transformer_common_1.makeListType(graphql_transformer_common_1.makeNamedType(name)),
    // TODO: Service does not support new style descriptions so wait.
    // description: field.description,
    directives: []
  }, {
    kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
    name: {
      kind: 'Name',
      value: 'not'
    },
    type: graphql_transformer_common_1.makeNamedType(name),
    // TODO: Service does not support new style descriptions so wait.
    // description: field.description,
    directives: []
  });

  /* istanbul ignore next */
  cov_20luglzvq8().s[93]++;
  return {
    kind: 'InputObjectTypeDefinition',
    // TODO: Service does not support new style descriptions so wait.
    // description: {
    //     kind: 'StringValue',
    //     value: `Input type for ${obj.name.value} mutations`
    // },
    name: {
      kind: 'Name',
      value: name
    },
    fields,
    directives: []
  };
}

/* istanbul ignore next */
cov_20luglzvq8().s[94]++;
exports.makeModelXFilterInputObject = makeModelXFilterInputObject;

function makeModelXConditionInputObject(obj, ctx, supportsConditions) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[21]++;
  const name =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[95]++, graphql_transformer_common_1.ModelResourceIDs.ModelConditionInputTypeName(obj.name.value));
  const fields =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[96]++, obj.fields.filter(field => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[22]++;
    const fieldType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[97]++, ctx.getType(graphql_transformer_common_1.getBaseType(field.type)));

    /* istanbul ignore next */
    cov_20luglzvq8().s[98]++;

    if (
    /* istanbul ignore next */
    (cov_20luglzvq8().b[27][0]++, graphql_transformer_common_1.isScalar(field.type)) ||
    /* istanbul ignore next */
    (cov_20luglzvq8().b[27][1]++, fieldType) &&
    /* istanbul ignore next */
    (cov_20luglzvq8().b[27][2]++, fieldType.kind === graphql_1.Kind.ENUM_TYPE_DEFINITION)) {
      /* istanbul ignore next */
      cov_20luglzvq8().b[26][0]++;
      cov_20luglzvq8().s[99]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_20luglzvq8().b[26][1]++;
    }
  }).map(field => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[23]++;
    const baseType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[100]++, graphql_transformer_common_1.getBaseType(field.type));
    const fieldType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[101]++, ctx.getType(baseType));
    const isList =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[102]++, graphql_transformer_common_1.isListType(field.type));
    const isEnumType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[103]++,
    /* istanbul ignore next */
    (cov_20luglzvq8().b[28][0]++, fieldType) &&
    /* istanbul ignore next */
    (cov_20luglzvq8().b[28][1]++, fieldType.kind === graphql_1.Kind.ENUM_TYPE_DEFINITION));
    const conditionTypeName =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[104]++,
    /* istanbul ignore next */
    (cov_20luglzvq8().b[30][0]++, isEnumType) &&
    /* istanbul ignore next */
    (cov_20luglzvq8().b[30][1]++, isList) ?
    /* istanbul ignore next */
    (cov_20luglzvq8().b[29][0]++, graphql_transformer_common_1.ModelResourceIDs.ModelFilterListInputTypeName(baseType, !supportsConditions)) :
    /* istanbul ignore next */
    (cov_20luglzvq8().b[29][1]++, graphql_transformer_common_1.ModelResourceIDs.ModelScalarFilterInputTypeName(baseType, !supportsConditions)));

    /* istanbul ignore next */
    cov_20luglzvq8().s[105]++;
    return {
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: field.name,
      type: graphql_transformer_common_1.makeNamedType(conditionTypeName),
      // TODO: Service does not support new style descriptions so wait.
      // description: field.description,
      directives: []
    };
  }));

  /* istanbul ignore next */
  cov_20luglzvq8().s[106]++;
  fields.push({
    kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
    name: {
      kind: 'Name',
      value: 'and'
    },
    type: graphql_transformer_common_1.makeListType(graphql_transformer_common_1.makeNamedType(name)),
    // TODO: Service does not support new style descriptions so wait.
    // description: field.description,
    directives: []
  }, {
    kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
    name: {
      kind: 'Name',
      value: 'or'
    },
    type: graphql_transformer_common_1.makeListType(graphql_transformer_common_1.makeNamedType(name)),
    // TODO: Service does not support new style descriptions so wait.
    // description: field.description,
    directives: []
  }, {
    kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
    name: {
      kind: 'Name',
      value: 'not'
    },
    type: graphql_transformer_common_1.makeNamedType(name),
    // TODO: Service does not support new style descriptions so wait.
    // description: field.description,
    directives: []
  });

  /* istanbul ignore next */
  cov_20luglzvq8().s[107]++;
  return {
    kind: 'InputObjectTypeDefinition',
    // TODO: Service does not support new style descriptions so wait.
    // description: {
    //     kind: 'StringValue',
    //     value: `Input type for ${obj.name.value} mutations`
    // },
    name: {
      kind: 'Name',
      value: name
    },
    fields,
    directives: []
  };
}

/* istanbul ignore next */
cov_20luglzvq8().s[108]++;
exports.makeModelXConditionInputObject = makeModelXConditionInputObject;

function makeEnumFilterInputObjects(obj, ctx, supportsConditions) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[24]++;
  cov_20luglzvq8().s[109]++;
  return obj.fields.filter(field => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[25]++;
    const fieldType =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[110]++, ctx.getType(graphql_transformer_common_1.getBaseType(field.type)));

    /* istanbul ignore next */
    cov_20luglzvq8().s[111]++;
    return (
      /* istanbul ignore next */
      (cov_20luglzvq8().b[31][0]++, fieldType) &&
      /* istanbul ignore next */
      (cov_20luglzvq8().b[31][1]++, fieldType.kind === graphql_1.Kind.ENUM_TYPE_DEFINITION)
    );
  }).map(enumField => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[26]++;
    const typeName =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[112]++, graphql_transformer_common_1.getBaseType(enumField.type));
    const isList =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[113]++, graphql_transformer_common_1.isListType(enumField.type));
    const name =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[114]++, isList ?
    /* istanbul ignore next */
    (cov_20luglzvq8().b[32][0]++, graphql_transformer_common_1.ModelResourceIDs.ModelFilterListInputTypeName(typeName, !supportsConditions)) :
    /* istanbul ignore next */
    (cov_20luglzvq8().b[32][1]++, graphql_transformer_common_1.ModelResourceIDs.ModelScalarFilterInputTypeName(typeName, !supportsConditions)));
    const fields =
    /* istanbul ignore next */
    (cov_20luglzvq8().s[115]++, []);

    /* istanbul ignore next */
    cov_20luglzvq8().s[116]++;
    fields.push({
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: {
        kind: 'Name',
        value: 'eq'
      },
      type: isList ?
      /* istanbul ignore next */
      (cov_20luglzvq8().b[33][0]++, graphql_transformer_common_1.makeListType(graphql_transformer_common_1.makeNamedType(typeName))) :
      /* istanbul ignore next */
      (cov_20luglzvq8().b[33][1]++, graphql_transformer_common_1.makeNamedType(typeName)),
      directives: []
    });

    /* istanbul ignore next */
    cov_20luglzvq8().s[117]++;
    fields.push({
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: {
        kind: 'Name',
        value: 'ne'
      },
      type: isList ?
      /* istanbul ignore next */
      (cov_20luglzvq8().b[34][0]++, graphql_transformer_common_1.makeListType(graphql_transformer_common_1.makeNamedType(typeName))) :
      /* istanbul ignore next */
      (cov_20luglzvq8().b[34][1]++, graphql_transformer_common_1.makeNamedType(typeName)),
      directives: []
    });

    /* istanbul ignore next */
    cov_20luglzvq8().s[118]++;

    if (isList) {
      /* istanbul ignore next */
      cov_20luglzvq8().b[35][0]++;
      cov_20luglzvq8().s[119]++;
      fields.push({
        kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
        name: {
          kind: 'Name',
          value: 'contains'
        },
        type: graphql_transformer_common_1.makeNamedType(typeName),
        directives: []
      });

      /* istanbul ignore next */
      cov_20luglzvq8().s[120]++;
      fields.push({
        kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
        name: {
          kind: 'Name',
          value: 'notContains'
        },
        type: graphql_transformer_common_1.makeNamedType(typeName),
        directives: []
      });
    } else
    /* istanbul ignore next */
    {
      cov_20luglzvq8().b[35][1]++;
    }

    cov_20luglzvq8().s[121]++;
    return {
      kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
      name: {
        kind: 'Name',
        value: name
      },
      fields,
      directives: []
    };
  });
}

/* istanbul ignore next */
cov_20luglzvq8().s[122]++;
exports.makeEnumFilterInputObjects = makeEnumFilterInputObjects;

function makeModelSortDirectionEnumObject() {
  /* istanbul ignore next */
  cov_20luglzvq8().f[27]++;
  const name =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[123]++, graphql_transformer_common_1.graphqlName('ModelSortDirection'));

  /* istanbul ignore next */
  cov_20luglzvq8().s[124]++;
  return {
    kind: graphql_1.Kind.ENUM_TYPE_DEFINITION,
    name: {
      kind: 'Name',
      value: name
    },
    values: [{
      kind: graphql_1.Kind.ENUM_VALUE_DEFINITION,
      name: {
        kind: 'Name',
        value: 'ASC'
      },
      directives: []
    }, {
      kind: graphql_1.Kind.ENUM_VALUE_DEFINITION,
      name: {
        kind: 'Name',
        value: 'DESC'
      },
      directives: []
    }],
    directives: []
  };
}

/* istanbul ignore next */
cov_20luglzvq8().s[125]++;
exports.makeModelSortDirectionEnumObject = makeModelSortDirectionEnumObject;

function makeModelScalarFilterInputObject(type, supportsConditions) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[28]++;
  const name =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[126]++, graphql_transformer_common_1.ModelResourceIDs.ModelFilterScalarInputTypeName(type, !supportsConditions));
  const conditions =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[127]++, getScalarConditions(type));
  const fields =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[128]++, conditions.map(condition => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[29]++;
    cov_20luglzvq8().s[129]++;
    return {
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: {
        kind: 'Name',
        value: condition
      },
      type: getScalarFilterInputType(condition, type, name),
      // TODO: Service does not support new style descriptions so wait.
      // description: field.description,
      directives: []
    };
  }));
  let functionInputFields =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[130]++, []);

  /* istanbul ignore next */
  cov_20luglzvq8().s[131]++;

  if (supportsConditions) {
    /* istanbul ignore next */
    cov_20luglzvq8().b[36][0]++;
    cov_20luglzvq8().s[132]++;
    functionInputFields = makeFunctionInputFields(type);
  } else
  /* istanbul ignore next */
  {
    cov_20luglzvq8().b[36][1]++;
  }

  cov_20luglzvq8().s[133]++;
  return {
    kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
    // TODO: Service does not support new style descriptions so wait.
    // description: {
    //     kind: 'StringValue',
    //     value: `Input type for ${obj.name.value} mutations`
    // },
    name: {
      kind: 'Name',
      value: name
    },
    fields: [...fields, ...functionInputFields],
    directives: []
  };
}

/* istanbul ignore next */
cov_20luglzvq8().s[134]++;
exports.makeModelScalarFilterInputObject = makeModelScalarFilterInputObject;

function getScalarFilterInputType(condition, type, filterInputName) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[30]++;
  cov_20luglzvq8().s[135]++;

  switch (condition) {
    case 'between':
      /* istanbul ignore next */
      cov_20luglzvq8().b[37][0]++;
      cov_20luglzvq8().s[136]++;
      return graphql_transformer_common_1.makeListType(graphql_transformer_common_1.makeNamedType(type));

    case 'and':
      /* istanbul ignore next */
      cov_20luglzvq8().b[37][1]++;

    case 'or':
      /* istanbul ignore next */
      cov_20luglzvq8().b[37][2]++;
      cov_20luglzvq8().s[137]++;
      return graphql_transformer_common_1.makeNamedType(filterInputName);

    default:
      /* istanbul ignore next */
      cov_20luglzvq8().b[37][3]++;
      cov_20luglzvq8().s[138]++;
      return graphql_transformer_common_1.makeNamedType(type);
  }
}

function getScalarConditions(type) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[31]++;
  cov_20luglzvq8().s[139]++;

  switch (type) {
    case 'String':
      /* istanbul ignore next */
      cov_20luglzvq8().b[38][0]++;
      cov_20luglzvq8().s[140]++;
      return STRING_CONDITIONS;

    case 'ID':
      /* istanbul ignore next */
      cov_20luglzvq8().b[38][1]++;
      cov_20luglzvq8().s[141]++;
      return ID_CONDITIONS;

    case 'Int':
      /* istanbul ignore next */
      cov_20luglzvq8().b[38][2]++;
      cov_20luglzvq8().s[142]++;
      return INT_CONDITIONS;

    case 'Float':
      /* istanbul ignore next */
      cov_20luglzvq8().b[38][3]++;
      cov_20luglzvq8().s[143]++;
      return FLOAT_CONDITIONS;

    case 'Boolean':
      /* istanbul ignore next */
      cov_20luglzvq8().b[38][4]++;
      cov_20luglzvq8().s[144]++;
      return BOOLEAN_CONDITIONS;

    default:
      /* istanbul ignore next */
      cov_20luglzvq8().b[38][5]++;
      cov_20luglzvq8().s[145]++;
      throw new Error('Valid types are String, ID, Int, Float, Boolean');
  }
}

function makeSizeInputType() {
  /* istanbul ignore next */
  cov_20luglzvq8().f[32]++;
  const name =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[146]++, graphql_transformer_common_1.ModelResourceIDs.ModelSizeInputTypeName());
  const fields =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[147]++, SIZE_CONDITIONS.map(condition => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[33]++;
    cov_20luglzvq8().s[148]++;
    return {
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: {
        kind: 'Name',
        value: condition
      },
      type: getScalarFilterInputType(condition, 'Int', ''
      /* unused */
      ),
      // TODO: Service does not support new style descriptions so wait.
      // description: field.description,
      directives: []
    };
  }));

  /* istanbul ignore next */
  cov_20luglzvq8().s[149]++;
  return {
    kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
    // TODO: Service does not support new style descriptions so wait.
    // description: {
    //     kind: 'StringValue',
    //     value: `Input type for ${obj.name.value} mutations`
    // },
    name: {
      kind: 'Name',
      value: name
    },
    fields,
    directives: []
  };
}

function getFunctionListForType(typeName) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[34]++;
  cov_20luglzvq8().s[150]++;

  switch (typeName) {
    case 'String':
      /* istanbul ignore next */
      cov_20luglzvq8().b[39][0]++;
      cov_20luglzvq8().s[151]++;
      return STRING_FUNCTIONS;

    case 'ID':
      /* istanbul ignore next */
      cov_20luglzvq8().b[39][1]++;
      cov_20luglzvq8().s[152]++;
      return ID_FUNCTIONS;

    case 'Int':
      /* istanbul ignore next */
      cov_20luglzvq8().b[39][2]++;
      cov_20luglzvq8().s[153]++;
      return INT_FUNCTIONS;

    case 'Float':
      /* istanbul ignore next */
      cov_20luglzvq8().b[39][3]++;
      cov_20luglzvq8().s[154]++;
      return FLOAT_FUNCTIONS;

    case 'Boolean':
      /* istanbul ignore next */
      cov_20luglzvq8().b[39][4]++;
      cov_20luglzvq8().s[155]++;
      return BOOLEAN_FUNCTIONS;

    default:
      /* istanbul ignore next */
      cov_20luglzvq8().b[39][5]++;
      cov_20luglzvq8().s[156]++;
      throw new Error('Valid types are String, ID, Int, Float, Boolean');
  }
}

function makeFunctionInputFields(typeName) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[35]++;
  const functions =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[157]++, getFunctionListForType(typeName));
  const fields =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[158]++, new Array());

  /* istanbul ignore next */
  cov_20luglzvq8().s[159]++;

  if (functions.has('attributeExists')) {
    /* istanbul ignore next */
    cov_20luglzvq8().b[40][0]++;
    cov_20luglzvq8().s[160]++;
    fields.push({
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: {
        kind: 'Name',
        value: 'attributeExists'
      },
      type: graphql_transformer_common_1.makeNamedType('Boolean'),
      // TODO: Service does not support new style descriptions so wait.
      // description: field.description,
      directives: []
    });
  } else
  /* istanbul ignore next */
  {
    cov_20luglzvq8().b[40][1]++;
  }

  cov_20luglzvq8().s[161]++;

  if (functions.has('attributeType')) {
    /* istanbul ignore next */
    cov_20luglzvq8().b[41][0]++;
    cov_20luglzvq8().s[162]++;
    fields.push({
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: {
        kind: 'Name',
        value: 'attributeType'
      },
      type: graphql_transformer_common_1.makeNamedType(graphql_transformer_common_1.ModelResourceIDs.ModelAttributeTypesName()),
      // TODO: Service does not support new style descriptions so wait.
      // description: field.description,
      directives: []
    });
  } else
  /* istanbul ignore next */
  {
    cov_20luglzvq8().b[41][1]++;
  }

  cov_20luglzvq8().s[163]++;

  if (functions.has('size')) {
    /* istanbul ignore next */
    cov_20luglzvq8().b[42][0]++;
    cov_20luglzvq8().s[164]++;
    fields.push({
      kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
      name: {
        kind: 'Name',
        value: 'size'
      },
      type: graphql_transformer_common_1.makeNamedType(graphql_transformer_common_1.ModelResourceIDs.ModelSizeInputTypeName()),
      // TODO: Service does not support new style descriptions so wait.
      // description: field.description,
      directives: []
    });
  } else
  /* istanbul ignore next */
  {
    cov_20luglzvq8().b[42][1]++;
  }

  cov_20luglzvq8().s[165]++;
  return fields;
}

function makeAttributeTypeEnum() {
  /* istanbul ignore next */
  cov_20luglzvq8().f[36]++;
  cov_20luglzvq8().s[166]++;

  const makeEnumValue = enumValue => {
    /* istanbul ignore next */
    cov_20luglzvq8().f[37]++;
    cov_20luglzvq8().s[167]++;
    return {
      kind: graphql_1.Kind.ENUM_VALUE_DEFINITION,
      name: {
        kind: 'Name',
        value: enumValue
      },
      directives: []
    };
  };

  /* istanbul ignore next */
  cov_20luglzvq8().s[168]++;
  return {
    kind: graphql_1.Kind.ENUM_TYPE_DEFINITION,
    name: {
      kind: 'Name',
      value: graphql_transformer_common_1.ModelResourceIDs.ModelAttributeTypesName()
    },
    values: ATTRIBUTE_TYPES.map(t => {
      /* istanbul ignore next */
      cov_20luglzvq8().f[38]++;
      cov_20luglzvq8().s[169]++;
      return makeEnumValue(t);
    }),
    directives: []
  };
}

/* istanbul ignore next */
cov_20luglzvq8().s[170]++;
exports.makeAttributeTypeEnum = makeAttributeTypeEnum;

function makeModelConnectionType(typeName, isSync =
/* istanbul ignore next */
(cov_20luglzvq8().b[43][0]++, false)) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[39]++;
  const connectionName =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[171]++, graphql_transformer_common_1.ModelResourceIDs.ModelConnectionTypeName(typeName));
  let connectionTypeExtension =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[172]++, graphql_transformer_common_1.blankObjectExtension(connectionName));

  /* istanbul ignore next */
  cov_20luglzvq8().s[173]++;
  connectionTypeExtension = graphql_transformer_common_1.extensionWithFields(connectionTypeExtension, [graphql_transformer_common_1.makeField('items', [], graphql_transformer_common_1.makeListType(graphql_transformer_common_1.makeNamedType(typeName)))]);

  /* istanbul ignore next */
  cov_20luglzvq8().s[174]++;
  connectionTypeExtension = graphql_transformer_common_1.extensionWithFields(connectionTypeExtension, [graphql_transformer_common_1.makeField('nextToken', [], graphql_transformer_common_1.makeNamedType('String'))]);

  /* istanbul ignore next */
  cov_20luglzvq8().s[175]++;

  if (isSync) {
    /* istanbul ignore next */
    cov_20luglzvq8().b[44][0]++;
    cov_20luglzvq8().s[176]++;
    connectionTypeExtension = graphql_transformer_common_1.extensionWithFields(connectionTypeExtension, [graphql_transformer_common_1.makeField('startedAt', [], graphql_transformer_common_1.makeNamedType('AWSTimestamp'))]);
  } else
  /* istanbul ignore next */
  {
    cov_20luglzvq8().b[44][1]++;
  }

  cov_20luglzvq8().s[177]++;
  return connectionTypeExtension;
}

/* istanbul ignore next */
cov_20luglzvq8().s[178]++;
exports.makeModelConnectionType = makeModelConnectionType;

function makeSubscriptionField(fieldName, returnTypeName, mutations) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[40]++;
  cov_20luglzvq8().s[179]++;
  return graphql_transformer_common_1.makeField(fieldName, [], graphql_transformer_common_1.makeNamedType(returnTypeName), [graphql_transformer_common_1.makeDirective('aws_subscribe', [graphql_transformer_common_1.makeArgument('mutations', graphql_transformer_common_1.makeValueNode(mutations))])]);
}

/* istanbul ignore next */
cov_20luglzvq8().s[180]++;
exports.makeSubscriptionField = makeSubscriptionField;

function makeModelConnectionField(fieldName, returnTypeName, sortKeyInfo, directives) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[41]++;
  const args =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[181]++, [graphql_transformer_common_1.makeInputValueDefinition('filter', graphql_transformer_common_1.makeNamedType(graphql_transformer_common_1.ModelResourceIDs.ModelFilterInputTypeName(returnTypeName))), graphql_transformer_common_1.makeInputValueDefinition('sortDirection', graphql_transformer_common_1.makeNamedType('ModelSortDirection')), graphql_transformer_common_1.makeInputValueDefinition('limit', graphql_transformer_common_1.makeNamedType('Int')), graphql_transformer_common_1.makeInputValueDefinition('nextToken', graphql_transformer_common_1.makeNamedType('String'))]);

  /* istanbul ignore next */
  cov_20luglzvq8().s[182]++;

  if (sortKeyInfo) {
    /* istanbul ignore next */
    cov_20luglzvq8().b[45][0]++;
    let namedType;

    /* istanbul ignore next */
    cov_20luglzvq8().s[183]++;

    if (sortKeyInfo.typeName === 'Composite') {
      /* istanbul ignore next */
      cov_20luglzvq8().b[46][0]++;
      cov_20luglzvq8().s[184]++;
      namedType = graphql_transformer_common_1.makeNamedType(graphql_transformer_common_1.ModelResourceIDs.ModelCompositeKeyConditionInputTypeName(sortKeyInfo.model, graphql_transformer_common_1.toUpper(sortKeyInfo.keyName)));
    } else {
      /* istanbul ignore next */
      cov_20luglzvq8().b[46][1]++;
      cov_20luglzvq8().s[185]++;
      namedType = graphql_transformer_common_1.makeNamedType(graphql_transformer_common_1.ModelResourceIDs.ModelKeyConditionInputTypeName(sortKeyInfo.typeName));
    }

    /* istanbul ignore next */
    cov_20luglzvq8().s[186]++;
    args.unshift(graphql_transformer_common_1.makeInputValueDefinition(sortKeyInfo.fieldName, namedType));
  } else
  /* istanbul ignore next */
  {
    cov_20luglzvq8().b[45][1]++;
  }

  cov_20luglzvq8().s[187]++;
  return graphql_transformer_common_1.makeField(fieldName, args, graphql_transformer_common_1.makeNamedType(graphql_transformer_common_1.ModelResourceIDs.ModelConnectionTypeName(returnTypeName)), directives);
}

/* istanbul ignore next */
cov_20luglzvq8().s[188]++;
exports.makeModelConnectionField = makeModelConnectionField;

function makeScalarFilterInputs(supportsConditions) {
  /* istanbul ignore next */
  cov_20luglzvq8().f[42]++;
  const inputs =
  /* istanbul ignore next */
  (cov_20luglzvq8().s[189]++, [makeModelScalarFilterInputObject('String', supportsConditions), makeModelScalarFilterInputObject('ID', supportsConditions), makeModelScalarFilterInputObject('Int', supportsConditions), makeModelScalarFilterInputObject('Float', supportsConditions), makeModelScalarFilterInputObject('Boolean', supportsConditions)]);

  /* istanbul ignore next */
  cov_20luglzvq8().s[190]++;

  if (supportsConditions) {
    /* istanbul ignore next */
    cov_20luglzvq8().b[47][0]++;
    cov_20luglzvq8().s[191]++;
    inputs.push(makeSizeInputType());
  } else
  /* istanbul ignore next */
  {
    cov_20luglzvq8().b[47][1]++;
  }

  cov_20luglzvq8().s[192]++;
  return inputs;
}

/* istanbul ignore next */
cov_20luglzvq8().s[193]++;
exports.makeScalarFilterInputs = makeScalarFilterInputs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,