{"version":3,"sources":["/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/definitions.ts"],"names":[],"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","sourcesContent":["import {\n  ObjectTypeDefinitionNode,\n  InputObjectTypeDefinitionNode,\n  InputValueDefinitionNode,\n  FieldDefinitionNode,\n  Kind,\n  TypeNode,\n  EnumTypeDefinitionNode,\n  ObjectTypeExtensionNode,\n  NamedTypeNode,\n  DirectiveNode,\n  InterfaceTypeDefinitionNode,\n  EnumValueDefinitionNode,\n} from 'graphql';\nimport {\n  wrapNonNull,\n  unwrapNonNull,\n  makeNamedType,\n  toUpper,\n  graphqlName,\n  makeListType,\n  isScalar,\n  getBaseType,\n  blankObjectExtension,\n  extensionWithFields,\n  makeField,\n  makeInputValueDefinition,\n  ModelResourceIDs,\n  makeDirective,\n  makeArgument,\n  makeValueNode,\n  withNamedNodeNamed,\n  isListType,\n} from 'graphql-transformer-common';\nimport { TransformerContext } from 'graphql-transformer-core';\nimport { getCreatedAtFieldName, getUpdatedAtFieldName } from './ModelDirectiveArgs';\n\nconst STRING_CONDITIONS = ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'contains', 'notContains', 'between', 'beginsWith'];\nconst ID_CONDITIONS = ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'contains', 'notContains', 'between', 'beginsWith'];\nconst INT_CONDITIONS = ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'between'];\nconst FLOAT_CONDITIONS = ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'between'];\nconst BOOLEAN_CONDITIONS = ['ne', 'eq'];\nconst SIZE_CONDITIONS = ['ne', 'eq', 'le', 'lt', 'ge', 'gt', 'between'];\n\nconst STRING_FUNCTIONS = new Set<string>(['attributeExists', 'attributeType', 'size']);\nconst ID_FUNCTIONS = new Set<string>(['attributeExists', 'attributeType', 'size']);\nconst INT_FUNCTIONS = new Set<string>(['attributeExists', 'attributeType']);\nconst FLOAT_FUNCTIONS = new Set<string>(['attributeExists', 'attributeType']);\nconst BOOLEAN_FUNCTIONS = new Set<string>(['attributeExists', 'attributeType']);\n\nconst ATTRIBUTE_TYPES = ['binary', 'binarySet', 'bool', 'list', 'map', 'number', 'numberSet', 'string', 'stringSet', '_null'];\n\nexport function getNonModelObjectArray(\n  obj: ObjectTypeDefinitionNode,\n  ctx: TransformerContext,\n  pMap: Map<string, ObjectTypeDefinitionNode>,\n): ObjectTypeDefinitionNode[] {\n  // loop over all fields in the object, picking out all nonscalars that are not @model types\n  for (const field of obj.fields) {\n    if (!isScalar(field.type)) {\n      const def = ctx.getType(getBaseType(field.type));\n\n      if (\n        def &&\n        def.kind === Kind.OBJECT_TYPE_DEFINITION &&\n        !def.directives.find(e => e.name.value === 'model') &&\n        pMap.get(def.name.value) === undefined\n      ) {\n        // recursively find any non @model types referenced by the current\n        // non @model type\n        pMap.set(def.name.value, def);\n        getNonModelObjectArray(def, ctx, pMap);\n      }\n    }\n  }\n\n  return Array.from(pMap.values());\n}\n\nexport function makeNonModelInputObject(\n  obj: ObjectTypeDefinitionNode,\n  nonModelTypes: ObjectTypeDefinitionNode[],\n  ctx: TransformerContext,\n): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.NonModelInputObjectName(obj.name.value);\n  const fields: InputValueDefinitionNode[] = obj.fields\n    .filter((field: FieldDefinitionNode) => {\n      const fieldType = ctx.getType(getBaseType(field.type));\n      if (\n        isScalar(field.type) ||\n        nonModelTypes.find(e => e.name.value === getBaseType(field.type)) ||\n        (fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION)\n      ) {\n        return true;\n      }\n      return false;\n    })\n    .map((field: FieldDefinitionNode) => {\n      const type = nonModelTypes.find(e => e.name.value === getBaseType(field.type))\n        ? withNamedNodeNamed(field.type, ModelResourceIDs.NonModelInputObjectName(getBaseType(field.type)))\n        : field.type;\n      return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: field.name,\n        type,\n        // TODO: Service does not support new style descriptions so wait.\n        // description: field.description,\n        directives: [],\n      };\n    });\n  return {\n    kind: 'InputObjectTypeDefinition',\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeCreateInputObject(\n  obj: ObjectTypeDefinitionNode,\n  directive: DirectiveNode,\n  nonModelTypes: ObjectTypeDefinitionNode[],\n  ctx: TransformerContext,\n  isSync: boolean = false,\n): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelCreateInputObjectName(obj.name.value);\n  const createdAtField = getCreatedAtFieldName(directive);\n  const updatedAtField = getUpdatedAtFieldName(directive);\n\n  // List of fields that can be assigend in resolver if they are not passed in input\n  const autoGeneratableFieldsWithType: Record<string, string[]> = {\n    id: ['ID'],\n    [createdAtField]: ['AWSDateTime', 'String'],\n    [updatedAtField]: ['AWSDateTime', 'String'],\n  };\n\n  const fields: InputValueDefinitionNode[] = obj.fields\n    .filter((field: FieldDefinitionNode) => {\n      const fieldType = ctx.getType(getBaseType(field.type));\n      if (\n        isScalar(field.type) ||\n        nonModelTypes.find(e => e.name.value === getBaseType(field.type)) ||\n        (fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION)\n      ) {\n        return true;\n      }\n      return false;\n    })\n    .map((field: FieldDefinitionNode) => {\n      let type: TypeNode;\n      const fieldName = field.name.value;\n      if (\n        Object.keys(autoGeneratableFieldsWithType).indexOf(fieldName) !== -1 &&\n        autoGeneratableFieldsWithType[fieldName].indexOf(unwrapNonNull(field.type).name.value) !== -1\n      ) {\n        // ids are always optional. when provided the value is used.\n        // when not provided the value is not used.\n        type = unwrapNonNull(field.type);\n      } else {\n        type = nonModelTypes.find(e => e.name.value === getBaseType(field.type))\n          ? withNamedNodeNamed(field.type, ModelResourceIDs.NonModelInputObjectName(getBaseType(field.type)))\n          : field.type;\n      }\n      return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: field.name,\n        type,\n        // TODO: Service does not support new style descriptions so wait.\n        // description: field.description,\n        directives: [],\n      };\n    });\n  // add the version if this project is a sync project\n  if (isSync) {\n    fields.push(makeInputValueDefinition('_version', makeNamedType('Int')));\n  }\n  return {\n    kind: 'InputObjectTypeDefinition',\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeUpdateInputObject(\n  obj: ObjectTypeDefinitionNode,\n  nonModelTypes: ObjectTypeDefinitionNode[],\n  ctx: TransformerContext,\n  isSync: boolean = false,\n): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelUpdateInputObjectName(obj.name.value);\n  const fields: InputValueDefinitionNode[] = obj.fields\n    .filter(f => {\n      const fieldType = ctx.getType(getBaseType(f.type));\n      if (\n        isScalar(f.type) ||\n        nonModelTypes.find(e => e.name.value === getBaseType(f.type)) ||\n        (fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION)\n      ) {\n        return true;\n      }\n      return false;\n    })\n    .map((field: FieldDefinitionNode) => {\n      let type;\n      if (field.name.value === 'id') {\n        type = wrapNonNull(field.type);\n      } else {\n        type = unwrapNonNull(field.type);\n      }\n      type = nonModelTypes.find(e => e.name.value === getBaseType(field.type))\n        ? withNamedNodeNamed(type, ModelResourceIDs.NonModelInputObjectName(getBaseType(field.type)))\n        : type;\n      return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: field.name,\n        type,\n        // TODO: Service does not support new style descriptions so wait.\n        // description: field.description,\n        directives: [],\n      };\n    });\n  if (isSync) {\n    fields.push(makeInputValueDefinition('_version', makeNamedType('Int')));\n  }\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeDeleteInputObject(obj: ObjectTypeDefinitionNode, isSync: boolean = false): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelDeleteInputObjectName(obj.name.value);\n  const fields: InputValueDefinitionNode[] = [\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: { kind: 'Name', value: 'id' },\n      type: makeNamedType('ID'),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: {\n      //     kind: 'StringValue',\n      //     value: `The id of the ${obj.name.value} to delete.`\n      // },\n      directives: [],\n    },\n  ];\n  if (isSync) {\n    fields.push(makeInputValueDefinition('_version', makeNamedType('Int')));\n  }\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} delete mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeModelXFilterInputObject(\n  obj: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode,\n  ctx: TransformerContext,\n  supportsConditions: Boolean,\n): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelFilterInputTypeName(obj.name.value);\n  const fields: InputValueDefinitionNode[] = obj.fields\n    .filter((field: FieldDefinitionNode) => {\n      const fieldType = ctx.getType(getBaseType(field.type));\n      if (isScalar(field.type) || (fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION)) {\n        return true;\n      }\n    })\n    .map((field: FieldDefinitionNode) => {\n      const baseType = getBaseType(field.type);\n      const fieldType = ctx.getType(baseType);\n      const isList = isListType(field.type);\n      const isEnumType = fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION;\n      const filterTypeName =\n        isEnumType && isList\n          ? ModelResourceIDs.ModelFilterListInputTypeName(baseType, !supportsConditions)\n          : ModelResourceIDs.ModelScalarFilterInputTypeName(baseType, !supportsConditions);\n\n      return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: field.name,\n        type: makeNamedType(filterTypeName),\n        // TODO: Service does not support new style descriptions so wait.\n        // description: field.description,\n        directives: [],\n      };\n    });\n\n  fields.push(\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'and',\n      },\n      type: makeListType(makeNamedType(name)),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'or',\n      },\n      type: makeListType(makeNamedType(name)),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'not',\n      },\n      type: makeNamedType(name),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n  );\n\n  return {\n    kind: 'InputObjectTypeDefinition',\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeModelXConditionInputObject(\n  obj: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode,\n  ctx: TransformerContext,\n  supportsConditions: Boolean,\n): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelConditionInputTypeName(obj.name.value);\n  const fields: InputValueDefinitionNode[] = obj.fields\n    .filter((field: FieldDefinitionNode) => {\n      const fieldType = ctx.getType(getBaseType(field.type));\n      if (isScalar(field.type) || (fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION)) {\n        return true;\n      }\n    })\n    .map((field: FieldDefinitionNode) => {\n      const baseType = getBaseType(field.type);\n      const fieldType = ctx.getType(baseType);\n      const isList = isListType(field.type);\n      const isEnumType = fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION;\n      const conditionTypeName =\n        isEnumType && isList\n          ? ModelResourceIDs.ModelFilterListInputTypeName(baseType, !supportsConditions)\n          : ModelResourceIDs.ModelScalarFilterInputTypeName(baseType, !supportsConditions);\n\n      return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: field.name,\n        type: makeNamedType(conditionTypeName),\n        // TODO: Service does not support new style descriptions so wait.\n        // description: field.description,\n        directives: [],\n      };\n    });\n\n  fields.push(\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'and',\n      },\n      type: makeListType(makeNamedType(name)),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'or',\n      },\n      type: makeListType(makeNamedType(name)),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n    {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: {\n        kind: 'Name',\n        value: 'not',\n      },\n      type: makeNamedType(name),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    },\n  );\n\n  return {\n    kind: 'InputObjectTypeDefinition',\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nexport function makeEnumFilterInputObjects(\n  obj: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode,\n  ctx: TransformerContext,\n  supportsConditions: Boolean,\n): InputObjectTypeDefinitionNode[] {\n  return obj.fields\n    .filter((field: FieldDefinitionNode) => {\n      const fieldType = ctx.getType(getBaseType(field.type));\n      return fieldType && fieldType.kind === Kind.ENUM_TYPE_DEFINITION;\n    })\n    .map((enumField: FieldDefinitionNode) => {\n      const typeName = getBaseType(enumField.type);\n      const isList = isListType(enumField.type);\n      const name = isList\n        ? ModelResourceIDs.ModelFilterListInputTypeName(typeName, !supportsConditions)\n        : ModelResourceIDs.ModelScalarFilterInputTypeName(typeName, !supportsConditions);\n      const fields = [];\n\n      fields.push({\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: {\n          kind: 'Name',\n          value: 'eq',\n        },\n        type: isList ? makeListType(makeNamedType(typeName)) : makeNamedType(typeName),\n        directives: [],\n      });\n\n      fields.push({\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        name: {\n          kind: 'Name',\n          value: 'ne',\n        },\n        type: isList ? makeListType(makeNamedType(typeName)) : makeNamedType(typeName),\n        directives: [],\n      });\n\n      if (isList) {\n        fields.push({\n          kind: Kind.INPUT_VALUE_DEFINITION,\n          name: {\n            kind: 'Name',\n            value: 'contains',\n          },\n          type: makeNamedType(typeName),\n          directives: [],\n        });\n\n        fields.push({\n          kind: Kind.INPUT_VALUE_DEFINITION,\n          name: {\n            kind: 'Name',\n            value: 'notContains',\n          },\n          type: makeNamedType(typeName),\n          directives: [],\n        });\n      }\n\n      return {\n        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        name: {\n          kind: 'Name',\n          value: name,\n        },\n        fields,\n        directives: [],\n      } as InputObjectTypeDefinitionNode;\n    });\n}\n\nexport function makeModelSortDirectionEnumObject(): EnumTypeDefinitionNode {\n  const name = graphqlName('ModelSortDirection');\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    values: [\n      {\n        kind: Kind.ENUM_VALUE_DEFINITION,\n        name: { kind: 'Name', value: 'ASC' },\n        directives: [],\n      },\n      {\n        kind: Kind.ENUM_VALUE_DEFINITION,\n        name: { kind: 'Name', value: 'DESC' },\n        directives: [],\n      },\n    ],\n    directives: [],\n  };\n}\n\nexport function makeModelScalarFilterInputObject(type: string, supportsConditions: Boolean): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelFilterScalarInputTypeName(type, !supportsConditions);\n  const conditions = getScalarConditions(type);\n  const fields: InputValueDefinitionNode[] = conditions.map((condition: string) => ({\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    name: { kind: 'Name' as 'Name', value: condition },\n    type: getScalarFilterInputType(condition, type, name),\n    // TODO: Service does not support new style descriptions so wait.\n    // description: field.description,\n    directives: [],\n  }));\n  let functionInputFields = [];\n  if (supportsConditions) {\n    functionInputFields = makeFunctionInputFields(type);\n  }\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields: [...fields, ...functionInputFields],\n    directives: [],\n  };\n}\n\nfunction getScalarFilterInputType(condition: string, type: string, filterInputName: string): TypeNode {\n  switch (condition) {\n    case 'between':\n      return makeListType(makeNamedType(type));\n    case 'and':\n    case 'or':\n      return makeNamedType(filterInputName);\n    default:\n      return makeNamedType(type);\n  }\n}\n\nfunction getScalarConditions(type: string): string[] {\n  switch (type) {\n    case 'String':\n      return STRING_CONDITIONS;\n    case 'ID':\n      return ID_CONDITIONS;\n    case 'Int':\n      return INT_CONDITIONS;\n    case 'Float':\n      return FLOAT_CONDITIONS;\n    case 'Boolean':\n      return BOOLEAN_CONDITIONS;\n    default:\n      throw new Error('Valid types are String, ID, Int, Float, Boolean');\n  }\n}\n\nfunction makeSizeInputType(): InputObjectTypeDefinitionNode {\n  const name = ModelResourceIDs.ModelSizeInputTypeName();\n  const fields: InputValueDefinitionNode[] = SIZE_CONDITIONS.map((condition: string) => ({\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    name: { kind: 'Name' as 'Name', value: condition },\n    type: getScalarFilterInputType(condition, 'Int', '' /* unused */),\n    // TODO: Service does not support new style descriptions so wait.\n    // description: field.description,\n    directives: [],\n  }));\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    // TODO: Service does not support new style descriptions so wait.\n    // description: {\n    //     kind: 'StringValue',\n    //     value: `Input type for ${obj.name.value} mutations`\n    // },\n    name: {\n      kind: 'Name',\n      value: name,\n    },\n    fields,\n    directives: [],\n  };\n}\n\nfunction getFunctionListForType(typeName: string): Set<string> {\n  switch (typeName) {\n    case 'String':\n      return STRING_FUNCTIONS;\n    case 'ID':\n      return ID_FUNCTIONS;\n    case 'Int':\n      return INT_FUNCTIONS;\n    case 'Float':\n      return FLOAT_FUNCTIONS;\n    case 'Boolean':\n      return BOOLEAN_FUNCTIONS;\n    default:\n      throw new Error('Valid types are String, ID, Int, Float, Boolean');\n  }\n}\n\nfunction makeFunctionInputFields(typeName: string): InputValueDefinitionNode[] {\n  const functions = getFunctionListForType(typeName);\n  const fields = new Array<InputValueDefinitionNode>();\n\n  if (functions.has('attributeExists')) {\n    fields.push({\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: { kind: 'Name' as 'Name', value: 'attributeExists' },\n      type: makeNamedType('Boolean'),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    });\n  }\n\n  if (functions.has('attributeType')) {\n    fields.push({\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: { kind: 'Name' as 'Name', value: 'attributeType' },\n      type: makeNamedType(ModelResourceIDs.ModelAttributeTypesName()),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    });\n  }\n\n  if (functions.has('size')) {\n    fields.push({\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      name: { kind: 'Name' as 'Name', value: 'size' },\n      type: makeNamedType(ModelResourceIDs.ModelSizeInputTypeName()),\n      // TODO: Service does not support new style descriptions so wait.\n      // description: field.description,\n      directives: [],\n    });\n  }\n\n  return fields;\n}\n\nexport function makeAttributeTypeEnum(): EnumTypeDefinitionNode {\n  const makeEnumValue = (enumValue: string): EnumValueDefinitionNode => ({\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    name: { kind: 'Name' as 'Name', value: enumValue },\n    directives: [],\n  });\n\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    name: { kind: 'Name' as 'Name', value: ModelResourceIDs.ModelAttributeTypesName() },\n    values: ATTRIBUTE_TYPES.map(t => makeEnumValue(t)),\n    directives: [],\n  };\n}\n\nexport function makeModelConnectionType(typeName: string, isSync: Boolean = false): ObjectTypeExtensionNode {\n  const connectionName = ModelResourceIDs.ModelConnectionTypeName(typeName);\n  let connectionTypeExtension = blankObjectExtension(connectionName);\n  connectionTypeExtension = extensionWithFields(connectionTypeExtension, [makeField('items', [], makeListType(makeNamedType(typeName)))]);\n  connectionTypeExtension = extensionWithFields(connectionTypeExtension, [makeField('nextToken', [], makeNamedType('String'))]);\n  if (isSync) {\n    connectionTypeExtension = extensionWithFields(connectionTypeExtension, [makeField('startedAt', [], makeNamedType('AWSTimestamp'))]);\n  }\n  return connectionTypeExtension;\n}\n\nexport function makeSubscriptionField(fieldName: string, returnTypeName: string, mutations: string[]): FieldDefinitionNode {\n  return makeField(fieldName, [], makeNamedType(returnTypeName), [\n    makeDirective('aws_subscribe', [makeArgument('mutations', makeValueNode(mutations))]),\n  ]);\n}\n\nexport type SortKeyFieldInfoTypeName = 'Composite' | string;\n\nexport interface SortKeyFieldInfo {\n  // The name of the sort key field.\n  fieldName: string;\n  // The GraphQL type of the sort key field.\n  typeName: SortKeyFieldInfoTypeName;\n  // Name of the model this field is on.\n  model?: string;\n  // The name of the key  that this sortKey is on.\n  keyName?: string;\n}\n\nexport function makeModelConnectionField(\n  fieldName: string,\n  returnTypeName: string,\n  sortKeyInfo?: SortKeyFieldInfo,\n  directives?: DirectiveNode[],\n): FieldDefinitionNode {\n  const args = [\n    makeInputValueDefinition('filter', makeNamedType(ModelResourceIDs.ModelFilterInputTypeName(returnTypeName))),\n    makeInputValueDefinition('sortDirection', makeNamedType('ModelSortDirection')),\n    makeInputValueDefinition('limit', makeNamedType('Int')),\n    makeInputValueDefinition('nextToken', makeNamedType('String')),\n  ];\n  if (sortKeyInfo) {\n    let namedType: NamedTypeNode;\n    if (sortKeyInfo.typeName === 'Composite') {\n      namedType = makeNamedType(ModelResourceIDs.ModelCompositeKeyConditionInputTypeName(sortKeyInfo.model, toUpper(sortKeyInfo.keyName)));\n    } else {\n      namedType = makeNamedType(ModelResourceIDs.ModelKeyConditionInputTypeName(sortKeyInfo.typeName));\n    }\n\n    args.unshift(makeInputValueDefinition(sortKeyInfo.fieldName, namedType));\n  }\n  return makeField(fieldName, args, makeNamedType(ModelResourceIDs.ModelConnectionTypeName(returnTypeName)), directives);\n}\n\nexport function makeScalarFilterInputs(supportsConditions: Boolean): InputObjectTypeDefinitionNode[] {\n  const inputs = [\n    makeModelScalarFilterInputObject('String', supportsConditions),\n    makeModelScalarFilterInputObject('ID', supportsConditions),\n    makeModelScalarFilterInputObject('Int', supportsConditions),\n    makeModelScalarFilterInputObject('Float', supportsConditions),\n    makeModelScalarFilterInputObject('Boolean', supportsConditions),\n  ];\n\n  if (supportsConditions) {\n    inputs.push(makeSizeInputType());\n  }\n\n  return inputs;\n}\n"]}