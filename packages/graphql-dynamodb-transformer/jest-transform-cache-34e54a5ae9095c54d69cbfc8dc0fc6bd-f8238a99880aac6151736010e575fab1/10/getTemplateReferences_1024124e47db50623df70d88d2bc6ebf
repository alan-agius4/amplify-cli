aa0a16351bbcfe0d4cf25c47df016508
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTemplateReferences = void 0;

function getTemplateReferences(template) {
  return walk(template, []);
}

exports.getTemplateReferences = getTemplateReferences;

function walk(node, path) {
  const jsonNode = node && typeof node.toJSON === 'function' ? node.toJSON() : node;

  if (Array.isArray(jsonNode)) {
    let refsFromAllKeys = {};

    for (let i = 0; i < jsonNode.length; i++) {
      const n = jsonNode[i];
      const refsForKey = walk(n, path.concat(`${i}`));
      refsFromAllKeys = mergeReferenceMaps(refsFromAllKeys, refsForKey);
    }

    return refsFromAllKeys;
  } else if (typeof jsonNode === 'object') {
    const refValue = jsonNode['Ref'];
    const getAtt = jsonNode['Fn::GetAtt'];

    if (refValue) {
      return {
        [refValue]: [path]
      };
    } else if (getAtt) {
      return {
        [getAtt[0]]: [path]
      };
    }

    let refsFromAllKeys = {};

    for (const key of Object.keys(jsonNode)) {
      const refsForKey = walk(jsonNode[key], path.concat(key));
      refsFromAllKeys = mergeReferenceMaps(refsFromAllKeys, refsForKey);
    }

    return refsFromAllKeys;
  } else {
    return {};
  }
}

function mergeReferenceMaps(a, b) {
  const bKeys = Object.keys(b);

  for (const bKey of bKeys) {
    if (a[bKey]) {
      a[bKey] = a[bKey].concat(b[bKey]);
    } else {
      a[bKey] = b[bKey];
    }
  }

  return a;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2dldFRlbXBsYXRlUmVmZXJlbmNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBY0EsU0FBZ0IscUJBQWhCLENBQXNDLFFBQXRDLEVBQXdEO0FBQ3RELFNBQU8sSUFBSSxDQUFDLFFBQUQsRUFBVyxFQUFYLENBQVg7QUFDRDs7QUFGRCxPQUFBLENBQUEscUJBQUEsR0FBQSxxQkFBQTs7QUFHQSxTQUFTLElBQVQsQ0FBYyxJQUFkLEVBQXlCLElBQXpCLEVBQXVDO0FBQ3JDLFFBQU0sUUFBUSxHQUFHLElBQUksSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFaLEtBQXVCLFVBQS9CLEdBQTRDLElBQUksQ0FBQyxNQUFMLEVBQTVDLEdBQTRELElBQTdFOztBQUNBLE1BQUksS0FBSyxDQUFDLE9BQU4sQ0FBYyxRQUFkLENBQUosRUFBNkI7QUFDM0IsUUFBSSxlQUFlLEdBQUcsRUFBdEI7O0FBQ0EsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBN0IsRUFBcUMsQ0FBQyxFQUF0QyxFQUEwQztBQUN4QyxZQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBRCxDQUFsQjtBQUNBLFlBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFELEVBQUksSUFBSSxDQUFDLE1BQUwsQ0FBWSxHQUFHLENBQUMsRUFBaEIsQ0FBSixDQUF2QjtBQUNBLE1BQUEsZUFBZSxHQUFHLGtCQUFrQixDQUFDLGVBQUQsRUFBa0IsVUFBbEIsQ0FBcEM7QUFDRDs7QUFDRCxXQUFPLGVBQVA7QUFDRCxHQVJELE1BUU8sSUFBSSxPQUFPLFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7QUFFdkMsVUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUQsQ0FBekI7QUFDQSxVQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsWUFBRCxDQUF2Qjs7QUFDQSxRQUFJLFFBQUosRUFBYztBQUNaLGFBQU87QUFDTCxTQUFDLFFBQUQsR0FBWSxDQUFDLElBQUQ7QUFEUCxPQUFQO0FBR0QsS0FKRCxNQUlPLElBQUksTUFBSixFQUFZO0FBQ2pCLGFBQU87QUFDTCxTQUFDLE1BQU0sQ0FBQyxDQUFELENBQVAsR0FBYSxDQUFDLElBQUQ7QUFEUixPQUFQO0FBR0Q7O0FBQ0QsUUFBSSxlQUFlLEdBQUcsRUFBdEI7O0FBQ0EsU0FBSyxNQUFNLEdBQVgsSUFBa0IsTUFBTSxDQUFDLElBQVAsQ0FBWSxRQUFaLENBQWxCLEVBQXlDO0FBQ3ZDLFlBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRCxDQUFULEVBQWdCLElBQUksQ0FBQyxNQUFMLENBQVksR0FBWixDQUFoQixDQUF2QjtBQUNBLE1BQUEsZUFBZSxHQUFHLGtCQUFrQixDQUFDLGVBQUQsRUFBa0IsVUFBbEIsQ0FBcEM7QUFDRDs7QUFDRCxXQUFPLGVBQVA7QUFDRCxHQW5CTSxNQW1CQTtBQUNMLFdBQU8sRUFBUDtBQUNEO0FBQ0Y7O0FBQ0QsU0FBUyxrQkFBVCxDQUE0QixDQUE1QixFQUE2QyxDQUE3QyxFQUE0RDtBQUMxRCxRQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBUCxDQUFZLENBQVosQ0FBZDs7QUFDQSxPQUFLLE1BQU0sSUFBWCxJQUFtQixLQUFuQixFQUEwQjtBQUN4QixRQUFJLENBQUMsQ0FBQyxJQUFELENBQUwsRUFBYTtBQUNYLE1BQUEsQ0FBQyxDQUFDLElBQUQsQ0FBRCxHQUFVLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUSxNQUFSLENBQWUsQ0FBQyxDQUFDLElBQUQsQ0FBaEIsQ0FBVjtBQUNELEtBRkQsTUFFTztBQUNMLE1BQUEsQ0FBQyxDQUFDLElBQUQsQ0FBRCxHQUFVLENBQUMsQ0FBQyxJQUFELENBQVg7QUFDRDtBQUNGOztBQUNELFNBQU8sQ0FBUDtBQUNEIiwic291cmNlUm9vdCI6IiJ9