c32ca13403f8b3698d9a1bca72a343d7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseResolver = void 0;

const cloudform_types_1 = require("cloudform-types");

const graphql_mapping_template_1 = require("graphql-mapping-template");

const graphql_transformer_common_1 = require("graphql-transformer-common");

const ResolverSlotManager_1 = require("./ResolverSlotManager");

const change_case_1 = require("change-case");

class BaseResolver {
  constructor(typeName, fieldName, dataSourceName, requestMappingTemplate, responseMappingTemplate, requestSlots, responseSlots) {
    this.typeName = typeName;
    this.fieldName = fieldName;
    this.dataSourceName = dataSourceName;
    this.requestMappingTemplate = requestMappingTemplate;
    this.responseMappingTemplate = responseMappingTemplate;
    this.requestSlots = requestSlots;
    this.responseSlots = responseSlots;
    this.slotManager = new ResolverSlotManager_1.ResolverSlotManager([...this.requestSlots, ...this.responseSlots]);
  }

  addDataSource(dataSourceName) {
    this.dataSourceName = dataSourceName;
  }

  mapResourceToStack(stackName) {
    this._stackName = stackName;
  }

  getStackName() {
    return this._stackName;
  }

  getResourceId() {
    return change_case_1.pascalCase(`${this.typeName} ${this.fieldName} Resolver`);
  }

  setRequestTemplate(template) {
    this.requestMappingTemplate = template;
  }

  setResponseTemplate(template) {
    this.responseMappingTemplate = template;
  }

  addSlot(slotName, template) {
    this.slotManager.addTo(slotName, template);
  }

  generateSlotFunctions(slotNames) {
    return slotNames.flatMap(slotName => {
      return this.slotManager.get(slotName).reduce((acc, item, index) => {
        const responseMappingTemplate = graphql_mapping_template_1.printBlock(this.generateTemplateComment(slotName, index, 'RESPONSE'))(graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('ctx.error'), graphql_mapping_template_1.raw('$util.error($ctx.error.message, $ctx.error.type)')), graphql_mapping_template_1.raw('$util.toJson($ctx.result)')]));
        const requestMappingTemplate = graphql_mapping_template_1.printBlock(this.generateTemplateComment(slotName, index, 'REQUEST'))(graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.raw(item), graphql_mapping_template_1.raw('$util.toJson({})')]));
        return [...acc, this.generateAppSyncFunction(slotName, index, requestMappingTemplate, responseMappingTemplate)];
      }, []);
    });
  }

  generateTemplateComment(slotName, index, templateType) {
    return `Resolver :  ${this.typeName}.${this.fieldName} Slot: ${slotName} slotIndex: ${index} type: ${templateType}`;
  }

  generateAppSyncFunction(slotName, slotIndex, requestTemplate, responseTemplate, dataSourceName = 'NONE') {
    return new cloudform_types_1.AppSync.FunctionConfiguration({
      DataSourceName: dataSourceName,
      FunctionVersion: '2018-05-29',
      RequestMappingTemplate: requestTemplate,
      ApiId: this.getAPIId(),
      Name: this.getFunctionName(slotName, slotIndex),
      ResponseMappingTemplate: responseTemplate
    }).dependsOn(graphql_transformer_common_1.ResourceConstants.RESOURCES.NoneDataSource);
  }

  generateResources(ctx) {
    this.addNoneDataSource(ctx);
    const requestFunctions = this.generateSlotFunctions(this.requestSlots);
    const responseFunctions = this.generateSlotFunctions(this.responseSlots);
    const dataFetcher = this.generateAppSyncFunction('load', 0, this.requestMappingTemplate, this.responseMappingTemplate, this.dataSourceName);
    const functionNames = [...requestFunctions, dataFetcher, ...responseFunctions].map(fn => fn.Properties.Name);
    const pipelineResolver = this.generatePipelineResolver(functionNames);
    return [...requestFunctions, dataFetcher, ...responseFunctions, pipelineResolver];
  }

  getFunctionName(slotName, index) {
    return change_case_1.pascalCase(`${this.typeName} ${this.fieldName} ${slotName}${index}`);
  }

  generatePipelineResolver(functionNames) {
    return new cloudform_types_1.AppSync.Resolver({
      ApiId: cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AppSyncApiId),
      TypeName: this.typeName,
      FieldName: this.fieldName,
      Kind: 'PIPELINE',
      PipelineConfig: {
        Functions: functionNames.map(fnName => cloudform_types_1.Fn.GetAtt(fnName, 'FunctionId'))
      },
      RequestMappingTemplate: graphql_mapping_template_1.printBlock('Stash resolver specific context.')(graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.qref(`$ctx.stash.put("typeName", "${this.typeName}")`), graphql_mapping_template_1.qref(`$ctx.stash.put("fieldName", "${this.fieldName}")`), graphql_mapping_template_1.obj({})])),
      ResponseMappingTemplate: '$util.toJson($ctx.prev.result)'
    });
  }

  addNoneDataSource(ctx) {
    const noneDS = ctx.getResource(graphql_transformer_common_1.ResourceConstants.RESOURCES.NoneDataSource);

    if (!noneDS) {
      ctx.setResource(graphql_transformer_common_1.ResourceConstants.RESOURCES.NoneDataSource, new cloudform_types_1.AppSync.DataSource({
        ApiId: this.getAPIId(),
        Name: 'NONE',
        Type: 'NONE'
      }));
    }
  }

  getAPIId() {
    return cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId');
  }

}

exports.BaseResolver = BaseResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL0Jhc2VSZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBQSxpQkFBQSxHQUFBLE9BQUEsQ0FBQSxpQkFBQSxDQUFBOztBQUVBLE1BQUEsMEJBQUEsR0FBQSxPQUFBLENBQUEsMEJBQUEsQ0FBQTs7QUFDQSxNQUFBLDRCQUFBLEdBQUEsT0FBQSxDQUFBLDRCQUFBLENBQUE7O0FBRUEsTUFBQSxxQkFBQSxHQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBOztBQUNBLE1BQUEsYUFBQSxHQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUE7O0FBRUEsTUFBYSxZQUFiLENBQXlCO0FBR3ZCLEVBQUEsV0FBQSxDQUNVLFFBRFYsRUFFVSxTQUZWLEVBR1UsY0FIVixFQUlVLHNCQUpWLEVBS1UsdUJBTFYsRUFNVSxZQU5WLEVBT1UsYUFQVixFQU9pQztBQU52QixTQUFBLFFBQUEsR0FBQSxRQUFBO0FBQ0EsU0FBQSxTQUFBLEdBQUEsU0FBQTtBQUNBLFNBQUEsY0FBQSxHQUFBLGNBQUE7QUFDQSxTQUFBLHNCQUFBLEdBQUEsc0JBQUE7QUFDQSxTQUFBLHVCQUFBLEdBQUEsdUJBQUE7QUFDQSxTQUFBLFlBQUEsR0FBQSxZQUFBO0FBQ0EsU0FBQSxhQUFBLEdBQUEsYUFBQTtBQUVSLFNBQUssV0FBTCxHQUFtQixJQUFJLHFCQUFBLENBQUEsbUJBQUosQ0FBd0IsQ0FBQyxHQUFHLEtBQUssWUFBVCxFQUF1QixHQUFHLEtBQUssYUFBL0IsQ0FBeEIsQ0FBbkI7QUFDRDs7QUFFTSxFQUFBLGFBQWEsQ0FBQyxjQUFELEVBQXVCO0FBQ3pDLFNBQUssY0FBTCxHQUFzQixjQUF0QjtBQUNEOztBQUVNLEVBQUEsa0JBQWtCLENBQUMsU0FBRCxFQUFrQjtBQUN6QyxTQUFLLFVBQUwsR0FBa0IsU0FBbEI7QUFDRDs7QUFDTSxFQUFBLFlBQVksR0FBQTtBQUNqQixXQUFPLEtBQUssVUFBWjtBQUNEOztBQUNNLEVBQUEsYUFBYSxH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