{"version":3,"sources":["/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/resources.ts"],"names":[],"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","sourcesContent":["import { DynamoDB, AppSync, IAM, Fn, StringParameter, NumberParameter, Refs, IntrinsicFunction, DeletionPolicy } from 'cloudform-types';\nimport Output from 'cloudform-types/types/output';\nimport {\n  DynamoDBMappingTemplate,\n  printBlock,\n  str,\n  print,\n  ref,\n  obj,\n  set,\n  nul,\n  ifElse,\n  compoundExpression,\n  qref,\n  bool,\n  equals,\n  iff,\n  raw,\n  comment,\n  forEach,\n  and,\n} from 'graphql-mapping-template';\nimport {\n  ResourceConstants,\n  plurality,\n  graphqlName,\n  toUpper,\n  ModelResourceIDs,\n  SyncResourceIDs,\n  getBaseType,\n} from 'graphql-transformer-common';\nimport { plural } from 'pluralize';\nimport { SyncConfig, SyncUtils } from 'graphql-transformer-core';\nimport Template from 'cloudform-types/types/template';\nimport md5 from 'md5';\nimport { InputObjectTypeDefinitionNode } from 'graphql';\n\ntype MutationResolverInput = {\n  type: string;\n  syncConfig: SyncConfig;\n  nameOverride?: string;\n  mutationTypeName?: string;\n  timestamps?: {\n    createdAtField?: string;\n    updatedAtField?: string;\n  };\n};\n\nexport class ResourceFactory {\n  public makeParams() {\n    return {\n      [ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS]: new NumberParameter({\n        Description: 'The number of read IOPS the table should support.',\n        Default: 5,\n      }),\n      [ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS]: new NumberParameter({\n        Description: 'The number of write IOPS the table should support.',\n        Default: 5,\n      }),\n      [ResourceConstants.PARAMETERS.DynamoDBBillingMode]: new StringParameter({\n        Description: 'Configure @model types to create DynamoDB tables with PAY_PER_REQUEST or PROVISIONED billing modes.',\n        Default: 'PAY_PER_REQUEST',\n        AllowedValues: ['PAY_PER_REQUEST', 'PROVISIONED'],\n      }),\n      [ResourceConstants.PARAMETERS.DynamoDBEnablePointInTimeRecovery]: new StringParameter({\n        Description: 'Whether to enable Point in Time Recovery on the table',\n        Default: 'false',\n        AllowedValues: ['true', 'false'],\n      }),\n      [ResourceConstants.PARAMETERS.DynamoDBEnableServerSideEncryption]: new StringParameter({\n        Description: 'Enable server side encryption powered by KMS.',\n        Default: 'true',\n        AllowedValues: ['true', 'false'],\n      }),\n    };\n  }\n\n  /**\n   * Creates the barebones template for an application.\n   */\n  public initTemplate(): Template {\n    return {\n      Parameters: this.makeParams(),\n      Resources: {\n        [ResourceConstants.RESOURCES.GraphQLAPILogicalID]: this.makeAppSyncAPI(),\n      },\n      Outputs: {\n        [ResourceConstants.OUTPUTS.GraphQLAPIIdOutput]: this.makeAPIIDOutput(),\n        [ResourceConstants.OUTPUTS.GraphQLAPIEndpointOutput]: this.makeAPIEndpointOutput(),\n      },\n      Conditions: {\n        [ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling]: Fn.Equals(\n          Fn.Ref(ResourceConstants.PARAMETERS.DynamoDBBillingMode),\n          'PAY_PER_REQUEST',\n        ),\n\n        [ResourceConstants.CONDITIONS.ShouldUsePointInTimeRecovery]: Fn.Equals(\n          Fn.Ref(ResourceConstants.PARAMETERS.DynamoDBEnablePointInTimeRecovery),\n          'true',\n        ),\n        [ResourceConstants.CONDITIONS.ShouldUseServerSideEncryption]: Fn.Equals(\n          Fn.Ref(ResourceConstants.PARAMETERS.DynamoDBEnableServerSideEncryption),\n          'true',\n        ),\n      },\n    };\n  }\n\n  /**\n   * Create the AppSync API.\n   */\n  public makeAppSyncAPI() {\n    return new AppSync.GraphQLApi({\n      Name: Fn.If(\n        ResourceConstants.CONDITIONS.HasEnvironmentParameter,\n        Fn.Join('-', [Fn.Ref(ResourceConstants.PARAMETERS.AppSyncApiName), Fn.Ref(ResourceConstants.PARAMETERS.Env)]),\n        Fn.Ref(ResourceConstants.PARAMETERS.AppSyncApiName),\n      ),\n      AuthenticationType: 'API_KEY',\n    });\n  }\n\n  public makeAppSyncSchema(schema: string) {\n    return new AppSync.GraphQLSchema({\n      ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      Definition: schema,\n    });\n  }\n\n  /**\n   * Outputs\n   */\n  public makeAPIIDOutput(): Output {\n    return {\n      Description: 'Your GraphQL API ID.',\n      Value: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      Export: {\n        Name: Fn.Join(':', [Refs.StackName, 'GraphQLApiId']),\n      },\n    };\n  }\n\n  public makeAPIEndpointOutput(): Output {\n    return {\n      Description: 'Your GraphQL API endpoint.',\n      Value: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'GraphQLUrl'),\n      Export: {\n        Name: Fn.Join(':', [Refs.StackName, 'GraphQLApiEndpoint']),\n      },\n    };\n  }\n\n  public makeTableStreamArnOutput(resourceId: string): Output {\n    return {\n      Description: 'Your DynamoDB table StreamArn.',\n      Value: Fn.GetAtt(resourceId, 'StreamArn'),\n      Export: {\n        Name: Fn.Join(':', [Fn.Ref(ResourceConstants.PARAMETERS.AppSyncApiId), 'GetAtt', resourceId, 'StreamArn']),\n      },\n    };\n  }\n\n  public makeDataSourceOutput(resourceId: string): Output {\n    return {\n      Description: 'Your model DataSource name.',\n      Value: Fn.GetAtt(resourceId, 'Name'),\n      Export: {\n        Name: Fn.Join(':', [Fn.Ref(ResourceConstants.PARAMETERS.AppSyncApiId), 'GetAtt', resourceId, 'Name']),\n      },\n    };\n  }\n\n  public makeTableNameOutput(resourceId: string): Output {\n    return {\n      Description: 'Your DynamoDB table name.',\n      Value: Fn.Ref(resourceId),\n      Export: {\n        Name: Fn.Join(':', [Fn.Ref(ResourceConstants.PARAMETERS.AppSyncApiId), 'GetAtt', resourceId, 'Name']),\n      },\n    };\n  }\n\n  /**\n   * Create a DynamoDB table for a specific type.\n   */\n  public makeModelTable(\n    typeName: string,\n    hashKey: string = 'id',\n    rangeKey?: string,\n    deletionPolicy: DeletionPolicy = DeletionPolicy.Delete,\n    isSyncEnabled: boolean = false,\n  ) {\n    const keySchema =\n      hashKey && rangeKey\n        ? [\n            {\n              AttributeName: hashKey,\n              KeyType: 'HASH',\n            },\n            {\n              AttributeName: rangeKey,\n              KeyType: 'RANGE',\n            },\n          ]\n        : [{ AttributeName: hashKey, KeyType: 'HASH' }];\n    const attributeDefinitions =\n      hashKey && rangeKey\n        ? [\n            {\n              AttributeName: hashKey,\n              AttributeType: 'S',\n            },\n            {\n              AttributeName: rangeKey,\n              AttributeType: 'S',\n            },\n          ]\n        : [{ AttributeName: hashKey, AttributeType: 'S' }];\n    return new DynamoDB.Table({\n      TableName: this.dynamoDBTableName(typeName),\n      KeySchema: keySchema,\n      AttributeDefinitions: attributeDefinitions,\n      StreamSpecification: {\n        StreamViewType: 'NEW_AND_OLD_IMAGES',\n      },\n      BillingMode: Fn.If(ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling, 'PAY_PER_REQUEST', Refs.NoValue),\n      ProvisionedThroughput: Fn.If(ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling, Refs.NoValue, {\n        ReadCapacityUnits: Fn.Ref(ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS),\n        WriteCapacityUnits: Fn.Ref(ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS),\n      }) as any,\n      SSESpecification: {\n        SSEEnabled: Fn.If(ResourceConstants.CONDITIONS.ShouldUseServerSideEncryption, true, false),\n      },\n      PointInTimeRecoverySpecification: Fn.If(\n        ResourceConstants.CONDITIONS.ShouldUsePointInTimeRecovery,\n        {\n          PointInTimeRecoveryEnabled: true,\n        },\n        Refs.NoValue,\n      ) as any,\n      ...(isSyncEnabled && {\n        TimeToLiveSpecification: SyncUtils.syncTTLConfig(),\n      }),\n    }).deletionPolicy(deletionPolicy);\n  }\n\n  private dynamoDBTableName(typeName: string): IntrinsicFunction {\n    return Fn.If(\n      ResourceConstants.CONDITIONS.HasEnvironmentParameter,\n      Fn.Join('-', [\n        typeName,\n        Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n        Fn.Ref(ResourceConstants.PARAMETERS.Env),\n      ]),\n      Fn.Join('-', [typeName, Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId')]),\n    );\n  }\n\n  /**\n   * Create a single role that has access to all the resources created by the\n   * transform.\n   * @param name  The name of the IAM role to create.\n   */\n  public makeIAMRole(typeName: string, syncConfig?: SyncConfig) {\n    return new IAM.Role({\n      RoleName: Fn.If(\n        ResourceConstants.CONDITIONS.HasEnvironmentParameter,\n        Fn.Join('-', [\n          typeName.slice(0, 14) + md5(typeName).slice(15, 21), // max of 64. 64-10-26-4-3 = 21\n          'role', // 4\n          Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'), // 26\n          Fn.Ref(ResourceConstants.PARAMETERS.Env), // 10\n        ]),\n        Fn.Join('-', [\n          typeName.slice(0, 24) + md5(typeName).slice(25, 31), // max of 64. 64-26-4-3 = 31\n          'role',\n          Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n        ]),\n      ),\n      AssumeRolePolicyDocument: {\n        Version: '2012-10-17',\n        Statement: [\n          {\n            Effect: 'Allow',\n            Principal: {\n              Service: 'appsync.amazonaws.com',\n            },\n            Action: 'sts:AssumeRole',\n          },\n        ],\n      },\n      Policies: [\n        new IAM.Role.Policy({\n          PolicyName: 'DynamoDBAccess',\n          PolicyDocument: {\n            Version: '2012-10-17',\n            Statement: [\n              {\n                Effect: 'Allow',\n                Action: [\n                  'dynamodb:BatchGetItem',\n                  'dynamodb:BatchWriteItem',\n                  'dynamodb:PutItem',\n                  'dynamodb:DeleteItem',\n                  'dynamodb:GetItem',\n                  'dynamodb:Scan',\n                  'dynamodb:Query',\n                  'dynamodb:UpdateItem',\n                ],\n                Resource: [\n                  Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}', {\n                    tablename: this.dynamoDBTableName(typeName),\n                  }),\n                  Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*', {\n                    tablename: this.dynamoDBTableName(typeName),\n                  }),\n                  ...(syncConfig\n                    ? [\n                        Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}', {\n                          tablename: Fn.If(\n                            ResourceConstants.CONDITIONS.HasEnvironmentParameter,\n                            Fn.Join('-', [\n                              SyncResourceIDs.syncTableName,\n                              Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n                              Fn.Ref(ResourceConstants.PARAMETERS.Env),\n                            ]),\n                            Fn.Join('-', [\n                              SyncResourceIDs.syncTableName,\n                              Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n                            ]),\n                          ),\n                        }),\n                        Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*', {\n                          tablename: Fn.If(\n                            ResourceConstants.CONDITIONS.HasEnvironmentParameter,\n                            Fn.Join('-', [\n                              SyncResourceIDs.syncTableName,\n                              Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n                              Fn.Ref(ResourceConstants.PARAMETERS.Env),\n                            ]),\n                            Fn.Join('-', [\n                              SyncResourceIDs.syncTableName,\n                              Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n                            ]),\n                          ),\n                        }),\n                      ]\n                    : []),\n                ],\n              },\n            ],\n          },\n        }),\n        ...(syncConfig && SyncUtils.isLambdaSyncConfig(syncConfig)\n          ? [SyncUtils.createSyncLambdaIAMPolicy(syncConfig.LambdaConflictHandler)]\n          : []),\n      ],\n    });\n  }\n\n  /**\n   * Given the name of a data source and optional logical id return a CF\n   * spec for a data source pointing to the dynamodb table.\n   */\n  public makeDynamoDBDataSource(tableId: string, iamRoleLogicalID: string, typeName: string, isSyncEnabled: boolean = false) {\n    return new AppSync.DataSource({\n      ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      Name: tableId,\n      Type: 'AMAZON_DYNAMODB',\n      ServiceRoleArn: Fn.GetAtt(iamRoleLogicalID, 'Arn'),\n      DynamoDBConfig: {\n        AwsRegion: Refs.Region,\n        TableName: this.dynamoDBTableName(typeName),\n        ...(isSyncEnabled && {\n          DeltaSyncConfig: SyncUtils.syncDataSourceConfig(),\n          Versioned: true,\n        }),\n      },\n    }).dependsOn([iamRoleLogicalID]);\n  }\n\n  /**\n   * Create a resolver that creates an item in DynamoDB.\n   * @param type\n   */\n  public makeCreateResolver({ type, nameOverride, syncConfig, mutationTypeName = 'Mutation' }: MutationResolverInput) {\n    const fieldName = nameOverride ? nameOverride : graphqlName('create' + toUpper(type));\n    return {\n      dataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      fieldName: fieldName,\n      typeName: mutationTypeName,\n      requestMappingTemplate: printBlock('Prepare DynamoDB PutItem Request')(\n        compoundExpression([\n          qref(`$context.args.input.put(\"__typename\", \"${type}\")`),\n          set(\n            ref('condition'),\n            obj({\n              expression: str('attribute_not_exists(#id)'),\n              expressionNames: obj({\n                '#id': str('id'),\n              }),\n            }),\n          ),\n          iff(\n            ref('context.args.condition'),\n            compoundExpression([\n              set(ref('condition.expressionValues'), obj({})),\n              set(\n                ref('conditionFilterExpressions'),\n                raw('$util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition))'),\n              ),\n              // tslint:disable-next-line\n              qref(`$condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\")`),\n              qref(`$condition.expressionNames.putAll($conditionFilterExpressions.expressionNames)`),\n              qref(`$condition.expressionValues.putAll($conditionFilterExpressions.expressionValues)`),\n            ]),\n          ),\n          iff(\n            and([ref('condition.expressionValues'), raw('$condition.expressionValues.size() == 0')]),\n            set(\n              ref('condition'),\n              obj({\n                expression: ref('condition.expression'),\n                expressionNames: ref('condition.expressionNames'),\n              }),\n            ),\n          ),\n          DynamoDBMappingTemplate.putItem(\n            {\n              key: ifElse(\n                ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n                raw(`$util.toJson(\\$${ResourceConstants.SNIPPETS.ModelObjectKey})`),\n                obj({\n                  id: raw(`$util.dynamodb.toDynamoDBJson($ctx.args.input.id)`),\n                }),\n                true,\n              ),\n              attributeValues: ref('util.dynamodb.toMapValuesJson($context.args.input)'),\n              condition: ref('util.toJson($condition)'),\n            },\n            syncConfig ? '2018-05-29' : '2017-02-28',\n          ),\n        ]),\n      ),\n      responseMappingTemplate: syncConfig ? print(DynamoDBMappingTemplate.dynamoDBResponse()) : print(ref('util.toJson($ctx.result)')),\n      ...(syncConfig && { SyncConfig: SyncUtils.syncResolverConfig(syncConfig) }),\n    };\n  }\n\n  public initalizeDefaultInputForCreateMutation(input: InputObjectTypeDefinitionNode, timestamps): string {\n    const hasDefaultIdField = input.fields?.find(field => field.name.value === 'id' && ['ID', 'String'].includes(getBaseType(field.type)));\n    return printBlock('Set default values')(\n      compoundExpression([\n        ...(hasDefaultIdField ? [qref(`$context.args.input.put(\"id\", $util.defaultIfNull($ctx.args.input.id, $util.autoId()))`)] : []),\n        ...(timestamps && (timestamps.createdAtField || timestamps.updatedAtField)\n          ? [set(ref('createdAt'), ref('util.time.nowISO8601()'))]\n          : []),\n        ...(timestamps && timestamps.createdAtField\n          ? [\n              comment(`Automatically set the createdAt timestamp.`),\n              qref(\n                `$context.args.input.put(\"${timestamps.createdAtField}\", $util.defaultIfNull($ctx.args.input.${timestamps.createdAtField}, $createdAt))`,\n              ),\n            ]\n          : []),\n        ...(timestamps && timestamps.updatedAtField\n          ? [\n              comment(`Automatically set the updatedAt timestamp.`),\n              qref(\n                `$context.args.input.put(\"${timestamps.updatedAtField}\", $util.defaultIfNull($ctx.args.input.${timestamps.updatedAtField}, $createdAt))`,\n              ),\n            ]\n          : []),\n      ]),\n    );\n  }\n\n  public makeUpdateResolver({ type, nameOverride, syncConfig, mutationTypeName = 'Mutation', timestamps }: MutationResolverInput) {\n    const fieldName = nameOverride ? nameOverride : graphqlName(`update` + toUpper(type));\n    const isSyncEnabled = syncConfig ? true : false;\n    return {\n      ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      dataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      fieldName: fieldName,\n      typeName: mutationTypeName,\n      requestMappingTemplate: print(\n        compoundExpression([\n          ifElse(\n            raw(`$${ResourceConstants.SNIPPETS.AuthCondition} && $${ResourceConstants.SNIPPETS.AuthCondition}.expression != \"\"`),\n            compoundExpression([\n              set(ref('condition'), ref(ResourceConstants.SNIPPETS.AuthCondition)),\n              ifElse(\n                ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n                forEach(ref('entry'), ref(`${ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [\n                  qref('$condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\")'),\n                  qref('$condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\")'),\n                ]),\n                compoundExpression([\n                  qref('$condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\")'),\n                  qref('$condition.expressionNames.put(\"#id\", \"id\")'),\n                ]),\n              ),\n            ]),\n            ifElse(\n              ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n              compoundExpression([\n                set(\n                  ref('condition'),\n                  obj({\n                    expression: str(''),\n                    expressionNames: obj({}),\n                    expressionValues: obj({}),\n                  }),\n                ),\n                forEach(ref('entry'), ref(`${ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [\n                  ifElse(\n                    raw('$velocityCount == 1'),\n                    qref('$condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\")'),\n                    qref('$condition.put(\\\n\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\")'),\n                  ),\n                  qref('$condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\")'),\n                ]),\n              ]),\n              set(\n                ref('condition'),\n                obj({\n                  expression: str('attribute_exists(#id)'),\n                  expressionNames: obj({\n                    '#id': str('id'),\n                  }),\n                  expressionValues: obj({}),\n                }),\n              ),\n            ),\n          ),\n          ...(timestamps && timestamps.updatedAtField\n            ? [\n                comment(`Automatically set the updatedAt timestamp.`),\n                qref(\n                  `$context.args.input.put(\"${timestamps.updatedAtField}\", $util.defaultIfNull($ctx.args.input.${timestamps.updatedAtField}, $util.time.nowISO8601()))`,\n                ),\n              ]\n            : []),\n          qref(`$context.args.input.put(\"__typename\", \"${type}\")`),\n          comment('Update condition if type is @versioned'),\n          iff(\n            ref(ResourceConstants.SNIPPETS.VersionedCondition),\n            compoundExpression([\n              // tslint:disable-next-line\n              qref(\n                `$condition.put(\"expression\", \"($condition.expression) AND $${ResourceConstants.SNIPPETS.VersionedCondition}.expression\")`,\n              ),\n              qref(`$condition.expressionNames.putAll($${ResourceConstants.SNIPPETS.VersionedCondition}.expressionNames)`),\n              qref(`$condition.expressionValues.putAll($${ResourceConstants.SNIPPETS.VersionedCondition}.expressionValues)`),\n            ]),\n          ),\n          iff(\n            ref('context.args.condition'),\n            compoundExpression([\n              set(\n                ref('conditionFilterExpressions'),\n                raw('$util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition))'),\n              ),\n              // tslint:disable-next-line\n              qref(`$condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\")`),\n              qref(`$condition.expressionNames.putAll($conditionFilterExpressions.expressionNames)`),\n              qref(`$condition.expressionValues.putAll($conditionFilterExpressions.expressionValues)`),\n            ]),\n          ),\n          iff(\n            and([ref('condition.expressionValues'), raw('$condition.expressionValues.size() == 0')]),\n            set(\n              ref('condition'),\n              obj({\n                expression: ref('condition.expression'),\n                expressionNames: ref('condition.expressionNames'),\n              }),\n            ),\n          ),\n          DynamoDBMappingTemplate.updateItem({\n            key: ifElse(\n              ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n              raw(`$util.toJson(\\$${ResourceConstants.SNIPPETS.ModelObjectKey})`),\n              obj({\n                id: obj({ S: ref('util.toJson($context.args.input.id)') }),\n              }),\n              true,\n            ),\n            condition: ref('util.toJson($condition)'),\n            objectKeyVariable: ResourceConstants.SNIPPETS.ModelObjectKey,\n            nameOverrideMap: ResourceConstants.SNIPPETS.DynamoDBNameOverrideMap,\n            isSyncEnabled,\n          }),\n        ]),\n      ),\n      responseMappingTemplate: isSyncEnabled ? print(DynamoDBMappingTemplate.dynamoDBResponse()) : print(ref('util.toJson($ctx.result)')),\n      ...(syncConfig && { SyncConfig: SyncUtils.syncResolverConfig(syncConfig) }),\n    };\n  }\n\n  /**\n   * Create a resolver that creates an item in DynamoDB.\n   * @param type\n   */\n  public makeGetResolver(type: string, nameOverride?: string, isSyncEnabled: boolean = false, queryTypeName: string = 'Query') {\n    const fieldName = nameOverride ? nameOverride : graphqlName('get' + toUpper(type));\n    return {\n      apiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      dataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      fieldName: fieldName,\n      typeName: queryTypeName,\n      requestMappingTemplate: print(\n        DynamoDBMappingTemplate.getItem({\n          key: ifElse(\n            ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n            raw(`$util.toJson(\\$${ResourceConstants.SNIPPETS.ModelObjectKey})`),\n            obj({\n              id: ref('util.dynamodb.toDynamoDBJson($ctx.args.id)'),\n            }),\n            true,\n          ),\n          isSyncEnabled,\n        }),\n      ),\n      responseMappingTemplate: isSyncEnabled ? print(DynamoDBMappingTemplate.dynamoDBResponse()) : print(ref('util.toJson($ctx.result)')),\n    };\n  }\n\n  /**\n   * Create a resolver that syncs local storage with cloud storage\n   * @param type\n   */\n  public makeSyncResolver(type: string, queryTypeName: string = 'Query') {\n    const fieldName = graphqlName('sync' + toUpper(plural(type)));\n    return new AppSync.Resolver({\n      ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      DataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      FieldName: fieldName,\n      TypeName: queryTypeName,\n      RequestMappingTemplate: print(\n        DynamoDBMappingTemplate.syncItem({\n          filter: ifElse(ref('context.args.filter'), ref('util.transform.toDynamoDBFilterExpression($ctx.args.filter)'), nul()),\n          limit: ref(`util.defaultIfNull($ctx.args.limit, ${ResourceConstants.DEFAULT_SYNC_QUERY_PAGE_LIMIT})`),\n          lastSync: ref('util.toJson($util.defaultIfNull($ctx.args.lastSync, null))'),\n          nextToken: ref('util.toJson($util.defaultIfNull($ctx.args.nextToken, null))'),\n        }),\n      ),\n      ResponseMappingTemplate: print(DynamoDBMappingTemplate.dynamoDBResponse()),\n    });\n  }\n  /**\n   * Create a resolver that queries an item in DynamoDB.\n   * @param type\n   */\n  public makeQueryResolver(type: string, nameOverride?: string, isSyncEnabled: boolean = false, queryTypeName: string = 'Query') {\n    const fieldName = nameOverride ? nameOverride : graphqlName(`query${toUpper(type)}`);\n    return new AppSync.Resolver({\n      ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      DataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      FieldName: fieldName,\n      TypeName: queryTypeName,\n      RequestMappingTemplate: print(\n        compoundExpression([\n          set(ref('limit'), ref(`util.defaultIfNull($context.args.limit, ${ResourceConstants.DEFAULT_PAGE_LIMIT})`)),\n          DynamoDBMappingTemplate.query({\n            query: obj({\n              expression: str('#typename = :typename'),\n              expressionNames: obj({\n                '#typename': str('__typename'),\n              }),\n              expressionValues: obj({\n                ':typename': obj({\n                  S: str(type),\n                }),\n              }),\n            }),\n            scanIndexForward: ifElse(\n              ref('context.args.sortDirection'),\n              ifElse(equals(ref('context.args.sortDirection'), str('ASC')), bool(true), bool(false)),\n              bool(true),\n            ),\n            filter: ifElse(ref('context.args.filter'), ref('util.transform.toDynamoDBFilterExpression($ctx.args.filter)'), nul()),\n            limit: ref('limit'),\n            nextToken: ifElse(ref('context.args.nextToken'), ref('util.toJson($context.args.nextToken)'), nul()),\n            isSyncEnabled,\n          }),\n        ]),\n      ),\n      ResponseMappingTemplate: isSyncEnabled\n        ? print(\n            DynamoDBMappingTemplate.dynamoDBResponse(\n              compoundExpression([iff(raw('!$result'), set(ref('result'), ref('ctx.result'))), raw('$util.toJson($result)')]),\n            ),\n          )\n        : print(ref('util.toJson($ctx.result)')),\n    });\n  }\n\n  /**\n   * Create a resolver that lists items in DynamoDB.\n   * TODO: actually fill out the right filter expression. This is a placeholder only.\n   * @param type\n   */\n  public makeListResolver(type: string, nameOverride?: string, isSyncEnabled: boolean = false, queryTypeName: string = 'Query') {\n    const fieldName = nameOverride ? nameOverride : graphqlName('list' + plurality(toUpper(type)));\n    const requestVariable = 'ListRequest';\n    return {\n      apiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      dataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      fieldName: fieldName,\n      typeName: queryTypeName,\n      requestMappingTemplate: print(\n        compoundExpression([\n          set(ref('limit'), ref(`util.defaultIfNull($context.args.limit, ${ResourceConstants.DEFAULT_PAGE_LIMIT})`)),\n          set(\n            ref(requestVariable),\n            obj({\n              version: isSyncEnabled ? str('2018-05-29') : str('2017-02-28'),\n              limit: ref('limit'),\n            }),\n          ),\n          // PoI: Getting the snipper from stash\n          iff(ref('context.args.nextToken'), set(ref(`${requestVariable}.nextToken`), ref('context.args.nextToken'))),\n          iff(\n            ref('context.args.filter'),\n            set(ref(`${requestVariable}.filter`), ref('util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\")')),\n          ),\n          iff(ref('context.stash.metadata.index'), set(ref(`${requestVariable}.index`), ref('context.stash.metadata.index'))),\n          set(ref(ResourceConstants.SNIPPETS.ModelQueryExpression), ref(`ctx.stash.${ResourceConstants.SNIPPETS.ModelQueryExpression}`)),\n          ifElse(\n            raw(`!$util.isNull($${ResourceConstants.SNIPPETS.ModelQueryExpression})\n                        && !$util.isNullOrEmpty($${ResourceConstants.SNIPPETS.ModelQueryExpression}.expression)`),\n            compoundExpression([\n              qref(`$${requestVariable}.put(\"operation\", \"Query\")`),\n              qref(`$${requestVariable}.put(\"query\", $${ResourceConstants.SNIPPETS.ModelQueryExpression})`),\n              ifElse(\n                raw(`!$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\"`),\n                set(ref(`${requestVariable}.scanIndexForward`), bool(false)),\n                set(ref(`${requestVariable}.scanIndexForward`), bool(true)),\n              ),\n            ]),\n            qref(`$${requestVariable}.put(\"operation\", \"Scan\")`),\n          ),\n          raw(`$util.toJson($${requestVariable})`),\n        ]),\n      ),\n      responseMappingTemplate: isSyncEnabled ? print(DynamoDBMappingTemplate.dynamoDBResponse()) : print(ref('util.toJson($ctx.result)')),\n    };\n  }\n\n  /**\n   * Create a resolver that deletes an item from DynamoDB.\n   * @param type The name of the type to delete an item of.\n   * @param nameOverride A user provided override for the field name.\n   */\n  public makeDeleteResolver({ type, nameOverride, syncConfig, mutationTypeName = 'Mutation' }: MutationResolverInput) {\n    const fieldName = nameOverride ? nameOverride : graphqlName('delete' + toUpper(type));\n    const isSyncEnabled = syncConfig ? true : false;\n    return {\n      apiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      dataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      fieldName: fieldName,\n      typeName: mutationTypeName,\n      requestMappingTemplate: print(\n        compoundExpression([\n          ifElse(\n            ref(ResourceConstants.SNIPPETS.AuthCondition),\n            compoundExpression([\n              set(ref('condition'), ref(ResourceConstants.SNIPPETS.AuthCondition)),\n              ifElse(\n                ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n                forEach(ref('entry'), ref(`${ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [\n                  qref('$condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\")'),\n                  qref('$condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\")'),\n                ]),\n                compoundExpression([\n                  qref('$condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\")'),\n                  qref('$condition.expressionNames.put(\"#id\", \"id\")'),\n                ]),\n              ),\n            ]),\n            ifElse(\n              ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n              compoundExpression([\n                set(\n                  ref('condition'),\n                  obj({\n                    expression: str(''),\n                    expressionNames: obj({}),\n                  }),\n                ),\n                forEach(ref('entry'), ref(`${ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [\n                  ifElse(\n                    raw('$velocityCount == 1'),\n                    qref('$condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\")'),\n                    qref('$condition.put(\\\n\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\")'),\n                  ),\n                  qref('$condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\")'),\n                ]),\n              ]),\n              set(\n                ref('condition'),\n                obj({\n                  expression: str('attribute_exists(#id)'),\n                  expressionNames: obj({\n                    '#id': str('id'),\n                  }),\n                }),\n              ),\n            ),\n          ),\n          iff(\n            ref(ResourceConstants.SNIPPETS.VersionedCondition),\n            compoundExpression([\n              // tslint:disable-next-line\n              qref(\n                `$condition.put(\"expression\", \"($condition.expression) AND $${ResourceConstants.SNIPPETS.VersionedCondition}.expression\")`,\n              ),\n              qref(`$condition.expressionNames.putAll($${ResourceConstants.SNIPPETS.VersionedCondition}.expressionNames)`),\n              set(ref('expressionValues'), raw('$util.defaultIfNull($condition.expressionValues, {})')),\n              qref(`$expressionValues.putAll($${ResourceConstants.SNIPPETS.VersionedCondition}.expressionValues)`),\n              set(ref('condition.expressionValues'), ref('expressionValues')),\n            ]),\n          ),\n          iff(\n            ref('context.args.condition'),\n            compoundExpression([\n              set(\n                ref('conditionFilterExpressions'),\n                raw('$util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition))'),\n              ),\n              // tslint:disable-next-line\n              qref(`$condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\")`),\n              qref(`$condition.expressionNames.putAll($conditionFilterExpressions.expressionNames)`),\n              set(ref('conditionExpressionValues'), raw('$util.defaultIfNull($condition.expressionValues, {})')),\n              qref(`$conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues)`),\n              set(ref('condition.expressionValues'), ref('conditionExpressionValues')),\n              qref(`$condition.expressionValues.putAll($conditionFilterExpressions.expressionValues)`),\n            ]),\n          ),\n          iff(\n            and([ref('condition.expressionValues'), raw('$condition.expressionValues.size() == 0')]),\n            set(\n              ref('condition'),\n              obj({\n                expression: ref('condition.expression'),\n                expressionNames: ref('condition.expressionNames'),\n              }),\n            ),\n          ),\n          DynamoDBMappingTemplate.deleteItem({\n            key: ifElse(\n              ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n              raw(`$util.toJson(\\$${ResourceConstants.SNIPPETS.ModelObjectKey})`),\n              obj({\n                id: ref('util.dynamodb.toDynamoDBJson($ctx.args.input.id)'),\n              }),\n              true,\n            ),\n            condition: ref('util.toJson($condition)'),\n            isSyncEnabled,\n          }),\n        ]),\n      ),\n      responseMappingTemplate: isSyncEnabled ? print(DynamoDBMappingTemplate.dynamoDBResponse()) : print(ref('util.toJson($ctx.result)')),\n      ...(syncConfig && { SyncConfig: SyncUtils.syncResolverConfig(syncConfig) }),\n    };\n  }\n}\n"]}