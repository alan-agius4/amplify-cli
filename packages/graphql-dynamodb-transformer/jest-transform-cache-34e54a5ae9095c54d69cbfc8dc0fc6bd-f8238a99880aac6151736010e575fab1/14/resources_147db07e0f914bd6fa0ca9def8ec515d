e26cf577691bf6b905a37a8731d6528d
"use strict";

/* istanbul ignore next */
function cov_1urykczn5e() {
  var path = "/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/resources.ts";
  var hash = "791ecff523d5427ada2def9595439f2ef539c92a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/resources.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 33
        }
      },
      "4": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 52
        }
      },
      "5": {
        start: {
          line: 8,
          column: 35
        },
        end: {
          line: 8,
          column: 70
        }
      },
      "6": {
        start: {
          line: 9,
          column: 37
        },
        end: {
          line: 9,
          column: 74
        }
      },
      "7": {
        start: {
          line: 10,
          column: 20
        },
        end: {
          line: 10,
          column: 40
        }
      },
      "8": {
        start: {
          line: 11,
          column: 35
        },
        end: {
          line: 11,
          column: 70
        }
      },
      "9": {
        start: {
          line: 12,
          column: 14
        },
        end: {
          line: 12,
          column: 45
        }
      },
      "10": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 39,
          column: 10
        }
      },
      "11": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "12": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "13": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 74,
          column: 11
        }
      },
      "14": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 86,
          column: 10
        }
      },
      "15": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 95,
          column: 10
        }
      },
      "16": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 104,
          column: 10
        }
      },
      "17": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 113,
          column: 10
        }
      },
      "18": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 122,
          column: 10
        }
      },
      "19": {
        start: {
          line: 128,
          column: 26
        },
        end: {
          line: 139,
          column: 59
        }
      },
      "20": {
        start: {
          line: 140,
          column: 37
        },
        end: {
          line: 151,
          column: 62
        }
      },
      "21": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 173,
          column: 42
        }
      },
      "22": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 180,
          column: 172
        }
      },
      "23": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 269,
          column: 11
        }
      },
      "24": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 289,
          column: 41
        }
      },
      "25": {
        start: {
          line: 296,
          column: 26
        },
        end: {
          line: 296,
          column: 151
        }
      },
      "26": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 331,
          column: 10
        }
      },
      "27": {
        start: {
          line: 335,
          column: 34
        },
        end: {
          line: 335,
          column: 217
        }
      },
      "28": {
        start: {
          line: 335,
          column: 108
        },
        end: {
          line: 335,
          column: 216
        }
      },
      "29": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 353,
          column: 12
        }
      },
      "30": {
        start: {
          line: 356,
          column: 26
        },
        end: {
          line: 356,
          column: 151
        }
      },
      "31": {
        start: {
          line: 357,
          column: 30
        },
        end: {
          line: 357,
          column: 55
        }
      },
      "32": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 428,
          column: 10
        }
      },
      "33": {
        start: {
          line: 435,
          column: 26
        },
        end: {
          line: 435,
          column: 148
        }
      },
      "34": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 448,
          column: 10
        }
      },
      "35": {
        start: {
          line: 455,
          column: 26
        },
        end: {
          line: 455,
          column: 139
        }
      },
      "36": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 468,
          column: 11
        }
      },
      "37": {
        start: {
          line: 475,
          column: 26
        },
        end: {
          line: 475,
          column: 150
        }
      },
      "38": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 505,
          column: 11
        }
      },
      "39": {
        start: {
          line: 513,
          column: 26
        },
        end: {
          line: 513,
          column: 189
        }
      },
      "40": {
        start: {
          line: 514,
          column: 32
        },
        end: {
          line: 514,
          column: 45
        }
      },
      "41": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 540,
          column: 10
        }
      },
      "42": {
        start: {
          line: 548,
          column: 26
        },
        end: {
          line: 548,
          column: 151
        }
      },
      "43": {
        start: {
          line: 549,
          column: 30
        },
        end: {
          line: 549,
          column: 55
        }
      },
      "44": {
        start: {
          line: 550,
          column: 8
        },
        end: {
          line: 613,
          column: 10
        }
      },
      "45": {
        start: {
          line: 616,
          column: 0
        },
        end: {
          line: 616,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 17
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 19
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 44
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 21
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 64
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 30
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 70
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 22
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 79
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 28
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 88
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 41
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 97
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 37
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 106
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 115,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        },
        loc: {
          start: {
            line: 115,
            column: 36
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 115
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 136
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 127
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 32
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 175
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 38
          },
          end: {
            line: 270,
            column: 5
          }
        },
        line: 187
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        loc: {
          start: {
            line: 275,
            column: 87
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 275
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        loc: {
          start: {
            line: 295,
            column: 90
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 295
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        loc: {
          start: {
            line: 333,
            column: 62
          },
          end: {
            line: 354,
            column: 5
          }
        },
        line: 333
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 335,
            column: 99
          },
          end: {
            line: 335,
            column: 100
          }
        },
        loc: {
          start: {
            line: 335,
            column: 108
          },
          end: {
            line: 335,
            column: 216
          }
        },
        line: 335
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 355,
            column: 4
          },
          end: {
            line: 355,
            column: 5
          }
        },
        loc: {
          start: {
            line: 355,
            column: 102
          },
          end: {
            line: 429,
            column: 5
          }
        },
        line: 355
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 434,
            column: 5
          }
        },
        loc: {
          start: {
            line: 434,
            column: 88
          },
          end: {
            line: 449,
            column: 5
          }
        },
        line: 434
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 454,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        },
        loc: {
          start: {
            line: 454,
            column: 52
          },
          end: {
            line: 469,
            column: 5
          }
        },
        line: 454
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 474,
            column: 4
          },
          end: {
            line: 474,
            column: 5
          }
        },
        loc: {
          start: {
            line: 474,
            column: 90
          },
          end: {
            line: 506,
            column: 5
          }
        },
        line: 474
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 512,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        },
        loc: {
          start: {
            line: 512,
            column: 89
          },
          end: {
            line: 541,
            column: 5
          }
        },
        line: 512
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 547,
            column: 4
          },
          end: {
            line: 547,
            column: 5
          }
        },
        loc: {
          start: {
            line: 547,
            column: 90
          },
          end: {
            line: 614,
            column: 5
          }
        },
        line: 547
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 127,
            column: 29
          },
          end: {
            line: 127,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 127,
            column: 39
          },
          end: {
            line: 127,
            column: 43
          }
        }],
        line: 127
      },
      "4": {
        loc: {
          start: {
            line: 127,
            column: 55
          },
          end: {
            line: 127,
            column: 111
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 127,
            column: 72
          },
          end: {
            line: 127,
            column: 111
          }
        }],
        line: 127
      },
      "5": {
        loc: {
          start: {
            line: 127,
            column: 113
          },
          end: {
            line: 127,
            column: 134
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 127,
            column: 129
          },
          end: {
            line: 127,
            column: 134
          }
        }],
        line: 127
      },
      "6": {
        loc: {
          start: {
            line: 128,
            column: 26
          },
          end: {
            line: 139,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 14
          },
          end: {
            line: 138,
            column: 13
          }
        }, {
          start: {
            line: 139,
            column: 14
          },
          end: {
            line: 139,
            column: 59
          }
        }],
        line: 128
      },
      "7": {
        loc: {
          start: {
            line: 128,
            column: 26
          },
          end: {
            line: 128,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 26
          },
          end: {
            line: 128,
            column: 33
          }
        }, {
          start: {
            line: 128,
            column: 37
          },
          end: {
            line: 128,
            column: 45
          }
        }],
        line: 128
      },
      "8": {
        loc: {
          start: {
            line: 140,
            column: 37
          },
          end: {
            line: 151,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 14
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: 151,
            column: 14
          },
          end: {
            line: 151,
            column: 62
          }
        }],
        line: 140
      },
      "9": {
        loc: {
          start: {
            line: 140,
            column: 37
          },
          end: {
            line: 140,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 37
          },
          end: {
            line: 140,
            column: 44
          }
        }, {
          start: {
            line: 140,
            column: 48
          },
          end: {
            line: 140,
            column: 56
          }
        }],
        line: 140
      },
      "10": {
        loc: {
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 172,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 170,
            column: 29
          }
        }, {
          start: {
            line: 170,
            column: 33
          },
          end: {
            line: 172,
            column: 13
          }
        }],
        line: 170
      },
      "11": {
        loc: {
          start: {
            line: 236,
            column: 40
          },
          end: {
            line: 259,
            column: 44
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 237,
            column: 42
          },
          end: {
            line: 258,
            column: 41
          }
        }, {
          start: {
            line: 259,
            column: 42
          },
          end: {
            line: 259,
            column: 44
          }
        }],
        line: 236
      },
      "12": {
        loc: {
          start: {
            line: 265,
            column: 20
          },
          end: {
            line: 267,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 266,
            column: 22
          },
          end: {
            line: 266,
            column: 120
          }
        }, {
          start: {
            line: 267,
            column: 22
          },
          end: {
            line: 267,
            column: 24
          }
        }],
        line: 265
      },
      "13": {
        loc: {
          start: {
            line: 265,
            column: 20
          },
          end: {
            line: 265,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 20
          },
          end: {
            line: 265,
            column: 30
          }
        }, {
          start: {
            line: 265,
            column: 34
          },
          end: {
            line: 265,
            column: 101
          }
        }],
        line: 265
      },
      "14": {
        loc: {
          start: {
            line: 275,
            column: 64
          },
          end: {
            line: 275,
            column: 85
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 275,
            column: 80
          },
          end: {
            line: 275,
            column: 85
          }
        }],
        line: 275
      },
      "15": {
        loc: {
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 287,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 284,
            column: 33
          }
        }, {
          start: {
            line: 284,
            column: 37
          },
          end: {
            line: 287,
            column: 17
          }
        }],
        line: 284
      },
      "16": {
        loc: {
          start: {
            line: 295,
            column: 57
          },
          end: {
            line: 295,
            column: 86
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 295,
            column: 76
          },
          end: {
            line: 295,
            column: 86
          }
        }],
        line: 295
      },
      "17": {
        loc: {
          start: {
            line: 296,
            column: 26
          },
          end: {
            line: 296,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 296,
            column: 41
          },
          end: {
            line: 296,
            column: 53
          }
        }, {
          start: {
            line: 296,
            column: 56
          },
          end: {
            line: 296,
            column: 151
          }
        }],
        line: 296
      },
      "18": {
        loc: {
          start: {
            line: 327,
            column: 19
          },
          end: {
            line: 327,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 327,
            column: 32
          },
          end: {
            line: 327,
            column: 44
          }
        }, {
          start: {
            line: 327,
            column: 47
          },
          end: {
            line: 327,
            column: 59
          }
        }],
        line: 327
      },
      "19": {
        loc: {
          start: {
            line: 329,
            column: 37
          },
          end: {
            line: 329,
            column: 248
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 329,
            column: 50
          },
          end: {
            line: 329,
            column: 153
          }
        }, {
          start: {
            line: 329,
            column: 156
          },
          end: {
            line: 329,
            column: 248
          }
        }],
        line: 329
      },
      "20": {
        loc: {
          start: {
            line: 330,
            column: 16
          },
          end: {
            line: 330,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 16
          },
          end: {
            line: 330,
            column: 26
          }
        }, {
          start: {
            line: 330,
            column: 30
          },
          end: {
            line: 330,
            column: 113
          }
        }],
        line: 330
      },
      "21": {
        loc: {
          start: {
            line: 335,
            column: 34
          },
          end: {
            line: 335,
            column: 217
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 82
          },
          end: {
            line: 335,
            column: 88
          }
        }, {
          start: {
            line: 335,
            column: 91
          },
          end: {
            line: 335,
            column: 217
          }
        }],
        line: 335
      },
      "22": {
        loc: {
          start: {
            line: 335,
            column: 34
          },
          end: {
            line: 335,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 34
          },
          end: {
            line: 335,
            column: 62
          }
        }, {
          start: {
            line: 335,
            column: 66
          },
          end: {
            line: 335,
            column: 79
          }
        }],
        line: 335
      },
      "23": {
        loc: {
          start: {
            line: 335,
            column: 108
          },
          end: {
            line: 335,
            column: 216
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 108
          },
          end: {
            line: 335,
            column: 133
          }
        }, {
          start: {
            line: 335,
            column: 137
          },
          end: {
            line: 335,
            column: 216
          }
        }],
        line: 335
      },
      "24": {
        loc: {
          start: {
            line: 337,
            column: 16
          },
          end: {
            line: 337,
            column: 164
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 337,
            column: 36
          },
          end: {
            line: 337,
            column: 159
          }
        }, {
          start: {
            line: 337,
            column: 162
          },
          end: {
            line: 337,
            column: 164
          }
        }],
        line: 337
      },
      "25": {
        loc: {
          start: {
            line: 338,
            column: 16
          },
          end: {
            line: 340,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 339,
            column: 18
          },
          end: {
            line: 339,
            column: 153
          }
        }, {
          start: {
            line: 340,
            column: 18
          },
          end: {
            line: 340,
            column: 20
          }
        }],
        line: 338
      },
      "26": {
        loc: {
          start: {
            line: 338,
            column: 16
          },
          end: {
            line: 338,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 16
          },
          end: {
            line: 338,
            column: 26
          }
        }, {
          start: {
            line: 338,
            column: 31
          },
          end: {
            line: 338,
            column: 56
          }
        }, {
          start: {
            line: 338,
            column: 60
          },
          end: {
            line: 338,
            column: 85
          }
        }],
        line: 338
      },
      "27": {
        loc: {
          start: {
            line: 341,
            column: 16
          },
          end: {
            line: 346,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 342,
            column: 18
          },
          end: {
            line: 345,
            column: 17
          }
        }, {
          start: {
            line: 346,
            column: 18
          },
          end: {
            line: 346,
            column: 20
          }
        }],
        line: 341
      },
      "28": {
        loc: {
          start: {
            line: 341,
            column: 16
          },
          end: {
            line: 341,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 16
          },
          end: {
            line: 341,
            column: 26
          }
        }, {
          start: {
            line: 341,
            column: 30
          },
          end: {
            line: 341,
            column: 55
          }
        }],
        line: 341
      },
      "29": {
        loc: {
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 352,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 348,
            column: 18
          },
          end: {
            line: 351,
            column: 17
          }
        }, {
          start: {
            line: 352,
            column: 18
          },
          end: {
            line: 352,
            column: 20
          }
        }],
        line: 347
      },
      "30": {
        loc: {
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 347,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 347,
            column: 26
          }
        }, {
          start: {
            line: 347,
            column: 30
          },
          end: {
            line: 347,
            column: 55
          }
        }],
        line: 347
      },
      "31": {
        loc: {
          start: {
            line: 355,
            column: 57
          },
          end: {
            line: 355,
            column: 86
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 355,
            column: 76
          },
          end: {
            line: 355,
            column: 86
          }
        }],
        line: 355
      },
      "32": {
        loc: {
          start: {
            line: 356,
            column: 26
          },
          end: {
            line: 356,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 356,
            column: 41
          },
          end: {
            line: 356,
            column: 53
          }
        }, {
          start: {
            line: 356,
            column: 56
          },
          end: {
            line: 356,
            column: 151
          }
        }],
        line: 356
      },
      "33": {
        loc: {
          start: {
            line: 357,
            column: 30
          },
          end: {
            line: 357,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 357,
            column: 43
          },
          end: {
            line: 357,
            column: 47
          }
        }, {
          start: {
            line: 357,
            column: 50
          },
          end: {
            line: 357,
            column: 55
          }
        }],
        line: 357
      },
      "34": {
        loc: {
          start: {
            line: 391,
            column: 20
          },
          end: {
            line: 396,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 392,
            column: 22
          },
          end: {
            line: 395,
            column: 21
          }
        }, {
          start: {
            line: 396,
            column: 22
          },
          end: {
            line: 396,
            column: 24
          }
        }],
        line: 391
      },
      "35": {
        loc: {
          start: {
            line: 391,
            column: 20
          },
          end: {
            line: 391,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 20
          },
          end: {
            line: 391,
            column: 30
          }
        }, {
          start: {
            line: 391,
            column: 34
          },
          end: {
            line: 391,
            column: 59
          }
        }],
        line: 391
      },
      "36": {
        loc: {
          start: {
            line: 426,
            column: 37
          },
          end: {
            line: 426,
            column: 251
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 426,
            column: 53
          },
          end: {
            line: 426,
            column: 156
          }
        }, {
          start: {
            line: 426,
            column: 159
          },
          end: {
            line: 426,
            column: 251
          }
        }],
        line: 426
      },
      "37": {
        loc: {
          start: {
            line: 427,
            column: 16
          },
          end: {
            line: 427,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 427,
            column: 16
          },
          end: {
            line: 427,
            column: 26
          }
        }, {
          start: {
            line: 427,
            column: 30
          },
          end: {
            line: 427,
            column: 113
          }
        }],
        line: 427
      },
      "38": {
        loc: {
          start: {
            line: 434,
            column: 40
          },
          end: {
            line: 434,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 434,
            column: 56
          },
          end: {
            line: 434,
            column: 61
          }
        }],
        line: 434
      },
      "39": {
        loc: {
          start: {
            line: 434,
            column: 63
          },
          end: {
            line: 434,
            column: 86
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 434,
            column: 79
          },
          end: {
            line: 434,
            column: 86
          }
        }],
        line: 434
      },
      "40": {
        loc: {
          start: {
            line: 435,
            column: 26
          },
          end: {
            line: 435,
            column: 148
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 435,
            column: 41
          },
          end: {
            line: 435,
            column: 53
          }
        }, {
          start: {
            line: 435,
            column: 56
          },
          end: {
            line: 435,
            column: 148
          }
        }],
        line: 435
      },
      "41": {
        loc: {
          start: {
            line: 447,
            column: 37
          },
          end: {
            line: 447,
            column: 251
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 447,
            column: 53
          },
          end: {
            line: 447,
            column: 156
          }
        }, {
          start: {
            line: 447,
            column: 159
          },
          end: {
            line: 447,
            column: 251
          }
        }],
        line: 447
      },
      "42": {
        loc: {
          start: {
            line: 454,
            column: 27
          },
          end: {
            line: 454,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 454,
            column: 43
          },
          end: {
            line: 454,
            column: 50
          }
        }],
        line: 454
      },
      "43": {
        loc: {
          start: {
            line: 474,
            column: 42
          },
          end: {
            line: 474,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 474,
            column: 58
          },
          end: {
            line: 474,
            column: 63
          }
        }],
        line: 474
      },
      "44": {
        loc: {
          start: {
            line: 474,
            column: 65
          },
          end: {
            line: 474,
            column: 88
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 474,
            column: 81
          },
          end: {
            line: 474,
            column: 88
          }
        }],
        line: 474
      },
      "45": {
        loc: {
          start: {
            line: 475,
            column: 26
          },
          end: {
            line: 475,
            column: 150
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 475,
            column: 41
          },
          end: {
            line: 475,
            column: 53
          }
        }, {
          start: {
            line: 475,
            column: 56
          },
          end: {
            line: 475,
            column: 150
          }
        }],
        line: 475
      },
      "46": {
        loc: {
          start: {
            line: 502,
            column: 37
          },
          end: {
            line: 504,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 503,
            column: 18
          },
          end: {
            line: 503,
            column: 421
          }
        }, {
          start: {
            line: 504,
            column: 18
          },
          end: {
            line: 504,
            column: 110
          }
        }],
        line: 502
      },
      "47": {
        loc: {
          start: {
            line: 512,
            column: 41
          },
          end: {
            line: 512,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 512,
            column: 57
          },
          end: {
            line: 512,
            column: 62
          }
        }],
        line: 512
      },
      "48": {
        loc: {
          start: {
            line: 512,
            column: 64
          },
          end: {
            line: 512,
            column: 87
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 512,
            column: 80
          },
          end: {
            line: 512,
            column: 87
          }
        }],
        line: 512
      },
      "49": {
        loc: {
          start: {
            line: 513,
            column: 26
          },
          end: {
            line: 513,
            column: 189
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 513,
            column: 41
          },
          end: {
            line: 513,
            column: 53
          }
        }, {
          start: {
            line: 513,
            column: 56
          },
          end: {
            line: 513,
            column: 189
          }
        }],
        line: 513
      },
      "50": {
        loc: {
          start: {
            line: 523,
            column: 29
          },
          end: {
            line: 523,
            column: 136
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 523,
            column: 45
          },
          end: {
            line: 523,
            column: 89
          }
        }, {
          start: {
            line: 523,
            column: 92
          },
          end: {
            line: 523,
            column: 136
          }
        }],
        line: 523
      },
      "51": {
        loc: {
          start: {
            line: 539,
            column: 37
          },
          end: {
            line: 539,
            column: 251
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 539,
            column: 53
          },
          end: {
            line: 539,
            column: 156
          }
        }, {
          start: {
            line: 539,
            column: 159
          },
          end: {
            line: 539,
            column: 251
          }
        }],
        line: 539
      },
      "52": {
        loc: {
          start: {
            line: 547,
            column: 57
          },
          end: {
            line: 547,
            column: 86
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 547,
            column: 76
          },
          end: {
            line: 547,
            column: 86
          }
        }],
        line: 547
      },
      "53": {
        loc: {
          start: {
            line: 548,
            column: 26
          },
          end: {
            line: 548,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 548,
            column: 41
          },
          end: {
            line: 548,
            column: 53
          }
        }, {
          start: {
            line: 548,
            column: 56
          },
          end: {
            line: 548,
            column: 151
          }
        }],
        line: 548
      },
      "54": {
        loc: {
          start: {
            line: 549,
            column: 30
          },
          end: {
            line: 549,
            column: 55
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 549,
            column: 43
          },
          end: {
            line: 549,
            column: 47
          }
        }, {
          start: {
            line: 549,
            column: 50
          },
          end: {
            line: 549,
            column: 55
          }
        }],
        line: 549
      },
      "55": {
        loc: {
          start: {
            line: 611,
            column: 37
          },
          end: {
            line: 611,
            column: 251
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 611,
            column: 53
          },
          end: {
            line: 611,
            column: 156
          }
        }, {
          start: {
            line: 611,
            column: 159
          },
          end: {
            line: 611,
            column: 251
          }
        }],
        line: 611
      },
      "56": {
        loc: {
          start: {
            line: 612,
            column: 16
          },
          end: {
            line: 612,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 612,
            column: 16
          },
          end: {
            line: 612,
            column: 26
          }
        }, {
          start: {
            line: 612,
            column: 30
          },
          end: {
            line: 612,
            column: 113
          }
        }],
        line: 612
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0],
      "16": [0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0],
      "39": [0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0],
      "43": [0],
      "44": [0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0],
      "48": [0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      file: "/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/resources.ts",
      sources: ["/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/resources.ts"],
      names: [],
      mappings: "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",
      sourcesContent: ["import { DynamoDB, AppSync, IAM, Fn, StringParameter, NumberParameter, Refs, IntrinsicFunction, DeletionPolicy } from 'cloudform-types';\nimport Output from 'cloudform-types/types/output';\nimport {\n  DynamoDBMappingTemplate,\n  printBlock,\n  str,\n  print,\n  ref,\n  obj,\n  set,\n  nul,\n  ifElse,\n  compoundExpression,\n  qref,\n  bool,\n  equals,\n  iff,\n  raw,\n  comment,\n  forEach,\n  and,\n} from 'graphql-mapping-template';\nimport {\n  ResourceConstants,\n  plurality,\n  graphqlName,\n  toUpper,\n  ModelResourceIDs,\n  SyncResourceIDs,\n  getBaseType,\n} from 'graphql-transformer-common';\nimport { plural } from 'pluralize';\nimport { SyncConfig, SyncUtils } from 'graphql-transformer-core';\nimport Template from 'cloudform-types/types/template';\nimport md5 from 'md5';\nimport { InputObjectTypeDefinitionNode } from 'graphql';\n\ntype MutationResolverInput = {\n  type: string;\n  syncConfig: SyncConfig;\n  nameOverride?: string;\n  mutationTypeName?: string;\n  timestamps?: {\n    createdAtField?: string;\n    updatedAtField?: string;\n  };\n};\n\nexport class ResourceFactory {\n  public makeParams() {\n    return {\n      [ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS]: new NumberParameter({\n        Description: 'The number of read IOPS the table should support.',\n        Default: 5,\n      }),\n      [ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS]: new NumberParameter({\n        Description: 'The number of write IOPS the table should support.',\n        Default: 5,\n      }),\n      [ResourceConstants.PARAMETERS.DynamoDBBillingMode]: new StringParameter({\n        Description: 'Configure @model types to create DynamoDB tables with PAY_PER_REQUEST or PROVISIONED billing modes.',\n        Default: 'PAY_PER_REQUEST',\n        AllowedValues: ['PAY_PER_REQUEST', 'PROVISIONED'],\n      }),\n      [ResourceConstants.PARAMETERS.DynamoDBEnablePointInTimeRecovery]: new StringParameter({\n        Description: 'Whether to enable Point in Time Recovery on the table',\n        Default: 'false',\n        AllowedValues: ['true', 'false'],\n      }),\n      [ResourceConstants.PARAMETERS.DynamoDBEnableServerSideEncryption]: new StringParameter({\n        Description: 'Enable server side encryption powered by KMS.',\n        Default: 'true',\n        AllowedValues: ['true', 'false'],\n      }),\n    };\n  }\n\n  /**\n   * Creates the barebones template for an application.\n   */\n  public initTemplate(): Template {\n    return {\n      Parameters: this.makeParams(),\n      Resources: {\n        [ResourceConstants.RESOURCES.GraphQLAPILogicalID]: this.makeAppSyncAPI(),\n      },\n      Outputs: {\n        [ResourceConstants.OUTPUTS.GraphQLAPIIdOutput]: this.makeAPIIDOutput(),\n        [ResourceConstants.OUTPUTS.GraphQLAPIEndpointOutput]: this.makeAPIEndpointOutput(),\n      },\n      Conditions: {\n        [ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling]: Fn.Equals(\n          Fn.Ref(ResourceConstants.PARAMETERS.DynamoDBBillingMode),\n          'PAY_PER_REQUEST',\n        ),\n\n        [ResourceConstants.CONDITIONS.ShouldUsePointInTimeRecovery]: Fn.Equals(\n          Fn.Ref(ResourceConstants.PARAMETERS.DynamoDBEnablePointInTimeRecovery),\n          'true',\n        ),\n        [ResourceConstants.CONDITIONS.ShouldUseServerSideEncryption]: Fn.Equals(\n          Fn.Ref(ResourceConstants.PARAMETERS.DynamoDBEnableServerSideEncryption),\n          'true',\n        ),\n      },\n    };\n  }\n\n  /**\n   * Create the AppSync API.\n   */\n  public makeAppSyncAPI() {\n    return new AppSync.GraphQLApi({\n      Name: Fn.If(\n        ResourceConstants.CONDITIONS.HasEnvironmentParameter,\n        Fn.Join('-', [Fn.Ref(ResourceConstants.PARAMETERS.AppSyncApiName), Fn.Ref(ResourceConstants.PARAMETERS.Env)]),\n        Fn.Ref(ResourceConstants.PARAMETERS.AppSyncApiName),\n      ),\n      AuthenticationType: 'API_KEY',\n    });\n  }\n\n  public makeAppSyncSchema(schema: string) {\n    return new AppSync.GraphQLSchema({\n      ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      Definition: schema,\n    });\n  }\n\n  /**\n   * Outputs\n   */\n  public makeAPIIDOutput(): Output {\n    return {\n      Description: 'Your GraphQL API ID.',\n      Value: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      Export: {\n        Name: Fn.Join(':', [Refs.StackName, 'GraphQLApiId']),\n      },\n    };\n  }\n\n  public makeAPIEndpointOutput(): Output {\n    return {\n      Description: 'Your GraphQL API endpoint.',\n      Value: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'GraphQLUrl'),\n      Export: {\n        Name: Fn.Join(':', [Refs.StackName, 'GraphQLApiEndpoint']),\n      },\n    };\n  }\n\n  public makeTableStreamArnOutput(resourceId: string): Output {\n    return {\n      Description: 'Your DynamoDB table StreamArn.',\n      Value: Fn.GetAtt(resourceId, 'StreamArn'),\n      Export: {\n        Name: Fn.Join(':', [Fn.Ref(ResourceConstants.PARAMETERS.AppSyncApiId), 'GetAtt', resourceId, 'StreamArn']),\n      },\n    };\n  }\n\n  public makeDataSourceOutput(resourceId: string): Output {\n    return {\n      Description: 'Your model DataSource name.',\n      Value: Fn.GetAtt(resourceId, 'Name'),\n      Export: {\n        Name: Fn.Join(':', [Fn.Ref(ResourceConstants.PARAMETERS.AppSyncApiId), 'GetAtt', resourceId, 'Name']),\n      },\n    };\n  }\n\n  public makeTableNameOutput(resourceId: string): Output {\n    return {\n      Description: 'Your DynamoDB table name.',\n      Value: Fn.Ref(resourceId),\n      Export: {\n        Name: Fn.Join(':', [Fn.Ref(ResourceConstants.PARAMETERS.AppSyncApiId), 'GetAtt', resourceId, 'Name']),\n      },\n    };\n  }\n\n  /**\n   * Create a DynamoDB table for a specific type.\n   */\n  public makeModelTable(\n    typeName: string,\n    hashKey: string = 'id',\n    rangeKey?: string,\n    deletionPolicy: DeletionPolicy = DeletionPolicy.Delete,\n    isSyncEnabled: boolean = false,\n  ) {\n    const keySchema =\n      hashKey && rangeKey\n        ? [\n            {\n              AttributeName: hashKey,\n              KeyType: 'HASH',\n            },\n            {\n              AttributeName: rangeKey,\n              KeyType: 'RANGE',\n            },\n          ]\n        : [{ AttributeName: hashKey, KeyType: 'HASH' }];\n    const attributeDefinitions =\n      hashKey && rangeKey\n        ? [\n            {\n              AttributeName: hashKey,\n              AttributeType: 'S',\n            },\n            {\n              AttributeName: rangeKey,\n              AttributeType: 'S',\n            },\n          ]\n        : [{ AttributeName: hashKey, AttributeType: 'S' }];\n    return new DynamoDB.Table({\n      TableName: this.dynamoDBTableName(typeName),\n      KeySchema: keySchema,\n      AttributeDefinitions: attributeDefinitions,\n      StreamSpecification: {\n        StreamViewType: 'NEW_AND_OLD_IMAGES',\n      },\n      BillingMode: Fn.If(ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling, 'PAY_PER_REQUEST', Refs.NoValue),\n      ProvisionedThroughput: Fn.If(ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling, Refs.NoValue, {\n        ReadCapacityUnits: Fn.Ref(ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS),\n        WriteCapacityUnits: Fn.Ref(ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS),\n      }) as any,\n      SSESpecification: {\n        SSEEnabled: Fn.If(ResourceConstants.CONDITIONS.ShouldUseServerSideEncryption, true, false),\n      },\n      PointInTimeRecoverySpecification: Fn.If(\n        ResourceConstants.CONDITIONS.ShouldUsePointInTimeRecovery,\n        {\n          PointInTimeRecoveryEnabled: true,\n        },\n        Refs.NoValue,\n      ) as any,\n      ...(isSyncEnabled && {\n        TimeToLiveSpecification: SyncUtils.syncTTLConfig(),\n      }),\n    }).deletionPolicy(deletionPolicy);\n  }\n\n  private dynamoDBTableName(typeName: string): IntrinsicFunction {\n    return Fn.If(\n      ResourceConstants.CONDITIONS.HasEnvironmentParameter,\n      Fn.Join('-', [\n        typeName,\n        Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n        Fn.Ref(ResourceConstants.PARAMETERS.Env),\n      ]),\n      Fn.Join('-', [typeName, Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId')]),\n    );\n  }\n\n  /**\n   * Create a single role that has access to all the resources created by the\n   * transform.\n   * @param name  The name of the IAM role to create.\n   */\n  public makeIAMRole(typeName: string, syncConfig?: SyncConfig) {\n    return new IAM.Role({\n      RoleName: Fn.If(\n        ResourceConstants.CONDITIONS.HasEnvironmentParameter,\n        Fn.Join('-', [\n          typeName.slice(0, 14) + md5(typeName).slice(15, 21), // max of 64. 64-10-26-4-3 = 21\n          'role', // 4\n          Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'), // 26\n          Fn.Ref(ResourceConstants.PARAMETERS.Env), // 10\n        ]),\n        Fn.Join('-', [\n          typeName.slice(0, 24) + md5(typeName).slice(25, 31), // max of 64. 64-26-4-3 = 31\n          'role',\n          Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n        ]),\n      ),\n      AssumeRolePolicyDocument: {\n        Version: '2012-10-17',\n        Statement: [\n          {\n            Effect: 'Allow',\n            Principal: {\n              Service: 'appsync.amazonaws.com',\n            },\n            Action: 'sts:AssumeRole',\n          },\n        ],\n      },\n      Policies: [\n        new IAM.Role.Policy({\n          PolicyName: 'DynamoDBAccess',\n          PolicyDocument: {\n            Version: '2012-10-17',\n            Statement: [\n              {\n                Effect: 'Allow',\n                Action: [\n                  'dynamodb:BatchGetItem',\n                  'dynamodb:BatchWriteItem',\n                  'dynamodb:PutItem',\n                  'dynamodb:DeleteItem',\n                  'dynamodb:GetItem',\n                  'dynamodb:Scan',\n                  'dynamodb:Query',\n                  'dynamodb:UpdateItem',\n                ],\n                Resource: [\n                  Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}', {\n                    tablename: this.dynamoDBTableName(typeName),\n                  }),\n                  Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*', {\n                    tablename: this.dynamoDBTableName(typeName),\n                  }),\n                  ...(syncConfig\n                    ? [\n                        Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}', {\n                          tablename: Fn.If(\n                            ResourceConstants.CONDITIONS.HasEnvironmentParameter,\n                            Fn.Join('-', [\n                              SyncResourceIDs.syncTableName,\n                              Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n                              Fn.Ref(ResourceConstants.PARAMETERS.Env),\n                            ]),\n                            Fn.Join('-', [\n                              SyncResourceIDs.syncTableName,\n                              Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n                            ]),\n                          ),\n                        }),\n                        Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*', {\n                          tablename: Fn.If(\n                            ResourceConstants.CONDITIONS.HasEnvironmentParameter,\n                            Fn.Join('-', [\n                              SyncResourceIDs.syncTableName,\n                              Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n                              Fn.Ref(ResourceConstants.PARAMETERS.Env),\n                            ]),\n                            Fn.Join('-', [\n                              SyncResourceIDs.syncTableName,\n                              Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n                            ]),\n                          ),\n                        }),\n                      ]\n                    : []),\n                ],\n              },\n            ],\n          },\n        }),\n        ...(syncConfig && SyncUtils.isLambdaSyncConfig(syncConfig)\n          ? [SyncUtils.createSyncLambdaIAMPolicy(syncConfig.LambdaConflictHandler)]\n          : []),\n      ],\n    });\n  }\n\n  /**\n   * Given the name of a data source and optional logical id return a CF\n   * spec for a data source pointing to the dynamodb table.\n   */\n  public makeDynamoDBDataSource(tableId: string, iamRoleLogicalID: string, typeName: string, isSyncEnabled: boolean = false) {\n    return new AppSync.DataSource({\n      ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      Name: tableId,\n      Type: 'AMAZON_DYNAMODB',\n      ServiceRoleArn: Fn.GetAtt(iamRoleLogicalID, 'Arn'),\n      DynamoDBConfig: {\n        AwsRegion: Refs.Region,\n        TableName: this.dynamoDBTableName(typeName),\n        ...(isSyncEnabled && {\n          DeltaSyncConfig: SyncUtils.syncDataSourceConfig(),\n          Versioned: true,\n        }),\n      },\n    }).dependsOn([iamRoleLogicalID]);\n  }\n\n  /**\n   * Create a resolver that creates an item in DynamoDB.\n   * @param type\n   */\n  public makeCreateResolver({ type, nameOverride, syncConfig, mutationTypeName = 'Mutation' }: MutationResolverInput) {\n    const fieldName = nameOverride ? nameOverride : graphqlName('create' + toUpper(type));\n    return {\n      dataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      fieldName: fieldName,\n      typeName: mutationTypeName,\n      requestMappingTemplate: printBlock('Prepare DynamoDB PutItem Request')(\n        compoundExpression([\n          qref(`$context.args.input.put(\"__typename\", \"${type}\")`),\n          set(\n            ref('condition'),\n            obj({\n              expression: str('attribute_not_exists(#id)'),\n              expressionNames: obj({\n                '#id': str('id'),\n              }),\n            }),\n          ),\n          iff(\n            ref('context.args.condition'),\n            compoundExpression([\n              set(ref('condition.expressionValues'), obj({})),\n              set(\n                ref('conditionFilterExpressions'),\n                raw('$util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition))'),\n              ),\n              // tslint:disable-next-line\n              qref(`$condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\")`),\n              qref(`$condition.expressionNames.putAll($conditionFilterExpressions.expressionNames)`),\n              qref(`$condition.expressionValues.putAll($conditionFilterExpressions.expressionValues)`),\n            ]),\n          ),\n          iff(\n            and([ref('condition.expressionValues'), raw('$condition.expressionValues.size() == 0')]),\n            set(\n              ref('condition'),\n              obj({\n                expression: ref('condition.expression'),\n                expressionNames: ref('condition.expressionNames'),\n              }),\n            ),\n          ),\n          DynamoDBMappingTemplate.putItem(\n            {\n              key: ifElse(\n                ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n                raw(`$util.toJson(\\$${ResourceConstants.SNIPPETS.ModelObjectKey})`),\n                obj({\n                  id: raw(`$util.dynamodb.toDynamoDBJson($ctx.args.input.id)`),\n                }),\n                true,\n              ),\n              attributeValues: ref('util.dynamodb.toMapValuesJson($context.args.input)'),\n              condition: ref('util.toJson($condition)'),\n            },\n            syncConfig ? '2018-05-29' : '2017-02-28',\n          ),\n        ]),\n      ),\n      responseMappingTemplate: syncConfig ? print(DynamoDBMappingTemplate.dynamoDBResponse()) : print(ref('util.toJson($ctx.result)')),\n      ...(syncConfig && { SyncConfig: SyncUtils.syncResolverConfig(syncConfig) }),\n    };\n  }\n\n  public initalizeDefaultInputForCreateMutation(input: InputObjectTypeDefinitionNode, timestamps): string {\n    const hasDefaultIdField = input.fields?.find(field => field.name.value === 'id' && ['ID', 'String'].includes(getBaseType(field.type)));\n    return printBlock('Set default values')(\n      compoundExpression([\n        ...(hasDefaultIdField ? [qref(`$context.args.input.put(\"id\", $util.defaultIfNull($ctx.args.input.id, $util.autoId()))`)] : []),\n        ...(timestamps && (timestamps.createdAtField || timestamps.updatedAtField)\n          ? [set(ref('createdAt'), ref('util.time.nowISO8601()'))]\n          : []),\n        ...(timestamps && timestamps.createdAtField\n          ? [\n              comment(`Automatically set the createdAt timestamp.`),\n              qref(\n                `$context.args.input.put(\"${timestamps.createdAtField}\", $util.defaultIfNull($ctx.args.input.${timestamps.createdAtField}, $createdAt))`,\n              ),\n            ]\n          : []),\n        ...(timestamps && timestamps.updatedAtField\n          ? [\n              comment(`Automatically set the updatedAt timestamp.`),\n              qref(\n                `$context.args.input.put(\"${timestamps.updatedAtField}\", $util.defaultIfNull($ctx.args.input.${timestamps.updatedAtField}, $createdAt))`,\n              ),\n            ]\n          : []),\n      ]),\n    );\n  }\n\n  public makeUpdateResolver({ type, nameOverride, syncConfig, mutationTypeName = 'Mutation', timestamps }: MutationResolverInput) {\n    const fieldName = nameOverride ? nameOverride : graphqlName(`update` + toUpper(type));\n    const isSyncEnabled = syncConfig ? true : false;\n    return {\n      ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      dataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      fieldName: fieldName,\n      typeName: mutationTypeName,\n      requestMappingTemplate: print(\n        compoundExpression([\n          ifElse(\n            raw(`$${ResourceConstants.SNIPPETS.AuthCondition} && $${ResourceConstants.SNIPPETS.AuthCondition}.expression != \"\"`),\n            compoundExpression([\n              set(ref('condition'), ref(ResourceConstants.SNIPPETS.AuthCondition)),\n              ifElse(\n                ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n                forEach(ref('entry'), ref(`${ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [\n                  qref('$condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\")'),\n                  qref('$condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\")'),\n                ]),\n                compoundExpression([\n                  qref('$condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\")'),\n                  qref('$condition.expressionNames.put(\"#id\", \"id\")'),\n                ]),\n              ),\n            ]),\n            ifElse(\n              ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n              compoundExpression([\n                set(\n                  ref('condition'),\n                  obj({\n                    expression: str(''),\n                    expressionNames: obj({}),\n                    expressionValues: obj({}),\n                  }),\n                ),\n                forEach(ref('entry'), ref(`${ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [\n                  ifElse(\n                    raw('$velocityCount == 1'),\n                    qref('$condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\")'),\n                    qref('$condition.put(\\\n\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\")'),\n                  ),\n                  qref('$condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\")'),\n                ]),\n              ]),\n              set(\n                ref('condition'),\n                obj({\n                  expression: str('attribute_exists(#id)'),\n                  expressionNames: obj({\n                    '#id': str('id'),\n                  }),\n                  expressionValues: obj({}),\n                }),\n              ),\n            ),\n          ),\n          ...(timestamps && timestamps.updatedAtField\n            ? [\n                comment(`Automatically set the updatedAt timestamp.`),\n                qref(\n                  `$context.args.input.put(\"${timestamps.updatedAtField}\", $util.defaultIfNull($ctx.args.input.${timestamps.updatedAtField}, $util.time.nowISO8601()))`,\n                ),\n              ]\n            : []),\n          qref(`$context.args.input.put(\"__typename\", \"${type}\")`),\n          comment('Update condition if type is @versioned'),\n          iff(\n            ref(ResourceConstants.SNIPPETS.VersionedCondition),\n            compoundExpression([\n              // tslint:disable-next-line\n              qref(\n                `$condition.put(\"expression\", \"($condition.expression) AND $${ResourceConstants.SNIPPETS.VersionedCondition}.expression\")`,\n              ),\n              qref(`$condition.expressionNames.putAll($${ResourceConstants.SNIPPETS.VersionedCondition}.expressionNames)`),\n              qref(`$condition.expressionValues.putAll($${ResourceConstants.SNIPPETS.VersionedCondition}.expressionValues)`),\n            ]),\n          ),\n          iff(\n            ref('context.args.condition'),\n            compoundExpression([\n              set(\n                ref('conditionFilterExpressions'),\n                raw('$util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition))'),\n              ),\n              // tslint:disable-next-line\n              qref(`$condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\")`),\n              qref(`$condition.expressionNames.putAll($conditionFilterExpressions.expressionNames)`),\n              qref(`$condition.expressionValues.putAll($conditionFilterExpressions.expressionValues)`),\n            ]),\n          ),\n          iff(\n            and([ref('condition.expressionValues'), raw('$condition.expressionValues.size() == 0')]),\n            set(\n              ref('condition'),\n              obj({\n                expression: ref('condition.expression'),\n                expressionNames: ref('condition.expressionNames'),\n              }),\n            ),\n          ),\n          DynamoDBMappingTemplate.updateItem({\n            key: ifElse(\n              ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n              raw(`$util.toJson(\\$${ResourceConstants.SNIPPETS.ModelObjectKey})`),\n              obj({\n                id: obj({ S: ref('util.toJson($context.args.input.id)') }),\n              }),\n              true,\n            ),\n            condition: ref('util.toJson($condition)'),\n            objectKeyVariable: ResourceConstants.SNIPPETS.ModelObjectKey,\n            nameOverrideMap: ResourceConstants.SNIPPETS.DynamoDBNameOverrideMap,\n            isSyncEnabled,\n          }),\n        ]),\n      ),\n      responseMappingTemplate: isSyncEnabled ? print(DynamoDBMappingTemplate.dynamoDBResponse()) : print(ref('util.toJson($ctx.result)')),\n      ...(syncConfig && { SyncConfig: SyncUtils.syncResolverConfig(syncConfig) }),\n    };\n  }\n\n  /**\n   * Create a resolver that creates an item in DynamoDB.\n   * @param type\n   */\n  public makeGetResolver(type: string, nameOverride?: string, isSyncEnabled: boolean = false, queryTypeName: string = 'Query') {\n    const fieldName = nameOverride ? nameOverride : graphqlName('get' + toUpper(type));\n    return {\n      apiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      dataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      fieldName: fieldName,\n      typeName: queryTypeName,\n      requestMappingTemplate: print(\n        DynamoDBMappingTemplate.getItem({\n          key: ifElse(\n            ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n            raw(`$util.toJson(\\$${ResourceConstants.SNIPPETS.ModelObjectKey})`),\n            obj({\n              id: ref('util.dynamodb.toDynamoDBJson($ctx.args.id)'),\n            }),\n            true,\n          ),\n          isSyncEnabled,\n        }),\n      ),\n      responseMappingTemplate: isSyncEnabled ? print(DynamoDBMappingTemplate.dynamoDBResponse()) : print(ref('util.toJson($ctx.result)')),\n    };\n  }\n\n  /**\n   * Create a resolver that syncs local storage with cloud storage\n   * @param type\n   */\n  public makeSyncResolver(type: string, queryTypeName: string = 'Query') {\n    const fieldName = graphqlName('sync' + toUpper(plural(type)));\n    return new AppSync.Resolver({\n      ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      DataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      FieldName: fieldName,\n      TypeName: queryTypeName,\n      RequestMappingTemplate: print(\n        DynamoDBMappingTemplate.syncItem({\n          filter: ifElse(ref('context.args.filter'), ref('util.transform.toDynamoDBFilterExpression($ctx.args.filter)'), nul()),\n          limit: ref(`util.defaultIfNull($ctx.args.limit, ${ResourceConstants.DEFAULT_SYNC_QUERY_PAGE_LIMIT})`),\n          lastSync: ref('util.toJson($util.defaultIfNull($ctx.args.lastSync, null))'),\n          nextToken: ref('util.toJson($util.defaultIfNull($ctx.args.nextToken, null))'),\n        }),\n      ),\n      ResponseMappingTemplate: print(DynamoDBMappingTemplate.dynamoDBResponse()),\n    });\n  }\n  /**\n   * Create a resolver that queries an item in DynamoDB.\n   * @param type\n   */\n  public makeQueryResolver(type: string, nameOverride?: string, isSyncEnabled: boolean = false, queryTypeName: string = 'Query') {\n    const fieldName = nameOverride ? nameOverride : graphqlName(`query${toUpper(type)}`);\n    return new AppSync.Resolver({\n      ApiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      DataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      FieldName: fieldName,\n      TypeName: queryTypeName,\n      RequestMappingTemplate: print(\n        compoundExpression([\n          set(ref('limit'), ref(`util.defaultIfNull($context.args.limit, ${ResourceConstants.DEFAULT_PAGE_LIMIT})`)),\n          DynamoDBMappingTemplate.query({\n            query: obj({\n              expression: str('#typename = :typename'),\n              expressionNames: obj({\n                '#typename': str('__typename'),\n              }),\n              expressionValues: obj({\n                ':typename': obj({\n                  S: str(type),\n                }),\n              }),\n            }),\n            scanIndexForward: ifElse(\n              ref('context.args.sortDirection'),\n              ifElse(equals(ref('context.args.sortDirection'), str('ASC')), bool(true), bool(false)),\n              bool(true),\n            ),\n            filter: ifElse(ref('context.args.filter'), ref('util.transform.toDynamoDBFilterExpression($ctx.args.filter)'), nul()),\n            limit: ref('limit'),\n            nextToken: ifElse(ref('context.args.nextToken'), ref('util.toJson($context.args.nextToken)'), nul()),\n            isSyncEnabled,\n          }),\n        ]),\n      ),\n      ResponseMappingTemplate: isSyncEnabled\n        ? print(\n            DynamoDBMappingTemplate.dynamoDBResponse(\n              compoundExpression([iff(raw('!$result'), set(ref('result'), ref('ctx.result'))), raw('$util.toJson($result)')]),\n            ),\n          )\n        : print(ref('util.toJson($ctx.result)')),\n    });\n  }\n\n  /**\n   * Create a resolver that lists items in DynamoDB.\n   * TODO: actually fill out the right filter expression. This is a placeholder only.\n   * @param type\n   */\n  public makeListResolver(type: string, nameOverride?: string, isSyncEnabled: boolean = false, queryTypeName: string = 'Query') {\n    const fieldName = nameOverride ? nameOverride : graphqlName('list' + plurality(toUpper(type)));\n    const requestVariable = 'ListRequest';\n    return {\n      apiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      dataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      fieldName: fieldName,\n      typeName: queryTypeName,\n      requestMappingTemplate: print(\n        compoundExpression([\n          set(ref('limit'), ref(`util.defaultIfNull($context.args.limit, ${ResourceConstants.DEFAULT_PAGE_LIMIT})`)),\n          set(\n            ref(requestVariable),\n            obj({\n              version: isSyncEnabled ? str('2018-05-29') : str('2017-02-28'),\n              limit: ref('limit'),\n            }),\n          ),\n          // PoI: Getting the snipper from stash\n          iff(ref('context.args.nextToken'), set(ref(`${requestVariable}.nextToken`), ref('context.args.nextToken'))),\n          iff(\n            ref('context.args.filter'),\n            set(ref(`${requestVariable}.filter`), ref('util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\")')),\n          ),\n          iff(ref('context.stash.metadata.index'), set(ref(`${requestVariable}.index`), ref('context.stash.metadata.index'))),\n          set(ref(ResourceConstants.SNIPPETS.ModelQueryExpression), ref(`ctx.stash.${ResourceConstants.SNIPPETS.ModelQueryExpression}`)),\n          ifElse(\n            raw(`!$util.isNull($${ResourceConstants.SNIPPETS.ModelQueryExpression})\n                        && !$util.isNullOrEmpty($${ResourceConstants.SNIPPETS.ModelQueryExpression}.expression)`),\n            compoundExpression([\n              qref(`$${requestVariable}.put(\"operation\", \"Query\")`),\n              qref(`$${requestVariable}.put(\"query\", $${ResourceConstants.SNIPPETS.ModelQueryExpression})`),\n              ifElse(\n                raw(`!$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == \"DESC\"`),\n                set(ref(`${requestVariable}.scanIndexForward`), bool(false)),\n                set(ref(`${requestVariable}.scanIndexForward`), bool(true)),\n              ),\n            ]),\n            qref(`$${requestVariable}.put(\"operation\", \"Scan\")`),\n          ),\n          raw(`$util.toJson($${requestVariable})`),\n        ]),\n      ),\n      responseMappingTemplate: isSyncEnabled ? print(DynamoDBMappingTemplate.dynamoDBResponse()) : print(ref('util.toJson($ctx.result)')),\n    };\n  }\n\n  /**\n   * Create a resolver that deletes an item from DynamoDB.\n   * @param type The name of the type to delete an item of.\n   * @param nameOverride A user provided override for the field name.\n   */\n  public makeDeleteResolver({ type, nameOverride, syncConfig, mutationTypeName = 'Mutation' }: MutationResolverInput) {\n    const fieldName = nameOverride ? nameOverride : graphqlName('delete' + toUpper(type));\n    const isSyncEnabled = syncConfig ? true : false;\n    return {\n      apiId: Fn.GetAtt(ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),\n      dataSourceName: Fn.GetAtt(ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),\n      fieldName: fieldName,\n      typeName: mutationTypeName,\n      requestMappingTemplate: print(\n        compoundExpression([\n          ifElse(\n            ref(ResourceConstants.SNIPPETS.AuthCondition),\n            compoundExpression([\n              set(ref('condition'), ref(ResourceConstants.SNIPPETS.AuthCondition)),\n              ifElse(\n                ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n                forEach(ref('entry'), ref(`${ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [\n                  qref('$condition.put(\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\")'),\n                  qref('$condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\")'),\n                ]),\n                compoundExpression([\n                  qref('$condition.put(\"expression\", \"$condition.expression AND attribute_exists(#id)\")'),\n                  qref('$condition.expressionNames.put(\"#id\", \"id\")'),\n                ]),\n              ),\n            ]),\n            ifElse(\n              ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n              compoundExpression([\n                set(\n                  ref('condition'),\n                  obj({\n                    expression: str(''),\n                    expressionNames: obj({}),\n                  }),\n                ),\n                forEach(ref('entry'), ref(`${ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [\n                  ifElse(\n                    raw('$velocityCount == 1'),\n                    qref('$condition.put(\"expression\", \"attribute_exists(#keyCondition$velocityCount)\")'),\n                    qref('$condition.put(\\\n\"expression\", \"$condition.expression AND attribute_exists(#keyCondition$velocityCount)\")'),\n                  ),\n                  qref('$condition.expressionNames.put(\"#keyCondition$velocityCount\", \"$entry.key\")'),\n                ]),\n              ]),\n              set(\n                ref('condition'),\n                obj({\n                  expression: str('attribute_exists(#id)'),\n                  expressionNames: obj({\n                    '#id': str('id'),\n                  }),\n                }),\n              ),\n            ),\n          ),\n          iff(\n            ref(ResourceConstants.SNIPPETS.VersionedCondition),\n            compoundExpression([\n              // tslint:disable-next-line\n              qref(\n                `$condition.put(\"expression\", \"($condition.expression) AND $${ResourceConstants.SNIPPETS.VersionedCondition}.expression\")`,\n              ),\n              qref(`$condition.expressionNames.putAll($${ResourceConstants.SNIPPETS.VersionedCondition}.expressionNames)`),\n              set(ref('expressionValues'), raw('$util.defaultIfNull($condition.expressionValues, {})')),\n              qref(`$expressionValues.putAll($${ResourceConstants.SNIPPETS.VersionedCondition}.expressionValues)`),\n              set(ref('condition.expressionValues'), ref('expressionValues')),\n            ]),\n          ),\n          iff(\n            ref('context.args.condition'),\n            compoundExpression([\n              set(\n                ref('conditionFilterExpressions'),\n                raw('$util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition))'),\n              ),\n              // tslint:disable-next-line\n              qref(`$condition.put(\"expression\", \"($condition.expression) AND $conditionFilterExpressions.expression\")`),\n              qref(`$condition.expressionNames.putAll($conditionFilterExpressions.expressionNames)`),\n              set(ref('conditionExpressionValues'), raw('$util.defaultIfNull($condition.expressionValues, {})')),\n              qref(`$conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues)`),\n              set(ref('condition.expressionValues'), ref('conditionExpressionValues')),\n              qref(`$condition.expressionValues.putAll($conditionFilterExpressions.expressionValues)`),\n            ]),\n          ),\n          iff(\n            and([ref('condition.expressionValues'), raw('$condition.expressionValues.size() == 0')]),\n            set(\n              ref('condition'),\n              obj({\n                expression: ref('condition.expression'),\n                expressionNames: ref('condition.expressionNames'),\n              }),\n            ),\n          ),\n          DynamoDBMappingTemplate.deleteItem({\n            key: ifElse(\n              ref(ResourceConstants.SNIPPETS.ModelObjectKey),\n              raw(`$util.toJson(\\$${ResourceConstants.SNIPPETS.ModelObjectKey})`),\n              obj({\n                id: ref('util.dynamodb.toDynamoDBJson($ctx.args.input.id)'),\n              }),\n              true,\n            ),\n            condition: ref('util.toJson($condition)'),\n            isSyncEnabled,\n          }),\n        ]),\n      ),\n      responseMappingTemplate: isSyncEnabled ? print(DynamoDBMappingTemplate.dynamoDBResponse()) : print(ref('util.toJson($ctx.result)')),\n      ...(syncConfig && { SyncConfig: SyncUtils.syncResolverConfig(syncConfig) }),\n    };\n  }\n}\n"]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "791ecff523d5427ada2def9595439f2ef539c92a"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1urykczn5e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1urykczn5e();

var __importDefault =
/* istanbul ignore next */
(cov_1urykczn5e().s[0]++,
/* istanbul ignore next */
(cov_1urykczn5e().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1urykczn5e().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1urykczn5e().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1urykczn5e().f[0]++;
  cov_1urykczn5e().s[1]++;
  return (
    /* istanbul ignore next */
    (cov_1urykczn5e().b[2][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1urykczn5e().b[2][1]++, mod.__esModule) ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[1][0]++, mod) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[1][1]++, {
      "default": mod
    })
  );
}));

/* istanbul ignore next */
cov_1urykczn5e().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1urykczn5e().s[3]++;
exports.ResourceFactory = void 0;
const cloudform_types_1 =
/* istanbul ignore next */
(cov_1urykczn5e().s[4]++, require("cloudform-types"));
const graphql_mapping_template_1 =
/* istanbul ignore next */
(cov_1urykczn5e().s[5]++, require("graphql-mapping-template"));
const graphql_transformer_common_1 =
/* istanbul ignore next */
(cov_1urykczn5e().s[6]++, require("graphql-transformer-common"));
const pluralize_1 =
/* istanbul ignore next */
(cov_1urykczn5e().s[7]++, require("pluralize"));
const graphql_transformer_core_1 =
/* istanbul ignore next */
(cov_1urykczn5e().s[8]++, require("graphql-transformer-core"));
const md5_1 =
/* istanbul ignore next */
(cov_1urykczn5e().s[9]++, __importDefault(require("md5")));

class ResourceFactory {
  makeParams() {
    /* istanbul ignore next */
    cov_1urykczn5e().f[1]++;
    cov_1urykczn5e().s[10]++;
    return {
      [graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS]: new cloudform_types_1.NumberParameter({
        Description: 'The number of read IOPS the table should support.',
        Default: 5
      }),
      [graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS]: new cloudform_types_1.NumberParameter({
        Description: 'The number of write IOPS the table should support.',
        Default: 5
      }),
      [graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBBillingMode]: new cloudform_types_1.StringParameter({
        Description: 'Configure @model types to create DynamoDB tables with PAY_PER_REQUEST or PROVISIONED billing modes.',
        Default: 'PAY_PER_REQUEST',
        AllowedValues: ['PAY_PER_REQUEST', 'PROVISIONED']
      }),
      [graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBEnablePointInTimeRecovery]: new cloudform_types_1.StringParameter({
        Description: 'Whether to enable Point in Time Recovery on the table',
        Default: 'false',
        AllowedValues: ['true', 'false']
      }),
      [graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBEnableServerSideEncryption]: new cloudform_types_1.StringParameter({
        Description: 'Enable server side encryption powered by KMS.',
        Default: 'true',
        AllowedValues: ['true', 'false']
      })
    };
  }
  /**
   * Creates the barebones template for an application.
   */


  initTemplate() {
    /* istanbul ignore next */
    cov_1urykczn5e().f[2]++;
    cov_1urykczn5e().s[11]++;
    return {
      Parameters: this.makeParams(),
      Resources: {
        [graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID]: this.makeAppSyncAPI()
      },
      Outputs: {
        [graphql_transformer_common_1.ResourceConstants.OUTPUTS.GraphQLAPIIdOutput]: this.makeAPIIDOutput(),
        [graphql_transformer_common_1.ResourceConstants.OUTPUTS.GraphQLAPIEndpointOutput]: this.makeAPIEndpointOutput()
      },
      Conditions: {
        [graphql_transformer_common_1.ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling]: cloudform_types_1.Fn.Equals(cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBBillingMode), 'PAY_PER_REQUEST'),
        [graphql_transformer_common_1.ResourceConstants.CONDITIONS.ShouldUsePointInTimeRecovery]: cloudform_types_1.Fn.Equals(cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBEnablePointInTimeRecovery), 'true'),
        [graphql_transformer_common_1.ResourceConstants.CONDITIONS.ShouldUseServerSideEncryption]: cloudform_types_1.Fn.Equals(cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBEnableServerSideEncryption), 'true')
      }
    };
  }
  /**
   * Create the AppSync API.
   */


  makeAppSyncAPI() {
    /* istanbul ignore next */
    cov_1urykczn5e().f[3]++;
    cov_1urykczn5e().s[12]++;
    return new cloudform_types_1.AppSync.GraphQLApi({
      Name: cloudform_types_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.HasEnvironmentParameter, cloudform_types_1.Fn.Join('-', [cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AppSyncApiName), cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.Env)]), cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AppSyncApiName)),
      AuthenticationType: 'API_KEY'
    });
  }

  makeAppSyncSchema(schema) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[4]++;
    cov_1urykczn5e().s[13]++;
    return new cloudform_types_1.AppSync.GraphQLSchema({
      ApiId: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
      Definition: schema
    });
  }
  /**
   * Outputs
   */


  makeAPIIDOutput() {
    /* istanbul ignore next */
    cov_1urykczn5e().f[5]++;
    cov_1urykczn5e().s[14]++;
    return {
      Description: 'Your GraphQL API ID.',
      Value: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
      Export: {
        Name: cloudform_types_1.Fn.Join(':', [cloudform_types_1.Refs.StackName, 'GraphQLApiId'])
      }
    };
  }

  makeAPIEndpointOutput() {
    /* istanbul ignore next */
    cov_1urykczn5e().f[6]++;
    cov_1urykczn5e().s[15]++;
    return {
      Description: 'Your GraphQL API endpoint.',
      Value: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'GraphQLUrl'),
      Export: {
        Name: cloudform_types_1.Fn.Join(':', [cloudform_types_1.Refs.StackName, 'GraphQLApiEndpoint'])
      }
    };
  }

  makeTableStreamArnOutput(resourceId) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[7]++;
    cov_1urykczn5e().s[16]++;
    return {
      Description: 'Your DynamoDB table StreamArn.',
      Value: cloudform_types_1.Fn.GetAtt(resourceId, 'StreamArn'),
      Export: {
        Name: cloudform_types_1.Fn.Join(':', [cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AppSyncApiId), 'GetAtt', resourceId, 'StreamArn'])
      }
    };
  }

  makeDataSourceOutput(resourceId) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[8]++;
    cov_1urykczn5e().s[17]++;
    return {
      Description: 'Your model DataSource name.',
      Value: cloudform_types_1.Fn.GetAtt(resourceId, 'Name'),
      Export: {
        Name: cloudform_types_1.Fn.Join(':', [cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AppSyncApiId), 'GetAtt', resourceId, 'Name'])
      }
    };
  }

  makeTableNameOutput(resourceId) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[9]++;
    cov_1urykczn5e().s[18]++;
    return {
      Description: 'Your DynamoDB table name.',
      Value: cloudform_types_1.Fn.Ref(resourceId),
      Export: {
        Name: cloudform_types_1.Fn.Join(':', [cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AppSyncApiId), 'GetAtt', resourceId, 'Name'])
      }
    };
  }
  /**
   * Create a DynamoDB table for a specific type.
   */


  makeModelTable(typeName, hashKey =
  /* istanbul ignore next */
  (cov_1urykczn5e().b[3][0]++, 'id'), rangeKey, deletionPolicy =
  /* istanbul ignore next */
  (cov_1urykczn5e().b[4][0]++, cloudform_types_1.DeletionPolicy.Delete), isSyncEnabled =
  /* istanbul ignore next */
  (cov_1urykczn5e().b[5][0]++, false)) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[10]++;
    const keySchema =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[19]++,
    /* istanbul ignore next */
    (cov_1urykczn5e().b[7][0]++, hashKey) &&
    /* istanbul ignore next */
    (cov_1urykczn5e().b[7][1]++, rangeKey) ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[6][0]++, [{
      AttributeName: hashKey,
      KeyType: 'HASH'
    }, {
      AttributeName: rangeKey,
      KeyType: 'RANGE'
    }]) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[6][1]++, [{
      AttributeName: hashKey,
      KeyType: 'HASH'
    }]));
    const attributeDefinitions =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[20]++,
    /* istanbul ignore next */
    (cov_1urykczn5e().b[9][0]++, hashKey) &&
    /* istanbul ignore next */
    (cov_1urykczn5e().b[9][1]++, rangeKey) ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[8][0]++, [{
      AttributeName: hashKey,
      AttributeType: 'S'
    }, {
      AttributeName: rangeKey,
      AttributeType: 'S'
    }]) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[8][1]++, [{
      AttributeName: hashKey,
      AttributeType: 'S'
    }]));

    /* istanbul ignore next */
    cov_1urykczn5e().s[21]++;
    return new cloudform_types_1.DynamoDB.Table({
      TableName: this.dynamoDBTableName(typeName),
      KeySchema: keySchema,
      AttributeDefinitions: attributeDefinitions,
      StreamSpecification: {
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      },
      BillingMode: cloudform_types_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling, 'PAY_PER_REQUEST', cloudform_types_1.Refs.NoValue),
      ProvisionedThroughput: cloudform_types_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling, cloudform_types_1.Refs.NoValue, {
        ReadCapacityUnits: cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS),
        WriteCapacityUnits: cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS)
      }),
      SSESpecification: {
        SSEEnabled: cloudform_types_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.ShouldUseServerSideEncryption, true, false)
      },
      PointInTimeRecoverySpecification: cloudform_types_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.ShouldUsePointInTimeRecovery, {
        PointInTimeRecoveryEnabled: true
      }, cloudform_types_1.Refs.NoValue),
      ...(
      /* istanbul ignore next */
      (cov_1urykczn5e().b[10][0]++, isSyncEnabled) &&
      /* istanbul ignore next */
      (cov_1urykczn5e().b[10][1]++, {
        TimeToLiveSpecification: graphql_transformer_core_1.SyncUtils.syncTTLConfig()
      }))
    }).deletionPolicy(deletionPolicy);
  }

  dynamoDBTableName(typeName) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[11]++;
    cov_1urykczn5e().s[22]++;
    return cloudform_types_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.HasEnvironmentParameter, cloudform_types_1.Fn.Join('-', [typeName, cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'), cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.Env)]), cloudform_types_1.Fn.Join('-', [typeName, cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId')]));
  }
  /**
   * Create a single role that has access to all the resources created by the
   * transform.
   * @param name  The name of the IAM role to create.
   */


  makeIAMRole(typeName, syncConfig) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[12]++;
    cov_1urykczn5e().s[23]++;
    return new cloudform_types_1.IAM.Role({
      RoleName: cloudform_types_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.HasEnvironmentParameter, cloudform_types_1.Fn.Join('-', [typeName.slice(0, 14) + md5_1.default(typeName).slice(15, 21), 'role', cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'), cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.Env)]), cloudform_types_1.Fn.Join('-', [typeName.slice(0, 24) + md5_1.default(typeName).slice(25, 31), 'role', cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId')])),
      AssumeRolePolicyDocument: {
        Version: '2012-10-17',
        Statement: [{
          Effect: 'Allow',
          Principal: {
            Service: 'appsync.amazonaws.com'
          },
          Action: 'sts:AssumeRole'
        }]
      },
      Policies: [new cloudform_types_1.IAM.Role.Policy({
        PolicyName: 'DynamoDBAccess',
        PolicyDocument: {
          Version: '2012-10-17',
          Statement: [{
            Effect: 'Allow',
            Action: ['dynamodb:BatchGetItem', 'dynamodb:BatchWriteItem', 'dynamodb:PutItem', 'dynamodb:DeleteItem', 'dynamodb:GetItem', 'dynamodb:Scan', 'dynamodb:Query', 'dynamodb:UpdateItem'],
            Resource: [cloudform_types_1.Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}', {
              tablename: this.dynamoDBTableName(typeName)
            }), cloudform_types_1.Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*', {
              tablename: this.dynamoDBTableName(typeName)
            }), ...(syncConfig ?
            /* istanbul ignore next */
            (cov_1urykczn5e().b[11][0]++, [cloudform_types_1.Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}', {
              tablename: cloudform_types_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.HasEnvironmentParameter, cloudform_types_1.Fn.Join('-', [graphql_transformer_common_1.SyncResourceIDs.syncTableName, cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'), cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.Env)]), cloudform_types_1.Fn.Join('-', [graphql_transformer_common_1.SyncResourceIDs.syncTableName, cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId')]))
            }), cloudform_types_1.Fn.Sub('arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*', {
              tablename: cloudform_types_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.HasEnvironmentParameter, cloudform_types_1.Fn.Join('-', [graphql_transformer_common_1.SyncResourceIDs.syncTableName, cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'), cloudform_types_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.Env)]), cloudform_types_1.Fn.Join('-', [graphql_transformer_common_1.SyncResourceIDs.syncTableName, cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId')]))
            })]) :
            /* istanbul ignore next */
            (cov_1urykczn5e().b[11][1]++, []))]
          }]
        }
      }), ...(
      /* istanbul ignore next */
      (cov_1urykczn5e().b[13][0]++, syncConfig) &&
      /* istanbul ignore next */
      (cov_1urykczn5e().b[13][1]++, graphql_transformer_core_1.SyncUtils.isLambdaSyncConfig(syncConfig)) ?
      /* istanbul ignore next */
      (cov_1urykczn5e().b[12][0]++, [graphql_transformer_core_1.SyncUtils.createSyncLambdaIAMPolicy(syncConfig.LambdaConflictHandler)]) :
      /* istanbul ignore next */
      (cov_1urykczn5e().b[12][1]++, []))]
    });
  }
  /**
   * Given the name of a data source and optional logical id return a CF
   * spec for a data source pointing to the dynamodb table.
   */


  makeDynamoDBDataSource(tableId, iamRoleLogicalID, typeName, isSyncEnabled =
  /* istanbul ignore next */
  (cov_1urykczn5e().b[14][0]++, false)) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[13]++;
    cov_1urykczn5e().s[24]++;
    return new cloudform_types_1.AppSync.DataSource({
      ApiId: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
      Name: tableId,
      Type: 'AMAZON_DYNAMODB',
      ServiceRoleArn: cloudform_types_1.Fn.GetAtt(iamRoleLogicalID, 'Arn'),
      DynamoDBConfig: {
        AwsRegion: cloudform_types_1.Refs.Region,
        TableName: this.dynamoDBTableName(typeName),
        ...(
        /* istanbul ignore next */
        (cov_1urykczn5e().b[15][0]++, isSyncEnabled) &&
        /* istanbul ignore next */
        (cov_1urykczn5e().b[15][1]++, {
          DeltaSyncConfig: graphql_transformer_core_1.SyncUtils.syncDataSourceConfig(),
          Versioned: true
        }))
      }
    }).dependsOn([iamRoleLogicalID]);
  }
  /**
   * Create a resolver that creates an item in DynamoDB.
   * @param type
   */


  makeCreateResolver({
    type,
    nameOverride,
    syncConfig,
    mutationTypeName =
    /* istanbul ignore next */
    (cov_1urykczn5e().b[16][0]++, 'Mutation')
  }) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[14]++;
    const fieldName =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[25]++, nameOverride ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[17][0]++, nameOverride) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[17][1]++, graphql_transformer_common_1.graphqlName('create' + graphql_transformer_common_1.toUpper(type))));

    /* istanbul ignore next */
    cov_1urykczn5e().s[26]++;
    return {
      dataSourceName: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),
      fieldName: fieldName,
      typeName: mutationTypeName,
      requestMappingTemplate: graphql_mapping_template_1.printBlock('Prepare DynamoDB PutItem Request')(graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.qref(`$context.args.input.put("__typename", "${type}")`), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition'), graphql_mapping_template_1.obj({
        expression: graphql_mapping_template_1.str('attribute_not_exists(#id)'),
        expressionNames: graphql_mapping_template_1.obj({
          '#id': graphql_mapping_template_1.str('id')
        })
      })), graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('context.args.condition'), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition.expressionValues'), graphql_mapping_template_1.obj({})), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('conditionFilterExpressions'), graphql_mapping_template_1.raw('$util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition))')), // tslint:disable-next-line
      graphql_mapping_template_1.qref(`$condition.put("expression", "($condition.expression) AND $conditionFilterExpressions.expression")`), graphql_mapping_template_1.qref(`$condition.expressionNames.putAll($conditionFilterExpressions.expressionNames)`), graphql_mapping_template_1.qref(`$condition.expressionValues.putAll($conditionFilterExpressions.expressionValues)`)])), graphql_mapping_template_1.iff(graphql_mapping_template_1.and([graphql_mapping_template_1.ref('condition.expressionValues'), graphql_mapping_template_1.raw('$condition.expressionValues.size() == 0')]), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition'), graphql_mapping_template_1.obj({
        expression: graphql_mapping_template_1.ref('condition.expression'),
        expressionNames: graphql_mapping_template_1.ref('condition.expressionNames')
      }))), graphql_mapping_template_1.DynamoDBMappingTemplate.putItem({
        key: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey), graphql_mapping_template_1.raw(`$util.toJson(\$${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey})`), graphql_mapping_template_1.obj({
          id: graphql_mapping_template_1.raw(`$util.dynamodb.toDynamoDBJson($ctx.args.input.id)`)
        }), true),
        attributeValues: graphql_mapping_template_1.ref('util.dynamodb.toMapValuesJson($context.args.input)'),
        condition: graphql_mapping_template_1.ref('util.toJson($condition)')
      }, syncConfig ?
      /* istanbul ignore next */
      (cov_1urykczn5e().b[18][0]++, '2018-05-29') :
      /* istanbul ignore next */
      (cov_1urykczn5e().b[18][1]++, '2017-02-28'))])),
      responseMappingTemplate: syncConfig ?
      /* istanbul ignore next */
      (cov_1urykczn5e().b[19][0]++, graphql_mapping_template_1.print(graphql_mapping_template_1.DynamoDBMappingTemplate.dynamoDBResponse())) :
      /* istanbul ignore next */
      (cov_1urykczn5e().b[19][1]++, graphql_mapping_template_1.print(graphql_mapping_template_1.ref('util.toJson($ctx.result)'))),
      ...(
      /* istanbul ignore next */
      (cov_1urykczn5e().b[20][0]++, syncConfig) &&
      /* istanbul ignore next */
      (cov_1urykczn5e().b[20][1]++, {
        SyncConfig: graphql_transformer_core_1.SyncUtils.syncResolverConfig(syncConfig)
      }))
    };
  }

  initalizeDefaultInputForCreateMutation(input, timestamps) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[15]++;

    var _a;

    const hasDefaultIdField =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[27]++,
    /* istanbul ignore next */
    (cov_1urykczn5e().b[22][0]++, (_a = input.fields) === null) ||
    /* istanbul ignore next */
    (cov_1urykczn5e().b[22][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[21][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[21][1]++, _a.find(field => {
      /* istanbul ignore next */
      cov_1urykczn5e().f[16]++;
      cov_1urykczn5e().s[28]++;
      return (
        /* istanbul ignore next */
        (cov_1urykczn5e().b[23][0]++, field.name.value === 'id') &&
        /* istanbul ignore next */
        (cov_1urykczn5e().b[23][1]++, ['ID', 'String'].includes(graphql_transformer_common_1.getBaseType(field.type)))
      );
    })));

    /* istanbul ignore next */
    cov_1urykczn5e().s[29]++;
    return graphql_mapping_template_1.printBlock('Set default values')(graphql_mapping_template_1.compoundExpression([...(hasDefaultIdField ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[24][0]++, [graphql_mapping_template_1.qref(`$context.args.input.put("id", $util.defaultIfNull($ctx.args.input.id, $util.autoId()))`)]) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[24][1]++, [])), ...(
    /* istanbul ignore next */
    (cov_1urykczn5e().b[26][0]++, timestamps) && (
    /* istanbul ignore next */
    (cov_1urykczn5e().b[26][1]++, timestamps.createdAtField) ||
    /* istanbul ignore next */
    (cov_1urykczn5e().b[26][2]++, timestamps.updatedAtField)) ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[25][0]++, [graphql_mapping_template_1.set(graphql_mapping_template_1.ref('createdAt'), graphql_mapping_template_1.ref('util.time.nowISO8601()'))]) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[25][1]++, [])), ...(
    /* istanbul ignore next */
    (cov_1urykczn5e().b[28][0]++, timestamps) &&
    /* istanbul ignore next */
    (cov_1urykczn5e().b[28][1]++, timestamps.createdAtField) ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[27][0]++, [graphql_mapping_template_1.comment(`Automatically set the createdAt timestamp.`), graphql_mapping_template_1.qref(`$context.args.input.put("${timestamps.createdAtField}", $util.defaultIfNull($ctx.args.input.${timestamps.createdAtField}, $createdAt))`)]) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[27][1]++, [])), ...(
    /* istanbul ignore next */
    (cov_1urykczn5e().b[30][0]++, timestamps) &&
    /* istanbul ignore next */
    (cov_1urykczn5e().b[30][1]++, timestamps.updatedAtField) ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[29][0]++, [graphql_mapping_template_1.comment(`Automatically set the updatedAt timestamp.`), graphql_mapping_template_1.qref(`$context.args.input.put("${timestamps.updatedAtField}", $util.defaultIfNull($ctx.args.input.${timestamps.updatedAtField}, $createdAt))`)]) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[29][1]++, []))]));
  }

  makeUpdateResolver({
    type,
    nameOverride,
    syncConfig,
    mutationTypeName =
    /* istanbul ignore next */
    (cov_1urykczn5e().b[31][0]++, 'Mutation'),
    timestamps
  }) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[17]++;
    const fieldName =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[30]++, nameOverride ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[32][0]++, nameOverride) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[32][1]++, graphql_transformer_common_1.graphqlName(`update` + graphql_transformer_common_1.toUpper(type))));
    const isSyncEnabled =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[31]++, syncConfig ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[33][0]++, true) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[33][1]++, false));

    /* istanbul ignore next */
    cov_1urykczn5e().s[32]++;
    return {
      ApiId: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
      dataSourceName: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),
      fieldName: fieldName,
      typeName: mutationTypeName,
      requestMappingTemplate: graphql_mapping_template_1.print(graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.ifElse(graphql_mapping_template_1.raw(`$${graphql_transformer_common_1.ResourceConstants.SNIPPETS.AuthCondition} && $${graphql_transformer_common_1.ResourceConstants.SNIPPETS.AuthCondition}.expression != ""`), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition'), graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.AuthCondition)), graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey), graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref(`${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [graphql_mapping_template_1.qref('$condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)")'), graphql_mapping_template_1.qref('$condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key")')]), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.qref('$condition.put("expression", "$condition.expression AND attribute_exists(#id)")'), graphql_mapping_template_1.qref('$condition.expressionNames.put("#id", "id")')]))]), graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition'), graphql_mapping_template_1.obj({
        expression: graphql_mapping_template_1.str(''),
        expressionNames: graphql_mapping_template_1.obj({}),
        expressionValues: graphql_mapping_template_1.obj({})
      })), graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref(`${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [graphql_mapping_template_1.ifElse(graphql_mapping_template_1.raw('$velocityCount == 1'), graphql_mapping_template_1.qref('$condition.put("expression", "attribute_exists(#keyCondition$velocityCount)")'), graphql_mapping_template_1.qref('$condition.put(\
"expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)")')), graphql_mapping_template_1.qref('$condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key")')])]), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition'), graphql_mapping_template_1.obj({
        expression: graphql_mapping_template_1.str('attribute_exists(#id)'),
        expressionNames: graphql_mapping_template_1.obj({
          '#id': graphql_mapping_template_1.str('id')
        }),
        expressionValues: graphql_mapping_template_1.obj({})
      })))), ...(
      /* istanbul ignore next */
      (cov_1urykczn5e().b[35][0]++, timestamps) &&
      /* istanbul ignore next */
      (cov_1urykczn5e().b[35][1]++, timestamps.updatedAtField) ?
      /* istanbul ignore next */
      (cov_1urykczn5e().b[34][0]++, [graphql_mapping_template_1.comment(`Automatically set the updatedAt timestamp.`), graphql_mapping_template_1.qref(`$context.args.input.put("${timestamps.updatedAtField}", $util.defaultIfNull($ctx.args.input.${timestamps.updatedAtField}, $util.time.nowISO8601()))`)]) :
      /* istanbul ignore next */
      (cov_1urykczn5e().b[34][1]++, [])), graphql_mapping_template_1.qref(`$context.args.input.put("__typename", "${type}")`), graphql_mapping_template_1.comment('Update condition if type is @versioned'), graphql_mapping_template_1.iff(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.VersionedCondition), graphql_mapping_template_1.compoundExpression([// tslint:disable-next-line
      graphql_mapping_template_1.qref(`$condition.put("expression", "($condition.expression) AND $${graphql_transformer_common_1.ResourceConstants.SNIPPETS.VersionedCondition}.expression")`), graphql_mapping_template_1.qref(`$condition.expressionNames.putAll($${graphql_transformer_common_1.ResourceConstants.SNIPPETS.VersionedCondition}.expressionNames)`), graphql_mapping_template_1.qref(`$condition.expressionValues.putAll($${graphql_transformer_common_1.ResourceConstants.SNIPPETS.VersionedCondition}.expressionValues)`)])), graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('context.args.condition'), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('conditionFilterExpressions'), graphql_mapping_template_1.raw('$util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition))')), // tslint:disable-next-line
      graphql_mapping_template_1.qref(`$condition.put("expression", "($condition.expression) AND $conditionFilterExpressions.expression")`), graphql_mapping_template_1.qref(`$condition.expressionNames.putAll($conditionFilterExpressions.expressionNames)`), graphql_mapping_template_1.qref(`$condition.expressionValues.putAll($conditionFilterExpressions.expressionValues)`)])), graphql_mapping_template_1.iff(graphql_mapping_template_1.and([graphql_mapping_template_1.ref('condition.expressionValues'), graphql_mapping_template_1.raw('$condition.expressionValues.size() == 0')]), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition'), graphql_mapping_template_1.obj({
        expression: graphql_mapping_template_1.ref('condition.expression'),
        expressionNames: graphql_mapping_template_1.ref('condition.expressionNames')
      }))), graphql_mapping_template_1.DynamoDBMappingTemplate.updateItem({
        key: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey), graphql_mapping_template_1.raw(`$util.toJson(\$${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey})`), graphql_mapping_template_1.obj({
          id: graphql_mapping_template_1.obj({
            S: graphql_mapping_template_1.ref('util.toJson($context.args.input.id)')
          })
        }), true),
        condition: graphql_mapping_template_1.ref('util.toJson($condition)'),
        objectKeyVariable: graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey,
        nameOverrideMap: graphql_transformer_common_1.ResourceConstants.SNIPPETS.DynamoDBNameOverrideMap,
        isSyncEnabled
      })])),
      responseMappingTemplate: isSyncEnabled ?
      /* istanbul ignore next */
      (cov_1urykczn5e().b[36][0]++, graphql_mapping_template_1.print(graphql_mapping_template_1.DynamoDBMappingTemplate.dynamoDBResponse())) :
      /* istanbul ignore next */
      (cov_1urykczn5e().b[36][1]++, graphql_mapping_template_1.print(graphql_mapping_template_1.ref('util.toJson($ctx.result)'))),
      ...(
      /* istanbul ignore next */
      (cov_1urykczn5e().b[37][0]++, syncConfig) &&
      /* istanbul ignore next */
      (cov_1urykczn5e().b[37][1]++, {
        SyncConfig: graphql_transformer_core_1.SyncUtils.syncResolverConfig(syncConfig)
      }))
    };
  }
  /**
   * Create a resolver that creates an item in DynamoDB.
   * @param type
   */


  makeGetResolver(type, nameOverride, isSyncEnabled =
  /* istanbul ignore next */
  (cov_1urykczn5e().b[38][0]++, false), queryTypeName =
  /* istanbul ignore next */
  (cov_1urykczn5e().b[39][0]++, 'Query')) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[18]++;
    const fieldName =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[33]++, nameOverride ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[40][0]++, nameOverride) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[40][1]++, graphql_transformer_common_1.graphqlName('get' + graphql_transformer_common_1.toUpper(type))));

    /* istanbul ignore next */
    cov_1urykczn5e().s[34]++;
    return {
      apiId: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
      dataSourceName: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),
      fieldName: fieldName,
      typeName: queryTypeName,
      requestMappingTemplate: graphql_mapping_template_1.print(graphql_mapping_template_1.DynamoDBMappingTemplate.getItem({
        key: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey), graphql_mapping_template_1.raw(`$util.toJson(\$${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey})`), graphql_mapping_template_1.obj({
          id: graphql_mapping_template_1.ref('util.dynamodb.toDynamoDBJson($ctx.args.id)')
        }), true),
        isSyncEnabled
      })),
      responseMappingTemplate: isSyncEnabled ?
      /* istanbul ignore next */
      (cov_1urykczn5e().b[41][0]++, graphql_mapping_template_1.print(graphql_mapping_template_1.DynamoDBMappingTemplate.dynamoDBResponse())) :
      /* istanbul ignore next */
      (cov_1urykczn5e().b[41][1]++, graphql_mapping_template_1.print(graphql_mapping_template_1.ref('util.toJson($ctx.result)')))
    };
  }
  /**
   * Create a resolver that syncs local storage with cloud storage
   * @param type
   */


  makeSyncResolver(type, queryTypeName =
  /* istanbul ignore next */
  (cov_1urykczn5e().b[42][0]++, 'Query')) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[19]++;
    const fieldName =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[35]++, graphql_transformer_common_1.graphqlName('sync' + graphql_transformer_common_1.toUpper(pluralize_1.plural(type))));

    /* istanbul ignore next */
    cov_1urykczn5e().s[36]++;
    return new cloudform_types_1.AppSync.Resolver({
      ApiId: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
      DataSourceName: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),
      FieldName: fieldName,
      TypeName: queryTypeName,
      RequestMappingTemplate: graphql_mapping_template_1.print(graphql_mapping_template_1.DynamoDBMappingTemplate.syncItem({
        filter: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('context.args.filter'), graphql_mapping_template_1.ref('util.transform.toDynamoDBFilterExpression($ctx.args.filter)'), graphql_mapping_template_1.nul()),
        limit: graphql_mapping_template_1.ref(`util.defaultIfNull($ctx.args.limit, ${graphql_transformer_common_1.ResourceConstants.DEFAULT_SYNC_QUERY_PAGE_LIMIT})`),
        lastSync: graphql_mapping_template_1.ref('util.toJson($util.defaultIfNull($ctx.args.lastSync, null))'),
        nextToken: graphql_mapping_template_1.ref('util.toJson($util.defaultIfNull($ctx.args.nextToken, null))')
      })),
      ResponseMappingTemplate: graphql_mapping_template_1.print(graphql_mapping_template_1.DynamoDBMappingTemplate.dynamoDBResponse())
    });
  }
  /**
   * Create a resolver that queries an item in DynamoDB.
   * @param type
   */


  makeQueryResolver(type, nameOverride, isSyncEnabled =
  /* istanbul ignore next */
  (cov_1urykczn5e().b[43][0]++, false), queryTypeName =
  /* istanbul ignore next */
  (cov_1urykczn5e().b[44][0]++, 'Query')) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[20]++;
    const fieldName =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[37]++, nameOverride ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[45][0]++, nameOverride) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[45][1]++, graphql_transformer_common_1.graphqlName(`query${graphql_transformer_common_1.toUpper(type)}`)));

    /* istanbul ignore next */
    cov_1urykczn5e().s[38]++;
    return new cloudform_types_1.AppSync.Resolver({
      ApiId: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
      DataSourceName: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),
      FieldName: fieldName,
      TypeName: queryTypeName,
      RequestMappingTemplate: graphql_mapping_template_1.print(graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('limit'), graphql_mapping_template_1.ref(`util.defaultIfNull($context.args.limit, ${graphql_transformer_common_1.ResourceConstants.DEFAULT_PAGE_LIMIT})`)), graphql_mapping_template_1.DynamoDBMappingTemplate.query({
        query: graphql_mapping_template_1.obj({
          expression: graphql_mapping_template_1.str('#typename = :typename'),
          expressionNames: graphql_mapping_template_1.obj({
            '#typename': graphql_mapping_template_1.str('__typename')
          }),
          expressionValues: graphql_mapping_template_1.obj({
            ':typename': graphql_mapping_template_1.obj({
              S: graphql_mapping_template_1.str(type)
            })
          })
        }),
        scanIndexForward: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('context.args.sortDirection'), graphql_mapping_template_1.ifElse(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('context.args.sortDirection'), graphql_mapping_template_1.str('ASC')), graphql_mapping_template_1.bool(true), graphql_mapping_template_1.bool(false)), graphql_mapping_template_1.bool(true)),
        filter: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('context.args.filter'), graphql_mapping_template_1.ref('util.transform.toDynamoDBFilterExpression($ctx.args.filter)'), graphql_mapping_template_1.nul()),
        limit: graphql_mapping_template_1.ref('limit'),
        nextToken: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('context.args.nextToken'), graphql_mapping_template_1.ref('util.toJson($context.args.nextToken)'), graphql_mapping_template_1.nul()),
        isSyncEnabled
      })])),
      ResponseMappingTemplate: isSyncEnabled ?
      /* istanbul ignore next */
      (cov_1urykczn5e().b[46][0]++, graphql_mapping_template_1.print(graphql_mapping_template_1.DynamoDBMappingTemplate.dynamoDBResponse(graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('!$result'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('result'), graphql_mapping_template_1.ref('ctx.result'))), graphql_mapping_template_1.raw('$util.toJson($result)')])))) :
      /* istanbul ignore next */
      (cov_1urykczn5e().b[46][1]++, graphql_mapping_template_1.print(graphql_mapping_template_1.ref('util.toJson($ctx.result)')))
    });
  }
  /**
   * Create a resolver that lists items in DynamoDB.
   * TODO: actually fill out the right filter expression. This is a placeholder only.
   * @param type
   */


  makeListResolver(type, nameOverride, isSyncEnabled =
  /* istanbul ignore next */
  (cov_1urykczn5e().b[47][0]++, false), queryTypeName =
  /* istanbul ignore next */
  (cov_1urykczn5e().b[48][0]++, 'Query')) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[21]++;
    const fieldName =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[39]++, nameOverride ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[49][0]++, nameOverride) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[49][1]++, graphql_transformer_common_1.graphqlName('list' + graphql_transformer_common_1.plurality(graphql_transformer_common_1.toUpper(type)))));
    const requestVariable =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[40]++, 'ListRequest');

    /* istanbul ignore next */
    cov_1urykczn5e().s[41]++;
    return {
      apiId: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
      dataSourceName: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),
      fieldName: fieldName,
      typeName: queryTypeName,
      requestMappingTemplate: graphql_mapping_template_1.print(graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('limit'), graphql_mapping_template_1.ref(`util.defaultIfNull($context.args.limit, ${graphql_transformer_common_1.ResourceConstants.DEFAULT_PAGE_LIMIT})`)), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(requestVariable), graphql_mapping_template_1.obj({
        version: isSyncEnabled ?
        /* istanbul ignore next */
        (cov_1urykczn5e().b[50][0]++, graphql_mapping_template_1.str('2018-05-29')) :
        /* istanbul ignore next */
        (cov_1urykczn5e().b[50][1]++, graphql_mapping_template_1.str('2017-02-28')),
        limit: graphql_mapping_template_1.ref('limit')
      })), // PoI: Getting the snipper from stash
      graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('context.args.nextToken'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${requestVariable}.nextToken`), graphql_mapping_template_1.ref('context.args.nextToken'))), graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('context.args.filter'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${requestVariable}.filter`), graphql_mapping_template_1.ref('util.parseJson("$util.transform.toDynamoDBFilterExpression($ctx.args.filter)")'))), graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('context.stash.metadata.index'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${requestVariable}.index`), graphql_mapping_template_1.ref('context.stash.metadata.index'))), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression), graphql_mapping_template_1.ref(`ctx.stash.${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression}`)), graphql_mapping_template_1.ifElse(graphql_mapping_template_1.raw(`!$util.isNull($${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression})
                        && !$util.isNullOrEmpty($${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression}.expression)`), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.qref(`$${requestVariable}.put("operation", "Query")`), graphql_mapping_template_1.qref(`$${requestVariable}.put("query", $${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelQueryExpression})`), graphql_mapping_template_1.ifElse(graphql_mapping_template_1.raw(`!$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == "DESC"`), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${requestVariable}.scanIndexForward`), graphql_mapping_template_1.bool(false)), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${requestVariable}.scanIndexForward`), graphql_mapping_template_1.bool(true)))]), graphql_mapping_template_1.qref(`$${requestVariable}.put("operation", "Scan")`)), graphql_mapping_template_1.raw(`$util.toJson($${requestVariable})`)])),
      responseMappingTemplate: isSyncEnabled ?
      /* istanbul ignore next */
      (cov_1urykczn5e().b[51][0]++, graphql_mapping_template_1.print(graphql_mapping_template_1.DynamoDBMappingTemplate.dynamoDBResponse())) :
      /* istanbul ignore next */
      (cov_1urykczn5e().b[51][1]++, graphql_mapping_template_1.print(graphql_mapping_template_1.ref('util.toJson($ctx.result)')))
    };
  }
  /**
   * Create a resolver that deletes an item from DynamoDB.
   * @param type The name of the type to delete an item of.
   * @param nameOverride A user provided override for the field name.
   */


  makeDeleteResolver({
    type,
    nameOverride,
    syncConfig,
    mutationTypeName =
    /* istanbul ignore next */
    (cov_1urykczn5e().b[52][0]++, 'Mutation')
  }) {
    /* istanbul ignore next */
    cov_1urykczn5e().f[22]++;
    const fieldName =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[42]++, nameOverride ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[53][0]++, nameOverride) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[53][1]++, graphql_transformer_common_1.graphqlName('delete' + graphql_transformer_common_1.toUpper(type))));
    const isSyncEnabled =
    /* istanbul ignore next */
    (cov_1urykczn5e().s[43]++, syncConfig ?
    /* istanbul ignore next */
    (cov_1urykczn5e().b[54][0]++, true) :
    /* istanbul ignore next */
    (cov_1urykczn5e().b[54][1]++, false));

    /* istanbul ignore next */
    cov_1urykczn5e().s[44]++;
    return {
      apiId: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
      dataSourceName: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_1.ModelResourceIDs.ModelTableDataSourceID(type), 'Name'),
      fieldName: fieldName,
      typeName: mutationTypeName,
      requestMappingTemplate: graphql_mapping_template_1.print(graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.AuthCondition), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition'), graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.AuthCondition)), graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey), graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref(`${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [graphql_mapping_template_1.qref('$condition.put("expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)")'), graphql_mapping_template_1.qref('$condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key")')]), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.qref('$condition.put("expression", "$condition.expression AND attribute_exists(#id)")'), graphql_mapping_template_1.qref('$condition.expressionNames.put("#id", "id")')]))]), graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition'), graphql_mapping_template_1.obj({
        expression: graphql_mapping_template_1.str(''),
        expressionNames: graphql_mapping_template_1.obj({})
      })), graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref(`${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey}.entrySet()`), [graphql_mapping_template_1.ifElse(graphql_mapping_template_1.raw('$velocityCount == 1'), graphql_mapping_template_1.qref('$condition.put("expression", "attribute_exists(#keyCondition$velocityCount)")'), graphql_mapping_template_1.qref('$condition.put(\
"expression", "$condition.expression AND attribute_exists(#keyCondition$velocityCount)")')), graphql_mapping_template_1.qref('$condition.expressionNames.put("#keyCondition$velocityCount", "$entry.key")')])]), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition'), graphql_mapping_template_1.obj({
        expression: graphql_mapping_template_1.str('attribute_exists(#id)'),
        expressionNames: graphql_mapping_template_1.obj({
          '#id': graphql_mapping_template_1.str('id')
        })
      })))), graphql_mapping_template_1.iff(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.VersionedCondition), graphql_mapping_template_1.compoundExpression([// tslint:disable-next-line
      graphql_mapping_template_1.qref(`$condition.put("expression", "($condition.expression) AND $${graphql_transformer_common_1.ResourceConstants.SNIPPETS.VersionedCondition}.expression")`), graphql_mapping_template_1.qref(`$condition.expressionNames.putAll($${graphql_transformer_common_1.ResourceConstants.SNIPPETS.VersionedCondition}.expressionNames)`), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('expressionValues'), graphql_mapping_template_1.raw('$util.defaultIfNull($condition.expressionValues, {})')), graphql_mapping_template_1.qref(`$expressionValues.putAll($${graphql_transformer_common_1.ResourceConstants.SNIPPETS.VersionedCondition}.expressionValues)`), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition.expressionValues'), graphql_mapping_template_1.ref('expressionValues'))])), graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('context.args.condition'), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('conditionFilterExpressions'), graphql_mapping_template_1.raw('$util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.condition))')), // tslint:disable-next-line
      graphql_mapping_template_1.qref(`$condition.put("expression", "($condition.expression) AND $conditionFilterExpressions.expression")`), graphql_mapping_template_1.qref(`$condition.expressionNames.putAll($conditionFilterExpressions.expressionNames)`), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('conditionExpressionValues'), graphql_mapping_template_1.raw('$util.defaultIfNull($condition.expressionValues, {})')), graphql_mapping_template_1.qref(`$conditionExpressionValues.putAll($conditionFilterExpressions.expressionValues)`), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition.expressionValues'), graphql_mapping_template_1.ref('conditionExpressionValues')), graphql_mapping_template_1.qref(`$condition.expressionValues.putAll($conditionFilterExpressions.expressionValues)`)])), graphql_mapping_template_1.iff(graphql_mapping_template_1.and([graphql_mapping_template_1.ref('condition.expressionValues'), graphql_mapping_template_1.raw('$condition.expressionValues.size() == 0')]), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('condition'), graphql_mapping_template_1.obj({
        expression: graphql_mapping_template_1.ref('condition.expression'),
        expressionNames: graphql_mapping_template_1.ref('condition.expressionNames')
      }))), graphql_mapping_template_1.DynamoDBMappingTemplate.deleteItem({
        key: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey), graphql_mapping_template_1.raw(`$util.toJson(\$${graphql_transformer_common_1.ResourceConstants.SNIPPETS.ModelObjectKey})`), graphql_mapping_template_1.obj({
          id: graphql_mapping_template_1.ref('util.dynamodb.toDynamoDBJson($ctx.args.input.id)')
        }), true),
        condition: graphql_mapping_template_1.ref('util.toJson($condition)'),
        isSyncEnabled
      })])),
      responseMappingTemplate: isSyncEnabled ?
      /* istanbul ignore next */
      (cov_1urykczn5e().b[55][0]++, graphql_mapping_template_1.print(graphql_mapping_template_1.DynamoDBMappingTemplate.dynamoDBResponse())) :
      /* istanbul ignore next */
      (cov_1urykczn5e().b[55][1]++, graphql_mapping_template_1.print(graphql_mapping_template_1.ref('util.toJson($ctx.result)'))),
      ...(
      /* istanbul ignore next */
      (cov_1urykczn5e().b[56][0]++, syncConfig) &&
      /* istanbul ignore next */
      (cov_1urykczn5e().b[56][1]++, {
        SyncConfig: graphql_transformer_core_1.SyncUtils.syncResolverConfig(syncConfig)
      }))
    };
  }

}

/* istanbul ignore next */
cov_1urykczn5e().s[45]++;
exports.ResourceFactory = ResourceFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,