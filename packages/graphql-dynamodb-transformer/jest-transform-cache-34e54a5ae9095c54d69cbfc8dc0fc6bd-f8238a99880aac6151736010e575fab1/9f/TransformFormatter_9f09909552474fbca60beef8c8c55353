998d6b8d8a67cda0c53dd70ef7418f8a
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransformFormatter = void 0;

const cloudform_types_1 = require("cloudform-types");

const graphql_transformer_common_1 = require("graphql-transformer-common");

const graphql_1 = require("graphql");

const stripDirectives_1 = require("./stripDirectives");

const SchemaResourceUtil_1 = require("./util/SchemaResourceUtil");

const splitStack_1 = __importDefault(require("./util/splitStack"));

const graphql_transformer_common_2 = require("graphql-transformer-common");

class TransformFormatter {
  constructor() {
    this.schemaResourceUtil = new SchemaResourceUtil_1.SchemaResourceUtil();
  }

  format(ctx) {
    ctx.mergeConditions(this.schemaResourceUtil.makeEnvironmentConditions());
    const resolversFunctionsAndSchema = this.collectResolversFunctionsAndSchema(ctx);
    const defaultDependencies = [graphql_transformer_common_2.ResourceConstants.RESOURCES.GraphQLSchemaLogicalID];

    if (ctx.getResource(graphql_transformer_common_2.ResourceConstants.RESOURCES.NoneDataSource)) {
      defaultDependencies.push(graphql_transformer_common_2.ResourceConstants.RESOURCES.NoneDataSource);
    }

    const nestedStacks = splitStack_1.default({
      stack: ctx.template,
      stackRules: ctx.getStackMapping(),
      defaultParameterValues: {
        [graphql_transformer_common_2.ResourceConstants.PARAMETERS.AppSyncApiId]: cloudform_types_1.Fn.GetAtt(graphql_transformer_common_2.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId')
      },
      defaultParameterDefinitions: {
        [graphql_transformer_common_2.ResourceConstants.PARAMETERS.AppSyncApiId]: new cloudform_types_1.StringParameter({
          Description: `The id of the AppSync API associated with this project.`
        })
      },
      deployment: {
        deploymentBucketParameterName: graphql_transformer_common_2.ResourceConstants.PARAMETERS.S3DeploymentBucket,
        deploymentKeyParameterName: graphql_transformer_common_2.ResourceConstants.PARAMETERS.S3DeploymentRootKey
      },
      importExportPrefix: cloudform_types_1.Fn.Ref(graphql_transformer_common_2.ResourceConstants.PARAMETERS.AppSyncApiId),
      defaultDependencies
    });
    return { ...nestedStacks,
      ...resolversFunctionsAndSchema
    };
  }

  buildSchema(ctx) {
    const mutationNode = ctx.getMutation();
    const queryNode = ctx.getQuery();
    const subscriptionNode = ctx.getSubscription();
    let includeMutation = true;
    let includeQuery = true;
    let includeSubscription = true;

    if (!mutationNode || mutationNode.fields.length === 0) {
      delete ctx.nodeMap.Mutation;
      includeMutation = false;
    }

    if (!queryNode || queryNode.fields.length === 0) {
      delete ctx.nodeMap.Query;
      includeQuery = false;
    }

    if (!subscriptionNode || subscriptionNode.fields.length === 0) {
      delete ctx.nodeMap.Subscription;
      includeSubscription = false;
    }

    const ops = [];

    if (includeQuery) {
      ops.push(graphql_transformer_common_1.makeOperationType('query', queryNode.name.value));
    }

    if (includeMutation) {
      ops.push(graphql_transformer_common_1.makeOperationType('mutation', mutationNode.name.value));
    }

    if (includeSubscription) {
      ops.push(graphql_transformer_common_1.makeOperationType('subscription', subscriptionNode.name.value));
    }

    const schema = graphql_transformer_common_1.makeSchema(ops);
    ctx.putSchema(schema);
    const astSansDirectives = stripDirectives_1.stripDirectives({
      kind: 'Document',
      definitions: Object.keys(ctx.nodeMap).map(k => ctx.getType(k))
    }, ['aws_subscribe', 'aws_auth', 'aws_api_key', 'aws_iam', 'aws_oidc', 'aws_cognito_user_pools', 'deprecated']);
    const SDL = graphql_1.print(astSansDirectives);
    return SDL;
  }

  buildAndSetSchema(ctx) {
    const SDL = this.buildSchema(ctx);
    const schemaResource = this.schemaResourceUtil.makeAppSyncSchema();
    ctx.setResource(graphql_transformer_common_2.ResourceConstants.RESOURCES.GraphQLSchemaLogicalID, schemaResource);
    return SDL;
  }

  collectResolversFunctionsAndSchema(ctx) {
    const resolverParams = this.schemaResourceUtil.makeResolverS3RootParams();
    ctx.mergeParameters(resolverParams.Parameters);
    const templateResources = ctx.template.Resources;
    let resolverMap = {};
    let pipelineFunctionMap = {};
    let functionsMap = {};

    for (const resourceName of Object.keys(templateResources)) {
      const resource = templateResources[resourceName];

      if (resource.Type === 'AWS::AppSync::Resolver') {
        const resourceResolverMap = this.replaceResolverRecord(resourceName, ctx);
        resolverMap = { ...resolverMap,
          ...resourceResolverMap
        };
      } else if (resource.Type === 'AWS::AppSync::FunctionConfiguration') {
        const functionConfigMap = this.replaceFunctionConfigurationRecord(resourceName, ctx);
        pipelineFunctionMap = { ...pipelineFunctionMap,
          ...functionConfigMap
        };
      } else if (resource.Type === 'AWS::Lambda::Function') {
        functionsMap = { ...functionsMap,
          [`${resourceName}.zip`]: ctx.metadata.get(resourceName)
        };
      }
    }

    const schema = this.buildAndSetSchema(ctx);
    return {
      resolvers: resolverMap,
      functions: functionsMap,
      pipelineFunctions: pipelineFunctionMap,
      schema
    };
  }

  replaceResolverRecord(resourceName, ctx) {
    const resolverResource = ctx.template.Resources[resourceName];
    const requestMappingTemplate = resolverResource.Properties.RequestMappingTemplate;
    const responseMappingTemplate = resolverResource.Properties.ResponseMappingTemplate;

    if (typeof requestMappingTemplate === 'string' && typeof responseMappingTemplate === 'string') {
      const reqType = resolverResource.Properties.TypeName;
      const reqFieldName = resolverResource.Properties.FieldName;
      const reqFileName = `${reqType}.${reqFieldName}.req.vtl`;
      const respType = resolverResource.Properties.TypeName;
      const respFieldName = resolverResource.Properties.FieldName;
      const respFileName = `${respType}.${respFieldName}.res.vtl`;
      const updatedResolverResource = this.schemaResourceUtil.updateResolverResource(resolverResource);
      ctx.setResource(resourceName, updatedResolverResource);
      return {
        [reqFileName]: requestMappingTemplate,
        [respFileName]: responseMappingTemplate
      };
    }

    return {};
  }

  replaceFunctionConfigurationRecord(resourceName, ctx) {
    const functionConfiguration = ctx.template.Resources[resourceName];
    const requestMappingTemplate = functionConfiguration.Properties.RequestMappingTemplate;
    const responseMappingTemplate = functionConfiguration.Properties.ResponseMappingTemplate;

    if (typeof requestMappingTemplate === 'string' && typeof responseMappingTemplate === 'string') {
      const reqFileName = `${functionConfiguration.Properties.Name}.req.vtl`;
      const respFileName = `${functionConfiguration.Properties.Name}.res.vtl`;
      const updatedResolverResource = this.schemaResourceUtil.updateFunctionConfigurationResource(functionConfiguration);
      ctx.setResource(resourceName, updatedResolverResource);
      return {
        [reqFileName]: requestMappingTemplate,
        [respFileName]: responseMappingTemplate
      };
    }

    return {};
  }

}

exports.TransformFormatter = TransformFormatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UcmFuc2Zvcm1Gb3JtYXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE1BQUEsaUJBQUEsR0FBQSxPQUFBLENBQUEsaUJBQUEsQ0FBQTs7QUFFQSxNQUFBLDRCQUFBLEdBQUEsT0FBQSxDQUFBLDRCQUFBLENBQUE7O0FBQ0EsTUFBQSxTQUFBLEdBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQTs7QUFDQSxNQUFBLGlCQUFBLEdBQUEsT0FBQSxDQUFBLG1CQUFBLENBQUE7O0FBQ0EsTUFBQSxvQkFBQSxHQUFBLE9BQUEsQ0FBQSwyQkFBQSxDQUFBOztBQUNBLE1BQUEsWUFBQSxHQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsbUJBQUEsQ0FBQSxDQUFBOztBQUVBLE1BQUEsNEJBQUEsR0FBQSxPQUFBLENBQUEsNEJBQUEsQ0FBQTs7QUFFQSxNQUFhLGtCQUFiLENBQStCO0FBQS9CLEVBQUEsV0FBQSxHQUFBO0FBQ1UsU0FBQSxrQkFBQSxHQUFxQixJQUFJLG9CQUFBLENBQUEsa0JBQUosRUFBckI7QUFpTFQ7O0FBaktRLEVBQUEsTUFBTSxDQUFDLEdBQUQsRUFBd0I7QUFDbkMsSUFBQSxHQUFHLENBQUMsZUFBSixDQUFvQixLQUFLLGtCQUFMLENBQXdCLHlCQUF4QixFQUFwQjtBQUNBLFVBQU0sMkJBQTJCLEdBQUcsS0FBSyxrQ0FBTCxDQUF3QyxHQUF4QyxDQUFwQztBQUNBLFVBQU0sbUJBQW1CLEdBQUcsQ0FBQyw0QkFBQSxDQUFBLGlCQUFBLENBQWtCLFNBQWxCLENBQTRCLHNCQUE3QixDQUE1Qjs7QUFDQSxRQUFJLEdBQUcsQ0FBQyxXQUFKLENBQWdCLDRCQUFBLENBQUEsaUJBQUEsQ0FBa0IsU0FBbEIsQ0FBNEIsY0FBNUMsQ0FBSixFQUFpRTtBQUMvRCxNQUFBLG1CQUFtQixDQUFDLElBQXBCLENBQXlCLDRCQUFBLENBQUEsaUJBQUEsQ0FBa0IsU0FBbEIsQ0FBNEIsY0FBckQ7QUFDRDs7QUFDRCxVQUFN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