{"version":3,"file":"/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/__tests__/DynamoDBModelTransformer.test.ts","sources":["/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/__tests__/DynamoDBModelTransformer.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ObjectTypeDefinitionNode,\n  parse,\n  FieldDefinitionNode,\n  DocumentNode,\n  DefinitionNode,\n  Kind,\n  InputObjectTypeDefinitionNode,\n  ListValueNode,\n  InputValueDefinitionNode,\n  TypeNode,\n  NamedTypeNode,\n} from 'graphql';\nimport { GraphQLTransform, TRANSFORM_BASE_VERSION, TRANSFORM_CURRENT_VERSION } from 'graphql-transformer-core';\nimport { DynamoDBModelTransformer } from '../DynamoDBModelTransformer';\n\ntest('Test DynamoDBModelTransformer validation happy case', () => {\n  const validSchema = `\n    type Post @model {\n        id: ID!\n        title: String!\n        createdAt: String\n        updatedAt: String\n    }\n    `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n});\n\ntest('Test DynamoDBModelTransformer with query overrides', () => {\n  const validSchema = `type Post @model(queries: { get: \"customGetPost\", list: \"customListPost\" }) {\n        id: ID!\n        title: String!\n        createdAt: String\n        updatedAt: String\n    }\n    `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const createPostInput = getInputType(parsed, 'CreatePostInput');\n  expectFieldsOnInputType(createPostInput, ['id', 'title', 'createdAt', 'updatedAt']);\n  // This id should always be optional.\n  // aka a named type node aka name.value would not be set if it were a non null node\n  const idField = createPostInput.fields.find(f => f.name.value === 'id');\n  expect((idField.type as NamedTypeNode).name.value).toEqual('ID');\n  const queryType = getObjectType(parsed, 'Query');\n  expect(queryType).toBeDefined();\n  expectFields(queryType, ['customGetPost']);\n  expectFields(queryType, ['customListPost']);\n  const subscriptionType = getObjectType(parsed, 'Subscription');\n  expect(subscriptionType).toBeDefined();\n  expectFields(subscriptionType, ['onCreatePost', 'onUpdatePost', 'onDeletePost']);\n  const subField = subscriptionType.fields.find(f => f.name.value === 'onCreatePost');\n  expect(subField.directives.length).toEqual(1);\n  expect(subField.directives[0].name.value).toEqual('aws_subscribe');\n});\n\ntest('Test DynamoDBModelTransformer with mutation overrides', () => {\n  const validSchema = `type Post @model(mutations: { create: \"customCreatePost\", update: \"customUpdatePost\", delete: \"customDeletePost\" }) {\n        id: ID!\n        title: String!\n        createdAt: String\n        updatedAt: String\n    }\n    `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const mutationType = getObjectType(parsed, 'Mutation');\n  expect(mutationType).toBeDefined();\n  expectFields(mutationType, ['customCreatePost', 'customUpdatePost', 'customDeletePost']);\n});\n\ntest('Test DynamoDBModelTransformer with only create mutations', () => {\n  const validSchema = `type Post @model(mutations: { create: \"customCreatePost\" }) {\n        id: ID!\n        title: String!\n        createdAt: String\n        updatedAt: String\n    }\n    `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const mutationType = getObjectType(parsed, 'Mutation');\n  expect(mutationType).toBeDefined();\n  expectFields(mutationType, ['customCreatePost']);\n  doNotExpectFields(mutationType, ['updatePost']);\n});\n\ntest('Test DynamoDBModelTransformer with multiple model directives', () => {\n  const validSchema = `\n    type Post @model {\n        id: ID!\n        title: String!\n        createdAt: String\n        updatedAt: String\n    }\n\n    type User @model {\n        id: ID!\n        name: String!\n    }\n    `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const queryType = getObjectType(parsed, 'Query');\n  expect(queryType).toBeDefined();\n  expectFields(queryType, ['listPosts']);\n  expectFields(queryType, ['listUsers']);\n\n  const stringInputType = getInputType(parsed, 'ModelStringFilterInput');\n  expect(stringInputType).toBeDefined();\n  const booleanInputType = getInputType(parsed, 'ModelBooleanFilterInput');\n  expect(booleanInputType).toBeDefined();\n  const intInputType = getInputType(parsed, 'ModelIntFilterInput');\n  expect(intInputType).toBeDefined();\n  const floatInputType = getInputType(parsed, 'ModelFloatFilterInput');\n  expect(floatInputType).toBeDefined();\n  const idInputType = getInputType(parsed, 'ModelIDFilterInput');\n  expect(idInputType).toBeDefined();\n  const postInputType = getInputType(parsed, 'ModelPostFilterInput');\n  expect(postInputType).toBeDefined();\n  const userInputType = getInputType(parsed, 'ModelUserFilterInput');\n  expect(userInputType).toBeDefined();\n\n  expect(verifyInputCount(parsed, 'ModelStringFilterInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'ModelBooleanFilterInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'ModelIntFilterInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'ModelFloatFilterInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'ModelIDFilterInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'ModelPostFilterInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'ModelUserFilterInput', 1)).toBeTruthy();\n});\n\ntest('Test DynamoDBModelTransformer with filter', () => {\n  const validSchema = `\n    type Post @model {\n        id: ID!\n        title: String!\n        createdAt: String\n        updatedAt: String\n    }`;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const queryType = getObjectType(parsed, 'Query');\n  expect(queryType).toBeDefined();\n  expectFields(queryType, ['listPosts']);\n\n  const connectionType = getObjectType(parsed, 'ModelPostConnection');\n  expect(connectionType).toBeDefined();\n\n  expect(verifyInputCount(parsed, 'ModelStringFilterInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'ModelBooleanFilterInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'ModelIntFilterInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'ModelFloatFilterInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'ModelIDFilterInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'ModelPostFilterInput', 1)).toBeTruthy();\n});\n\ntest('Test DynamoDBModelTransformer with mutations set to null', () => {\n  const validSchema = `type Post @model(mutations: null) {\n          id: ID!\n          title: String!\n          createdAt: String\n          updatedAt: String\n      }\n      `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const mutationType = getObjectType(parsed, 'Mutation');\n  expect(mutationType).not.toBeDefined();\n});\ntest('Test DynamoDBModelTransformer with queries set to null', () => {\n  const validSchema = `type Post @model(queries: null) {\n          id: ID!\n          title: String!\n          createdAt: String\n          updatedAt: String\n      }\n      `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const mutationType = getObjectType(parsed, 'Mutation');\n  expect(mutationType).toBeDefined();\n  const queryType = getObjectType(parsed, 'Query');\n  expect(queryType).not.toBeDefined();\n});\ntest('Test DynamoDBModelTransformer with subscriptions set to null', () => {\n  const validSchema = `type Post @model(subscriptions: null) {\n          id: ID!\n          title: String!\n          createdAt: String\n          updatedAt: String\n      }\n      `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const mutationType = getObjectType(parsed, 'Mutation');\n  expect(mutationType).toBeDefined();\n  const queryType = getObjectType(parsed, 'Query');\n  expect(queryType).toBeDefined();\n  const subscriptionType = getObjectType(parsed, 'Subscription');\n  expect(subscriptionType).not.toBeDefined();\n});\ntest('Test DynamoDBModelTransformer with queries and mutations set to null', () => {\n  const validSchema = `type Post @model(queries: null, mutations: null, subscriptions: null) {\n          id: ID!\n          title: String!\n          createdAt: String\n          updatedAt: String\n      }\n      `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const mutationType = getObjectType(parsed, 'Mutation');\n  expect(mutationType).not.toBeDefined();\n  const queryType = getObjectType(parsed, 'Query');\n  expect(queryType).not.toBeDefined();\n  const subscriptionType = getObjectType(parsed, 'Subscription');\n  expect(subscriptionType).not.toBeDefined();\n});\ntest('Test DynamoDBModelTransformer with advanced subscriptions', () => {\n  const validSchema = `type Post @model(subscriptions: {\n            onCreate: [\"onFeedUpdated\", \"onCreatePost\"],\n            onUpdate: [\"onFeedUpdated\"],\n            onDelete: [\"onFeedUpdated\"]\n        }) {\n          id: ID!\n          title: String!\n          createdAt: String\n          updatedAt: String\n      }\n      `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const subscriptionType = getObjectType(parsed, 'Subscription');\n  expect(subscriptionType).toBeDefined();\n  expectFields(subscriptionType, ['onFeedUpdated', 'onCreatePost']);\n  const subField = subscriptionType.fields.find(f => f.name.value === 'onFeedUpdated');\n  expect(subField.directives.length).toEqual(1);\n  expect(subField.directives[0].name.value).toEqual('aws_subscribe');\n  const mutationsList = subField.directives[0].arguments.find(a => a.name.value === 'mutations').value as ListValueNode;\n  const mutList = mutationsList.values.map((v: any) => v.value);\n  expect(mutList.length).toEqual(3);\n  expect(mutList).toContain('createPost');\n  expect(mutList).toContain('updatePost');\n  expect(mutList).toContain('deletePost');\n});\n\ntest('Test DynamoDBModelTransformer with non-model types and enums', () => {\n  const validSchema = `\n    type Post @model {\n        id: ID!\n        title: String!\n        createdAt: String\n        updatedAt: String\n        metadata: [PostMetadata!]!\n        appearsIn: [Episode]!\n    }\n    type PostMetadata {\n        tags: Tag\n    }\n    type Tag {\n        published: Boolean\n        metadata: PostMetadata\n    }\n    enum Episode {\n        NEWHOPE\n        EMPIRE\n        JEDI\n    }\n    `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n\n  const postMetaDataInputType = getInputType(parsed, 'PostMetadataInput');\n  expect(postMetaDataInputType).toBeDefined();\n  const tagInputType = getInputType(parsed, 'TagInput');\n  expect(tagInputType).toBeDefined();\n  expectFieldsOnInputType(tagInputType, ['metadata']);\n  const createPostInputType = getInputType(parsed, 'CreatePostInput');\n  expectFieldsOnInputType(createPostInputType, ['metadata', 'appearsIn']);\n  const updatePostInputType = getInputType(parsed, 'UpdatePostInput');\n  expectFieldsOnInputType(updatePostInputType, ['metadata', 'appearsIn']);\n\n  const postModelObject = getObjectType(parsed, 'Post');\n  const postMetaDataInputField = getFieldOnInputType(createPostInputType, 'metadata');\n  const postMetaDataField = getFieldOnObjectType(postModelObject, 'metadata');\n  // this checks that the non-model type was properly \"unwrapped\", renamed, and \"rewrapped\"\n  // in the generated CreatePostInput type - its types should be the same as in the Post @model type\n  verifyMatchingTypes(postMetaDataInputField.type, postMetaDataField.type);\n\n  expect(verifyInputCount(parsed, 'PostMetadataInput', 1)).toBeTruthy();\n  expect(verifyInputCount(parsed, 'TagInput', 1)).toBeTruthy();\n});\n\ntest('Test DynamoDBModelTransformer with mutation input overrides when mutations are disabled', () => {\n  const validSchema = `type Post @model(mutations: null) {\n        id: ID!\n        title: String!\n        createdAt: String\n        updatedAt: String\n    }\n    input CreatePostInput {\n        different: String\n    }\n    input UpdatePostInput {\n        different2: String\n    }\n    input DeletePostInput {\n        different3: String\n    }\n    `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const createPostInput = getInputType(parsed, 'CreatePostInput');\n  expectFieldsOnInputType(createPostInput, ['different']);\n  const updatePostInput = getInputType(parsed, 'UpdatePostInput');\n  expectFieldsOnInputType(updatePostInput, ['different2']);\n  const deletePostInput = getInputType(parsed, 'DeletePostInput');\n  expectFieldsOnInputType(deletePostInput, ['different3']);\n});\n\ntest('Test DynamoDBModelTransformer with mutation input overrides when mutations are enabled', () => {\n  const validSchema = `type Post @model {\n        id: ID!\n        title: String!\n        createdAt: String\n        updatedAt: String\n    }\n    # User defined types always take precedence.\n    input CreatePostInput {\n        different: String\n    }\n    input UpdatePostInput {\n        different2: String\n    }\n    input DeletePostInput {\n        different3: String\n    }\n    `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const createPostInput = getInputType(parsed, 'CreatePostInput');\n  expectFieldsOnInputType(createPostInput, ['different']);\n  const updatePostInput = getInputType(parsed, 'UpdatePostInput');\n  expectFieldsOnInputType(updatePostInput, ['different2']);\n  const deletePostInput = getInputType(parsed, 'DeletePostInput');\n  expectFieldsOnInputType(deletePostInput, ['different3']);\n});\n\ntest('Test non model objects contain id as a type for fields', () => {\n  const validSchema = `\n    type Post @model {\n      id: ID!\n      comments: [Comment]\n    }\n    type Comment {\n      id: String!\n      text: String!\n    }\n  `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n  const definition = out.schema;\n  expect(definition).toBeDefined();\n  const parsed = parse(definition);\n  const commentInput = getInputType(parsed, 'CommentInput');\n  expectFieldsOnInputType(commentInput, ['id', 'text']);\n  const commentObject = getObjectType(parsed, 'Comment');\n  const commentInputObject = getInputType(parsed, 'CommentInput');\n  const commentObjectIDField = getFieldOnObjectType(commentObject, 'id');\n  const commentInputIDField = getFieldOnInputType(commentInputObject, 'id');\n  verifyMatchingTypes(commentObjectIDField.type, commentInputIDField.type);\n});\n\ntest('Test schema includes attribute enum when only queries specified', () => {\n  const validSchema = `\n    type Entity @model(mutations: null, subscriptions: null) {\n      id: ID!\n      str: String\n    }\n  `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n    transformConfig: {\n      Version: 5,\n    },\n  });\n  const result = transformer.transform(validSchema);\n  expect(result).toBeDefined();\n  expect(result.schema).toBeDefined();\n  expect(result.schema).toMatchSnapshot();\n});\n\ntest('Test only get does not generate superfluous input and filter types', () => {\n  const validSchema = `\n  type Entity @model(mutations: null, subscriptions: null, queries: {get: \"getEntity\"}) {\n    id: ID!\n    str: String\n  }\n  `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n    transformConfig: {\n      Version: 5,\n    },\n  });\n  const result = transformer.transform(validSchema);\n  expect(result).toBeDefined();\n  expect(result.schema).toBeDefined();\n  expect(result.schema).toMatchSnapshot();\n});\n\ntest('Test timestamp parameters when generating resolvers and output schema', () => {\n  const validSchema = `\n  type Post @model(timestamps: { createdAt: \"createdOn\", updatedAt: \"updatedOn\"}) {\n    id: ID!\n    str: String\n  }\n  `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const result = transformer.transform(validSchema);\n  expect(result).toBeDefined();\n  expect(result.schema).toBeDefined();\n  expect(result.schema).toMatchSnapshot();\n\n  expect(result.resolvers['Mutation.createPost.req.vtl']).toMatchSnapshot();\n  expect(result.resolvers['Mutation.updatePost.req.vtl']).toMatchSnapshot();\n});\n\ntest('Test resolver template not to auto generate createdAt and updatedAt when the type in schema is not AWSDateTime', () => {\n  const validSchema = `\n  type Post @model {\n    id: ID!\n    str: String\n    createdAt: AWSTimestamp\n    updatedAt: AWSTimestamp\n  }\n  `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const result = transformer.transform(validSchema);\n  expect(result).toBeDefined();\n  expect(result.schema).toBeDefined();\n  expect(result.schema).toMatchSnapshot();\n\n  expect(result.resolvers['Mutation.createPost.req.vtl']).toMatchSnapshot();\n  expect(result.resolvers['Mutation.updatePost.req.vtl']).toMatchSnapshot();\n});\n\ntest('Test create and update mutation input should have timestamps as nullable fields when the type makes it non-nullable', () => {\n  const validSchema = `\n  type Post @model {\n    id: ID!\n    str: String\n    createdAt: AWSDateTime!\n    updatedAt: AWSDateTime!\n  }\n  `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const result = transformer.transform(validSchema);\n  expect(result).toBeDefined();\n  expect(result.schema).toBeDefined();\n  expect(result.schema).toMatchSnapshot();\n\n  expect(result.resolvers['Mutation.createPost.req.vtl']).toMatchSnapshot();\n  expect(result.resolvers['Mutation.updatePost.req.vtl']).toMatchSnapshot();\n});\n\ntest('Test not to include createdAt and updatedAt field when timestamps is set to null', () => {\n  const validSchema = `\n  type Post @model(timestamps: null) {\n    id: ID!\n    str: String\n  }\n  `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n  });\n  const result = transformer.transform(validSchema);\n  expect(result).toBeDefined();\n  expect(result.schema).toBeDefined();\n  expect(result.schema).toMatchSnapshot();\n\n  expect(result.resolvers['Mutation.createPost.req.vtl']).toMatchSnapshot();\n  expect(result.resolvers['Mutation.updatePost.req.vtl']).toMatchSnapshot();\n});\n\ntest(`V${TRANSFORM_BASE_VERSION} transformer snapshot test`, () => {\n  const schema = transformerVersionSnapshot(TRANSFORM_BASE_VERSION);\n  expect(schema).toMatchSnapshot();\n});\n\ntest(`V5 transformer snapshot test`, () => {\n  const schema = transformerVersionSnapshot(5);\n  expect(schema).toMatchSnapshot();\n});\n\ntest(`Current version transformer snapshot test`, () => {\n  const schema = transformerVersionSnapshot(TRANSFORM_CURRENT_VERSION);\n  expect(schema).toMatchSnapshot();\n});\n\nfunction transformerVersionSnapshot(version: number): string {\n  const validSchema = `\n        type Post @model\n        {\n          id: ID!\n          content: String\n        }\n    `;\n  const transformer = new GraphQLTransform({\n    transformers: [new DynamoDBModelTransformer()],\n    transformConfig: {\n      Version: version,\n    },\n  });\n\n  const out = transformer.transform(validSchema);\n  expect(out).toBeDefined();\n\n  return out.schema;\n}\n\nfunction expectFields(type: ObjectTypeDefinitionNode, fields: string[]) {\n  for (const fieldName of fields) {\n    const foundField = type.fields.find((f: FieldDefinitionNode) => f.name.value === fieldName);\n    expect(foundField).toBeDefined();\n  }\n}\n\nfunction expectFieldsOnInputType(type: InputObjectTypeDefinitionNode, fields: string[]) {\n  for (const fieldName of fields) {\n    const foundField = type.fields.find((f: InputValueDefinitionNode) => f.name.value === fieldName);\n    expect(foundField).toBeDefined();\n  }\n}\n\nfunction getFieldOnInputType(type: InputObjectTypeDefinitionNode, field: string): InputValueDefinitionNode {\n  return type.fields.find((f: InputValueDefinitionNode) => f.name.value === field);\n}\n\nfunction getFieldOnObjectType(type: ObjectTypeDefinitionNode, field: string): FieldDefinitionNode {\n  return type.fields.find((f: FieldDefinitionNode) => f.name.value === field);\n}\n\nfunction doNotExpectFields(type: ObjectTypeDefinitionNode, fields: string[]) {\n  for (const fieldName of fields) {\n    expect(type.fields.find((f: FieldDefinitionNode) => f.name.value === fieldName)).toBeUndefined();\n  }\n}\n\nfunction getObjectType(doc: DocumentNode, type: string): ObjectTypeDefinitionNode | undefined {\n  return doc.definitions.find((def: DefinitionNode) => def.kind === Kind.OBJECT_TYPE_DEFINITION && def.name.value === type) as\n    | ObjectTypeDefinitionNode\n    | undefined;\n}\n\nfunction getInputType(doc: DocumentNode, type: string): InputObjectTypeDefinitionNode | undefined {\n  return doc.definitions.find((def: DefinitionNode) => def.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION && def.name.value === type) as\n    | InputObjectTypeDefinitionNode\n    | undefined;\n}\n\nfunction verifyInputCount(doc: DocumentNode, type: string, count: number): boolean {\n  return doc.definitions.filter(def => def.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION && def.name.value === type).length == count;\n}\n\nfunction verifyMatchingTypes(t1: TypeNode, t2: TypeNode): boolean {\n  if (t1.kind !== t2.kind) {\n    return false;\n  }\n\n  if (t1.kind !== Kind.NAMED_TYPE && t2.kind !== Kind.NAMED_TYPE) {\n    verifyMatchingTypes(t1.type, t2.type);\n  } else {\n    return false;\n  }\n}\n"]}