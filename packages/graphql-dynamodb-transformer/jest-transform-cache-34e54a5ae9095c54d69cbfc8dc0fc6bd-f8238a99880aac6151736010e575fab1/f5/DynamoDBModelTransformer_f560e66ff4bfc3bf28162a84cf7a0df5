5256e5b6119e76248b155d47de99328b
"use strict";

/* istanbul ignore next */
function cov_1n8u9ip2ud() {
  var path = "/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/DynamoDBModelTransformer.ts";
  var hash = "7ceb30bd5cab81744dffec644c52054d920072a6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/DynamoDBModelTransformer.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 109
        }
      },
      "2": {
        start: {
          line: 4,
          column: 26
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "3": {
        start: {
          line: 5,
          column: 37
        },
        end: {
          line: 5,
          column: 74
        }
      },
      "4": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 70
        }
      },
      "5": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "6": {
        start: {
          line: 8,
          column: 29
        },
        end: {
          line: 8,
          column: 60
        }
      },
      "7": {
        start: {
          line: 9,
          column: 20
        },
        end: {
          line: 9,
          column: 42
        }
      },
      "8": {
        start: {
          line: 10,
          column: 23
        },
        end: {
          line: 10,
          column: 75
        }
      },
      "9": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "10": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 39
        }
      },
      "11": {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 63,
          column: 2
        }
      },
      "12": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 71
        }
      },
      "13": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 58
        }
      },
      "14": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 76
        }
      },
      "15": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 29
        }
      },
      "16": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 76,
          column: 10
        }
      },
      "17": {
        start: {
          line: 71,
          column: 29
        },
        end: {
          line: 71,
          column: 58
        }
      },
      "18": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 51
        }
      },
      "19": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 53
        }
      },
      "20": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 47
        }
      },
      "21": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 53
        }
      },
      "22": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 87,
          column: 10
        }
      },
      "23": {
        start: {
          line: 79,
          column: 30
        },
        end: {
          line: 79,
          column: 60
        }
      },
      "24": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "25": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 85,
          column: 19
        }
      },
      "26": {
        start: {
          line: 82,
          column: 37
        },
        end: {
          line: 82,
          column: 64
        }
      },
      "27": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 83,
          column: 137
        }
      },
      "28": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 58
        }
      },
      "29": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 98,
          column: 10
        }
      },
      "30": {
        start: {
          line: 96,
          column: 29
        },
        end: {
          line: 96,
          column: 43
        }
      },
      "31": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 43
        }
      },
      "32": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 134,
          column: 10
        }
      },
      "33": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 133,
          column: 15
        }
      },
      "34": {
        start: {
          line: 102,
          column: 30
        },
        end: {
          line: 102,
          column: 54
        }
      },
      "35": {
        start: {
          line: 103,
          column: 34
        },
        end: {
          line: 103,
          column: 133
        }
      },
      "36": {
        start: {
          line: 103,
          column: 108
        },
        end: {
          line: 103,
          column: 132
        }
      },
      "37": {
        start: {
          line: 104,
          column: 38
        },
        end: {
          line: 104,
          column: 97
        }
      },
      "38": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 110,
          column: 19
        }
      },
      "39": {
        start: {
          line: 106,
          column: 43
        },
        end: {
          line: 106,
          column: 107
        }
      },
      "40": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 109,
          column: 21
        }
      },
      "41": {
        start: {
          line: 108,
          column: 24
        },
        end: {
          line: 108,
          column: 53
        }
      },
      "42": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 58
        }
      },
      "43": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 75
        }
      },
      "44": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 64
        }
      },
      "45": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 62
        }
      },
      "46": {
        start: {
          line: 117,
          column: 38
        },
        end: {
          line: 117,
          column: 73
        }
      },
      "47": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 131,
          column: 17
        }
      },
      "48": {
        start: {
          line: 119,
          column: 32
        },
        end: {
          line: 119,
          column: 63
        }
      },
      "49": {
        start: {
          line: 120,
          column: 38
        },
        end: {
          line: 125,
          column: 21
        }
      },
      "50": {
        start: {
          line: 126,
          column: 35
        },
        end: {
          line: 129,
          column: 21
        }
      },
      "51": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 130,
          column: 45
        }
      },
      "52": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 132,
          column: 63
        }
      },
      "53": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 164,
          column: 10
        }
      },
      "54": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 163,
          column: 15
        }
      },
      "55": {
        start: {
          line: 137,
          column: 30
        },
        end: {
          line: 137,
          column: 54
        }
      },
      "56": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 51
        }
      },
      "57": {
        start: {
          line: 141,
          column: 38
        },
        end: {
          line: 141,
          column: 73
        }
      },
      "58": {
        start: {
          line: 142,
          column: 39
        },
        end: {
          line: 142,
          column: 116
        }
      },
      "59": {
        start: {
          line: 143,
          column: 41
        },
        end: {
          line: 143,
          column: 117
        }
      },
      "60": {
        start: {
          line: 144,
          column: 48
        },
        end: {
          line: 144,
          column: 127
        }
      },
      "61": {
        start: {
          line: 145,
          column: 39
        },
        end: {
          line: 145,
          column: 157
        }
      },
      "62": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 143
        }
      },
      "63": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 66
        }
      },
      "64": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 111
        }
      },
      "65": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 68
        }
      },
      "66": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 156
        }
      },
      "67": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 75
        }
      },
      "68": {
        start: {
          line: 152,
          column: 42
        },
        end: {
          line: 152,
          column: 129
        }
      },
      "69": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 155,
          column: 92
        }
      },
      "70": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 69
        }
      },
      "71": {
        start: {
          line: 157,
          column: 43
        },
        end: {
          line: 157,
          column: 81
        }
      },
      "72": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 112
        }
      },
      "73": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 70
        }
      },
      "74": {
        start: {
          line: 160,
          column: 42
        },
        end: {
          line: 160,
          column: 71
        }
      },
      "75": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 101
        }
      },
      "76": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 69
        }
      },
      "77": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 282,
          column: 10
        }
      },
      "78": {
        start: {
          line: 166,
          column: 29
        },
        end: {
          line: 166,
          column: 43
        }
      },
      "79": {
        start: {
          line: 167,
          column: 34
        },
        end: {
          line: 167,
          column: 69
        }
      },
      "80": {
        start: {
          line: 168,
          column: 35
        },
        end: {
          line: 168,
          column: 37
        }
      },
      "81": {
        start: {
          line: 171,
          column: 39
        },
        end: {
          line: 171,
          column: 98
        }
      },
      "82": {
        start: {
          line: 173,
          column: 35
        },
        end: {
          line: 173,
          column: 39
        }
      },
      "83": {
        start: {
          line: 174,
          column: 35
        },
        end: {
          line: 174,
          column: 39
        }
      },
      "84": {
        start: {
          line: 175,
          column: 35
        },
        end: {
          line: 175,
          column: 39
        }
      },
      "85": {
        start: {
          line: 176,
          column: 42
        },
        end: {
          line: 176,
          column: 51
        }
      },
      "86": {
        start: {
          line: 177,
          column: 42
        },
        end: {
          line: 177,
          column: 51
        }
      },
      "87": {
        start: {
          line: 178,
          column: 42
        },
        end: {
          line: 178,
          column: 51
        }
      },
      "88": {
        start: {
          line: 180,
          column: 35
        },
        end: {
          line: 180,
          column: 88
        }
      },
      "89": {
        start: {
          line: 181,
          column: 35
        },
        end: {
          line: 181,
          column: 88
        }
      },
      "90": {
        start: {
          line: 182,
          column: 43
        },
        end: {
          line: 182,
          column: 96
        }
      },
      "91": {
        start: {
          line: 182,
          column: 64
        },
        end: {
          line: 182,
          column: 95
        }
      },
      "92": {
        start: {
          line: 183,
          column: 43
        },
        end: {
          line: 183,
          column: 96
        }
      },
      "93": {
        start: {
          line: 183,
          column: 64
        },
        end: {
          line: 183,
          column: 95
        }
      },
      "94": {
        start: {
          line: 185,
          column: 36
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "95": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "96": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 41
        }
      },
      "97": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 41
        }
      },
      "98": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 41
        }
      },
      "99": {
        start: {
          line: 195,
          column: 17
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "100": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 201,
          column: 17
        }
      },
      "101": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 197,
          column: 45
        }
      },
      "102": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 200,
          column: 82
        }
      },
      "103": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 207,
          column: 17
        }
      },
      "104": {
        start: {
          line: 203,
          column: 20
        },
        end: {
          line: 203,
          column: 45
        }
      },
      "105": {
        start: {
          line: 206,
          column: 20
        },
        end: {
          line: 206,
          column: 82
        }
      },
      "106": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 213,
          column: 17
        }
      },
      "107": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 45
        }
      },
      "108": {
        start: {
          line: 212,
          column: 20
        },
        end: {
          line: 212,
          column: 82
        }
      },
      "109": {
        start: {
          line: 215,
          column: 39
        },
        end: {
          line: 215,
          column: 122
        }
      },
      "110": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 238,
          column: 13
        }
      },
      "111": {
        start: {
          line: 218,
          column: 36
        },
        end: {
          line: 218,
          column: 122
        }
      },
      "112": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 221,
          column: 17
        }
      },
      "113": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 220,
          column: 46
        }
      },
      "114": {
        start: {
          line: 222,
          column: 39
        },
        end: {
          line: 226,
          column: 18
        }
      },
      "115": {
        start: {
          line: 227,
          column: 33
        },
        end: {
          line: 227,
          column: 227
        }
      },
      "116": {
        start: {
          line: 228,
          column: 45
        },
        end: {
          line: 228,
          column: 128
        }
      },
      "117": {
        start: {
          line: 229,
          column: 16
        },
        end: {
          line: 229,
          column: 63
        }
      },
      "118": {
        start: {
          line: 230,
          column: 35
        },
        end: {
          line: 230,
          column: 126
        }
      },
      "119": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 54
        }
      },
      "120": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 61
        }
      },
      "121": {
        start: {
          line: 233,
          column: 29
        },
        end: {
          line: 233,
          column: 207
        }
      },
      "122": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 236,
          column: 17
        }
      },
      "123": {
        start: {
          line: 235,
          column: 20
        },
        end: {
          line: 235,
          column: 162
        }
      },
      "124": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 168
        }
      },
      "125": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 259,
          column: 13
        }
      },
      "126": {
        start: {
          line: 240,
          column: 36
        },
        end: {
          line: 240,
          column: 111
        }
      },
      "127": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 243,
          column: 17
        }
      },
      "128": {
        start: {
          line: 242,
          column: 20
        },
        end: {
          line: 242,
          column: 46
        }
      },
      "129": {
        start: {
          line: 244,
          column: 39
        },
        end: {
          line: 249,
          column: 18
        }
      },
      "130": {
        start: {
          line: 250,
          column: 35
        },
        end: {
          line: 250,
          column: 126
        }
      },
      "131": {
        start: {
          line: 251,
          column: 33
        },
        end: {
          line: 251,
          column: 227
        }
      },
      "132": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 54
        }
      },
      "133": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 61
        }
      },
      "134": {
        start: {
          line: 254,
          column: 29
        },
        end: {
          line: 254,
          column: 207
        }
      },
      "135": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 257,
          column: 17
        }
      },
      "136": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 162
        }
      },
      "137": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 179
        }
      },
      "138": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "139": {
        start: {
          line: 261,
          column: 36
        },
        end: {
          line: 261,
          column: 91
        }
      },
      "140": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 264,
          column: 17
        }
      },
      "141": {
        start: {
          line: 263,
          column: 20
        },
        end: {
          line: 263,
          column: 46
        }
      },
      "142": {
        start: {
          line: 265,
          column: 39
        },
        end: {
          line: 269,
          column: 18
        }
      },
      "143": {
        start: {
          line: 270,
          column: 33
        },
        end: {
          line: 270,
          column: 227
        }
      },
      "144": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 54
        }
      },
      "145": {
        start: {
          line: 272,
          column: 29
        },
        end: {
          line: 272,
          column: 207
        }
      },
      "146": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 275,
          column: 17
        }
      },
      "147": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 274,
          column: 162
        }
      },
      "148": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 179
        }
      },
      "149": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 50
        }
      },
      "150": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "151": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 55
        }
      },
      "152": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 357,
          column: 10
        }
      },
      "153": {
        start: {
          line: 284,
          column: 29
        },
        end: {
          line: 284,
          column: 43
        }
      },
      "154": {
        start: {
          line: 285,
          column: 32
        },
        end: {
          line: 285,
          column: 34
        }
      },
      "155": {
        start: {
          line: 286,
          column: 39
        },
        end: {
          line: 286,
          column: 98
        }
      },
      "156": {
        start: {
          line: 288,
          column: 32
        },
        end: {
          line: 288,
          column: 36
        }
      },
      "157": {
        start: {
          line: 289,
          column: 33
        },
        end: {
          line: 289,
          column: 37
        }
      },
      "158": {
        start: {
          line: 290,
          column: 39
        },
        end: {
          line: 290,
          column: 48
        }
      },
      "159": {
        start: {
          line: 291,
          column: 40
        },
        end: {
          line: 291,
          column: 49
        }
      },
      "160": {
        start: {
          line: 292,
          column: 34
        },
        end: {
          line: 292,
          column: 69
        }
      },
      "161": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 314,
          column: 13
        }
      },
      "162": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 298,
          column: 38
        }
      },
      "163": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 39
        }
      },
      "164": {
        start: {
          line: 301,
          column: 17
        },
        end: {
          line: 314,
          column: 13
        }
      },
      "165": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 307,
          column: 17
        }
      },
      "166": {
        start: {
          line: 303,
          column: 20
        },
        end: {
          line: 303,
          column: 42
        }
      },
      "167": {
        start: {
          line: 306,
          column: 20
        },
        end: {
          line: 306,
          column: 74
        }
      },
      "168": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 313,
          column: 17
        }
      },
      "169": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 309,
          column: 43
        }
      },
      "170": {
        start: {
          line: 312,
          column: 20
        },
        end: {
          line: 312,
          column: 76
        }
      },
      "171": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 320,
          column: 13
        }
      },
      "172": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 319,
          column: 17
        }
      },
      "173": {
        start: {
          line: 317,
          column: 47
        },
        end: {
          line: 317,
          column: 95
        }
      },
      "174": {
        start: {
          line: 318,
          column: 20
        },
        end: {
          line: 318,
          column: 52
        }
      },
      "175": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "176": {
        start: {
          line: 323,
          column: 37
        },
        end: {
          line: 323,
          column: 78
        }
      },
      "177": {
        start: {
          line: 324,
          column: 39
        },
        end: {
          line: 324,
          column: 120
        }
      },
      "178": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 62
        }
      },
      "179": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 65
        }
      },
      "180": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 75
        }
      },
      "181": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 52
        }
      },
      "182": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 334,
          column: 151
        }
      },
      "183": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 344,
          column: 13
        }
      },
      "184": {
        start: {
          line: 338,
          column: 36
        },
        end: {
          line: 338,
          column: 143
        }
      },
      "185": {
        start: {
          line: 339,
          column: 33
        },
        end: {
          line: 339,
          column: 209
        }
      },
      "186": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 54
        }
      },
      "187": {
        start: {
          line: 341,
          column: 35
        },
        end: {
          line: 341,
          column: 123
        }
      },
      "188": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 61
        }
      },
      "189": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 343,
          column: 326
        }
      },
      "190": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 355,
          column: 13
        }
      },
      "191": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 60
        }
      },
      "192": {
        start: {
          line: 348,
          column: 37
        },
        end: {
          line: 348,
          column: 146
        }
      },
      "193": {
        start: {
          line: 349,
          column: 35
        },
        end: {
          line: 349,
          column: 124
        }
      },
      "194": {
        start: {
          line: 350,
          column: 33
        },
        end: {
          line: 350,
          column: 214
        }
      },
      "195": {
        start: {
          line: 351,
          column: 16
        },
        end: {
          line: 351,
          column: 54
        }
      },
      "196": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 61
        }
      },
      "197": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 134
        }
      },
      "198": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 354,
          column: 52
        }
      },
      "199": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 44
        }
      },
      "200": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 428,
          column: 10
        }
      },
      "201": {
        start: {
          line: 387,
          column: 29
        },
        end: {
          line: 387,
          column: 43
        }
      },
      "202": {
        start: {
          line: 388,
          column: 39
        },
        end: {
          line: 388,
          column: 41
        }
      },
      "203": {
        start: {
          line: 389,
          column: 39
        },
        end: {
          line: 389,
          column: 98
        }
      },
      "204": {
        start: {
          line: 390,
          column: 36
        },
        end: {
          line: 390,
          column: 295
        }
      },
      "205": {
        start: {
          line: 391,
          column: 36
        },
        end: {
          line: 391,
          column: 295
        }
      },
      "206": {
        start: {
          line: 392,
          column: 36
        },
        end: {
          line: 392,
          column: 223
        }
      },
      "207": {
        start: {
          line: 393,
          column: 37
        },
        end: {
          line: 393,
          column: 62
        }
      },
      "208": {
        start: {
          line: 394,
          column: 42
        },
        end: {
          line: 394,
          column: 74
        }
      },
      "209": {
        start: {
          line: 395,
          column: 35
        },
        end: {
          line: 395,
          column: 95
        }
      },
      "210": {
        start: {
          line: 396,
          column: 35
        },
        end: {
          line: 396,
          column: 95
        }
      },
      "211": {
        start: {
          line: 397,
          column: 35
        },
        end: {
          line: 397,
          column: 95
        }
      },
      "212": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 400,
          column: 13
        }
      },
      "213": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 399,
          column: 23
        }
      },
      "214": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 403,
          column: 13
        }
      },
      "215": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 402,
          column: 23
        }
      },
      "216": {
        start: {
          line: 405,
          column: 29
        },
        end: {
          line: 405,
          column: 230
        }
      },
      "217": {
        start: {
          line: 406,
          column: 29
        },
        end: {
          line: 406,
          column: 230
        }
      },
      "218": {
        start: {
          line: 407,
          column: 29
        },
        end: {
          line: 407,
          column: 230
        }
      },
      "219": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 414,
          column: 13
        }
      },
      "220": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 413,
          column: 19
        }
      },
      "221": {
        start: {
          line: 411,
          column: 42
        },
        end: {
          line: 411,
          column: 117
        }
      },
      "222": {
        start: {
          line: 412,
          column: 20
        },
        end: {
          line: 412,
          column: 59
        }
      },
      "223": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 420,
          column: 13
        }
      },
      "224": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 419,
          column: 19
        }
      },
      "225": {
        start: {
          line: 417,
          column: 42
        },
        end: {
          line: 417,
          column: 117
        }
      },
      "226": {
        start: {
          line: 418,
          column: 20
        },
        end: {
          line: 418,
          column: 59
        }
      },
      "227": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 426,
          column: 13
        }
      },
      "228": {
        start: {
          line: 422,
          column: 16
        },
        end: {
          line: 425,
          column: 19
        }
      },
      "229": {
        start: {
          line: 423,
          column: 42
        },
        end: {
          line: 423,
          column: 117
        }
      },
      "230": {
        start: {
          line: 424,
          column: 20
        },
        end: {
          line: 424,
          column: 59
        }
      },
      "231": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 427,
          column: 58
        }
      },
      "232": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 435,
          column: 10
        }
      },
      "233": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 432,
          column: 13
        }
      },
      "234": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 83
        }
      },
      "235": {
        start: {
          line: 433,
          column: 35
        },
        end: {
          line: 433,
          column: 140
        }
      },
      "236": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 434,
          column: 211
        }
      },
      "237": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 442,
          column: 10
        }
      },
      "238": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 439,
          column: 13
        }
      },
      "239": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 438,
          column: 83
        }
      },
      "240": {
        start: {
          line: 440,
          column: 35
        },
        end: {
          line: 440,
          column: 141
        }
      },
      "241": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 441,
          column: 211
        }
      },
      "242": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 455,
          column: 10
        }
      },
      "243": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 446,
          column: 13
        }
      },
      "244": {
        start: {
          line: 445,
          column: 16
        },
        end: {
          line: 445,
          column: 83
        }
      },
      "245": {
        start: {
          line: 448,
          column: 35
        },
        end: {
          line: 453,
          column: 14
        }
      },
      "246": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 214
        }
      },
      "247": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 467,
          column: 10
        }
      },
      "248": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 459,
          column: 13
        }
      },
      "249": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 458,
          column: 83
        }
      },
      "250": {
        start: {
          line: 460,
          column: 35
        },
        end: {
          line: 465,
          column: 14
        }
      },
      "251": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 214
        }
      },
      "252": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 479,
          column: 10
        }
      },
      "253": {
        start: {
          line: 469,
          column: 12
        },
        end: {
          line: 471,
          column: 13
        }
      },
      "254": {
        start: {
          line: 470,
          column: 16
        },
        end: {
          line: 470,
          column: 83
        }
      },
      "255": {
        start: {
          line: 472,
          column: 35
        },
        end: {
          line: 477,
          column: 14
        }
      },
      "256": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 214
        }
      },
      "257": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 514,
          column: 10
        }
      },
      "258": {
        start: {
          line: 481,
          column: 25
        },
        end: {
          line: 481,
          column: 40
        }
      },
      "259": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 484,
          column: 13
        }
      },
      "260": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 483,
          column: 83
        }
      },
      "261": {
        start: {
          line: 485,
          column: 30
        },
        end: {
          line: 485,
          column: 81
        }
      },
      "262": {
        start: {
          line: 485,
          column: 56
        },
        end: {
          line: 485,
          column: 80
        }
      },
      "263": {
        start: {
          line: 486,
          column: 39
        },
        end: {
          line: 486,
          column: 98
        }
      },
      "264": {
        start: {
          line: 487,
          column: 32
        },
        end: {
          line: 487,
          column: 36
        }
      },
      "265": {
        start: {
          line: 488,
          column: 33
        },
        end: {
          line: 488,
          column: 37
        }
      },
      "266": {
        start: {
          line: 489,
          column: 36
        },
        end: {
          line: 489,
          column: 128
        }
      },
      "267": {
        start: {
          line: 490,
          column: 37
        },
        end: {
          line: 490,
          column: 170
        }
      },
      "268": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 508,
          column: 13
        }
      },
      "269": {
        start: {
          line: 492,
          column: 16
        },
        end: {
          line: 492,
          column: 38
        }
      },
      "270": {
        start: {
          line: 493,
          column: 16
        },
        end: {
          line: 493,
          column: 39
        }
      },
      "271": {
        start: {
          line: 495,
          column: 17
        },
        end: {
          line: 508,
          column: 13
        }
      },
      "272": {
        start: {
          line: 496,
          column: 16
        },
        end: {
          line: 501,
          column: 17
        }
      },
      "273": {
        start: {
          line: 497,
          column: 20
        },
        end: {
          line: 497,
          column: 42
        }
      },
      "274": {
        start: {
          line: 500,
          column: 20
        },
        end: {
          line: 500,
          column: 71
        }
      },
      "275": {
        start: {
          line: 502,
          column: 16
        },
        end: {
          line: 507,
          column: 17
        }
      },
      "276": {
        start: {
          line: 503,
          column: 20
        },
        end: {
          line: 503,
          column: 43
        }
      },
      "277": {
        start: {
          line: 506,
          column: 20
        },
        end: {
          line: 506,
          column: 73
        }
      },
      "278": {
        start: {
          line: 509,
          column: 12
        },
        end: {
          line: 513,
          column: 14
        }
      },
      "279": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 558,
          column: 10
        }
      },
      "280": {
        start: {
          line: 516,
          column: 25
        },
        end: {
          line: 516,
          column: 40
        }
      },
      "281": {
        start: {
          line: 517,
          column: 12
        },
        end: {
          line: 519,
          column: 13
        }
      },
      "282": {
        start: {
          line: 518,
          column: 16
        },
        end: {
          line: 518,
          column: 83
        }
      },
      "283": {
        start: {
          line: 520,
          column: 30
        },
        end: {
          line: 520,
          column: 81
        }
      },
      "284": {
        start: {
          line: 520,
          column: 56
        },
        end: {
          line: 520,
          column: 80
        }
      },
      "285": {
        start: {
          line: 521,
          column: 39
        },
        end: {
          line: 521,
          column: 98
        }
      },
      "286": {
        start: {
          line: 522,
          column: 35
        },
        end: {
          line: 522,
          column: 39
        }
      },
      "287": {
        start: {
          line: 523,
          column: 35
        },
        end: {
          line: 523,
          column: 39
        }
      },
      "288": {
        start: {
          line: 524,
          column: 35
        },
        end: {
          line: 524,
          column: 39
        }
      },
      "289": {
        start: {
          line: 525,
          column: 43
        },
        end: {
          line: 525,
          column: 138
        }
      },
      "290": {
        start: {
          line: 526,
          column: 42
        },
        end: {
          line: 526,
          column: 137
        }
      },
      "291": {
        start: {
          line: 527,
          column: 42
        },
        end: {
          line: 527,
          column: 137
        }
      },
      "292": {
        start: {
          line: 528,
          column: 12
        },
        end: {
          line: 552,
          column: 13
        }
      },
      "293": {
        start: {
          line: 529,
          column: 16
        },
        end: {
          line: 529,
          column: 41
        }
      },
      "294": {
        start: {
          line: 530,
          column: 16
        },
        end: {
          line: 530,
          column: 41
        }
      },
      "295": {
        start: {
          line: 531,
          column: 16
        },
        end: {
          line: 531,
          column: 41
        }
      },
      "296": {
        start: {
          line: 533,
          column: 17
        },
        end: {
          line: 552,
          column: 13
        }
      },
      "297": {
        start: {
          line: 534,
          column: 16
        },
        end: {
          line: 539,
          column: 17
        }
      },
      "298": {
        start: {
          line: 535,
          column: 20
        },
        end: {
          line: 535,
          column: 45
        }
      },
      "299": {
        start: {
          line: 538,
          column: 20
        },
        end: {
          line: 538,
          column: 83
        }
      },
      "300": {
        start: {
          line: 540,
          column: 16
        },
        end: {
          line: 545,
          column: 17
        }
      },
      "301": {
        start: {
          line: 541,
          column: 20
        },
        end: {
          line: 541,
          column: 45
        }
      },
      "302": {
        start: {
          line: 544,
          column: 20
        },
        end: {
          line: 544,
          column: 82
        }
      },
      "303": {
        start: {
          line: 546,
          column: 16
        },
        end: {
          line: 551,
          column: 17
        }
      },
      "304": {
        start: {
          line: 547,
          column: 20
        },
        end: {
          line: 547,
          column: 45
        }
      },
      "305": {
        start: {
          line: 550,
          column: 20
        },
        end: {
          line: 550,
          column: 82
        }
      },
      "306": {
        start: {
          line: 553,
          column: 12
        },
        end: {
          line: 557,
          column: 14
        }
      },
      "307": {
        start: {
          line: 559,
          column: 8
        },
        end: {
          line: 602,
          column: 10
        }
      },
      "308": {
        start: {
          line: 560,
          column: 25
        },
        end: {
          line: 560,
          column: 40
        }
      },
      "309": {
        start: {
          line: 561,
          column: 12
        },
        end: {
          line: 563,
          column: 13
        }
      },
      "310": {
        start: {
          line: 562,
          column: 16
        },
        end: {
          line: 562,
          column: 83
        }
      },
      "311": {
        start: {
          line: 564,
          column: 30
        },
        end: {
          line: 564,
          column: 81
        }
      },
      "312": {
        start: {
          line: 564,
          column: 56
        },
        end: {
          line: 564,
          column: 80
        }
      },
      "313": {
        start: {
          line: 565,
          column: 39
        },
        end: {
          line: 565,
          column: 98
        }
      },
      "314": {
        start: {
          line: 566,
          column: 37
        },
        end: {
          line: 566,
          column: 41
        }
      },
      "315": {
        start: {
          line: 567,
          column: 37
        },
        end: {
          line: 567,
          column: 41
        }
      },
      "316": {
        start: {
          line: 568,
          column: 37
        },
        end: {
          line: 568,
          column: 41
        }
      },
      "317": {
        start: {
          line: 569,
          column: 36
        },
        end: {
          line: 569,
          column: 135
        }
      },
      "318": {
        start: {
          line: 570,
          column: 36
        },
        end: {
          line: 570,
          column: 135
        }
      },
      "319": {
        start: {
          line: 571,
          column: 36
        },
        end: {
          line: 571,
          column: 135
        }
      },
      "320": {
        start: {
          line: 572,
          column: 12
        },
        end: {
          line: 596,
          column: 13
        }
      },
      "321": {
        start: {
          line: 573,
          column: 16
        },
        end: {
          line: 573,
          column: 43
        }
      },
      "322": {
        start: {
          line: 574,
          column: 16
        },
        end: {
          line: 574,
          column: 43
        }
      },
      "323": {
        start: {
          line: 575,
          column: 16
        },
        end: {
          line: 575,
          column: 43
        }
      },
      "324": {
        start: {
          line: 577,
          column: 17
        },
        end: {
          line: 596,
          column: 13
        }
      },
      "325": {
        start: {
          line: 578,
          column: 16
        },
        end: {
          line: 583,
          column: 17
        }
      },
      "326": {
        start: {
          line: 579,
          column: 20
        },
        end: {
          line: 579,
          column: 47
        }
      },
      "327": {
        start: {
          line: 582,
          column: 20
        },
        end: {
          line: 582,
          column: 82
        }
      },
      "328": {
        start: {
          line: 584,
          column: 16
        },
        end: {
          line: 589,
          column: 17
        }
      },
      "329": {
        start: {
          line: 585,
          column: 20
        },
        end: {
          line: 585,
          column: 47
        }
      },
      "330": {
        start: {
          line: 588,
          column: 20
        },
        end: {
          line: 588,
          column: 82
        }
      },
      "331": {
        start: {
          line: 590,
          column: 16
        },
        end: {
          line: 595,
          column: 17
        }
      },
      "332": {
        start: {
          line: 591,
          column: 20
        },
        end: {
          line: 591,
          column: 47
        }
      },
      "333": {
        start: {
          line: 594,
          column: 20
        },
        end: {
          line: 594,
          column: 82
        }
      },
      "334": {
        start: {
          line: 597,
          column: 12
        },
        end: {
          line: 601,
          column: 14
        }
      },
      "335": {
        start: {
          line: 603,
          column: 8
        },
        end: {
          line: 605,
          column: 10
        }
      },
      "336": {
        start: {
          line: 604,
          column: 12
        },
        end: {
          line: 604,
          column: 61
        }
      },
      "337": {
        start: {
          line: 606,
          column: 8
        },
        end: {
          line: 606,
          column: 39
        }
      },
      "338": {
        start: {
          line: 607,
          column: 8
        },
        end: {
          line: 607,
          column: 59
        }
      },
      "339": {
        start: {
          line: 610,
          column: 31
        },
        end: {
          line: 610,
          column: 84
        }
      },
      "340": {
        start: {
          line: 611,
          column: 31
        },
        end: {
          line: 611,
          column: 84
        }
      },
      "341": {
        start: {
          line: 612,
          column: 39
        },
        end: {
          line: 612,
          column: 92
        }
      },
      "342": {
        start: {
          line: 612,
          column: 60
        },
        end: {
          line: 612,
          column: 91
        }
      },
      "343": {
        start: {
          line: 613,
          column: 39
        },
        end: {
          line: 613,
          column: 92
        }
      },
      "344": {
        start: {
          line: 613,
          column: 60
        },
        end: {
          line: 613,
          column: 91
        }
      },
      "345": {
        start: {
          line: 616,
          column: 8
        },
        end: {
          line: 618,
          column: 9
        }
      },
      "346": {
        start: {
          line: 617,
          column: 12
        },
        end: {
          line: 617,
          column: 235
        }
      },
      "347": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 621,
          column: 9
        }
      },
      "348": {
        start: {
          line: 620,
          column: 12
        },
        end: {
          line: 620,
          column: 235
        }
      },
      "349": {
        start: {
          line: 622,
          column: 20
        },
        end: {
          line: 622,
          column: 49
        }
      },
      "350": {
        start: {
          line: 623,
          column: 23
        },
        end: {
          line: 630,
          column: 9
        }
      },
      "351": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 631,
          column: 33
        }
      },
      "352": {
        start: {
          line: 634,
          column: 8
        },
        end: {
          line: 634,
          column: 44
        }
      },
      "353": {
        start: {
          line: 637,
          column: 37
        },
        end: {
          line: 637,
          column: 122
        }
      },
      "354": {
        start: {
          line: 638,
          column: 8
        },
        end: {
          line: 640,
          column: 9
        }
      },
      "355": {
        start: {
          line: 639,
          column: 12
        },
        end: {
          line: 639,
          column: 19
        }
      },
      "356": {
        start: {
          line: 642,
          column: 31
        },
        end: {
          line: 642,
          column: 93
        }
      },
      "357": {
        start: {
          line: 643,
          column: 8
        },
        end: {
          line: 643,
          column: 38
        }
      },
      "358": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 644,
          column: 94
        }
      },
      "359": {
        start: {
          line: 647,
          column: 30
        },
        end: {
          line: 647,
          column: 96
        }
      },
      "360": {
        start: {
          line: 648,
          column: 8
        },
        end: {
          line: 652,
          column: 9
        }
      },
      "361": {
        start: {
          line: 649,
          column: 12
        },
        end: {
          line: 651,
          column: 13
        }
      },
      "362": {
        start: {
          line: 650,
          column: 16
        },
        end: {
          line: 650,
          column: 37
        }
      },
      "363": {
        start: {
          line: 654,
          column: 28
        },
        end: {
          line: 654,
          column: 108
        }
      },
      "364": {
        start: {
          line: 655,
          column: 8
        },
        end: {
          line: 659,
          column: 9
        }
      },
      "365": {
        start: {
          line: 656,
          column: 12
        },
        end: {
          line: 658,
          column: 13
        }
      },
      "366": {
        start: {
          line: 657,
          column: 16
        },
        end: {
          line: 657,
          column: 37
        }
      },
      "367": {
        start: {
          line: 661,
          column: 39
        },
        end: {
          line: 661,
          column: 120
        }
      },
      "368": {
        start: {
          line: 662,
          column: 8
        },
        end: {
          line: 664,
          column: 9
        }
      },
      "369": {
        start: {
          line: 663,
          column: 12
        },
        end: {
          line: 663,
          column: 49
        }
      },
      "370": {
        start: {
          line: 665,
          column: 8
        },
        end: {
          line: 670,
          column: 9
        }
      },
      "371": {
        start: {
          line: 666,
          column: 38
        },
        end: {
          line: 666,
          column: 75
        }
      },
      "372": {
        start: {
          line: 667,
          column: 12
        },
        end: {
          line: 669,
          column: 13
        }
      },
      "373": {
        start: {
          line: 668,
          column: 16
        },
        end: {
          line: 668,
          column: 47
        }
      },
      "374": {
        start: {
          line: 673,
          column: 30
        },
        end: {
          line: 673,
          column: 96
        }
      },
      "375": {
        start: {
          line: 674,
          column: 8
        },
        end: {
          line: 678,
          column: 9
        }
      },
      "376": {
        start: {
          line: 675,
          column: 12
        },
        end: {
          line: 677,
          column: 13
        }
      },
      "377": {
        start: {
          line: 676,
          column: 16
        },
        end: {
          line: 676,
          column: 37
        }
      },
      "378": {
        start: {
          line: 680,
          column: 28
        },
        end: {
          line: 680,
          column: 108
        }
      },
      "379": {
        start: {
          line: 681,
          column: 8
        },
        end: {
          line: 685,
          column: 9
        }
      },
      "380": {
        start: {
          line: 682,
          column: 12
        },
        end: {
          line: 684,
          column: 13
        }
      },
      "381": {
        start: {
          line: 683,
          column: 16
        },
        end: {
          line: 683,
          column: 37
        }
      },
      "382": {
        start: {
          line: 686,
          column: 8
        },
        end: {
          line: 696,
          column: 9
        }
      },
      "383": {
        start: {
          line: 688,
          column: 49
        },
        end: {
          line: 688,
          column: 133
        }
      },
      "384": {
        start: {
          line: 689,
          column: 12
        },
        end: {
          line: 691,
          column: 13
        }
      },
      "385": {
        start: {
          line: 690,
          column: 16
        },
        end: {
          line: 690,
          column: 59
        }
      },
      "386": {
        start: {
          line: 692,
          column: 38
        },
        end: {
          line: 692,
          column: 75
        }
      },
      "387": {
        start: {
          line: 693,
          column: 12
        },
        end: {
          line: 695,
          column: 13
        }
      },
      "388": {
        start: {
          line: 694,
          column: 16
        },
        end: {
          line: 694,
          column: 47
        }
      },
      "389": {
        start: {
          line: 699,
          column: 28
        },
        end: {
          line: 701,
          column: 9
        }
      },
      "390": {
        start: {
          line: 702,
          column: 8
        },
        end: {
          line: 705,
          column: 10
        }
      },
      "391": {
        start: {
          line: 709,
          column: 31
        },
        end: {
          line: 709,
          column: 54
        }
      },
      "392": {
        start: {
          line: 710,
          column: 8
        },
        end: {
          line: 712,
          column: 9
        }
      },
      "393": {
        start: {
          line: 711,
          column: 12
        },
        end: {
          line: 711,
          column: 48
        }
      },
      "394": {
        start: {
          line: 713,
          column: 8
        },
        end: {
          line: 721,
          column: 9
        }
      },
      "395": {
        start: {
          line: 714,
          column: 39
        },
        end: {
          line: 714,
          column: 70
        }
      },
      "396": {
        start: {
          line: 715,
          column: 12
        },
        end: {
          line: 720,
          column: 13
        }
      },
      "397": {
        start: {
          line: 716,
          column: 16
        },
        end: {
          line: 716,
          column: 48
        }
      },
      "398": {
        start: {
          line: 719,
          column: 16
        },
        end: {
          line: 719,
          column: 119
        }
      },
      "399": {
        start: {
          line: 722,
          column: 8
        },
        end: {
          line: 722,
          column: 51
        }
      },
      "400": {
        start: {
          line: 728,
          column: 8
        },
        end: {
          line: 749,
          column: 9
        }
      },
      "401": {
        start: {
          line: 730,
          column: 53
        },
        end: {
          line: 730,
          column: 143
        }
      },
      "402": {
        start: {
          line: 731,
          column: 12
        },
        end: {
          line: 748,
          column: 13
        }
      },
      "403": {
        start: {
          line: 732,
          column: 53
        },
        end: {
          line: 732,
          column: 98
        }
      },
      "404": {
        start: {
          line: 733,
          column: 38
        },
        end: {
          line: 733,
          column: 89
        }
      },
      "405": {
        start: {
          line: 733,
          column: 66
        },
        end: {
          line: 733,
          column: 88
        }
      },
      "406": {
        start: {
          line: 735,
          column: 16
        },
        end: {
          line: 737,
          column: 17
        }
      },
      "407": {
        start: {
          line: 736,
          column: 20
        },
        end: {
          line: 736,
          column: 27
        }
      },
      "408": {
        start: {
          line: 739,
          column: 32
        },
        end: {
          line: 739,
          column: 100
        }
      },
      "409": {
        start: {
          line: 739,
          column: 78
        },
        end: {
          line: 739,
          column: 99
        }
      },
      "410": {
        start: {
          line: 740,
          column: 16
        },
        end: {
          line: 747,
          column: 17
        }
      },
      "411": {
        start: {
          line: 741,
          column: 42
        },
        end: {
          line: 741,
          column: 121
        }
      },
      "412": {
        start: {
          line: 741,
          column: 90
        },
        end: {
          line: 741,
          column: 120
        }
      },
      "413": {
        start: {
          line: 742,
          column: 41
        },
        end: {
          line: 745,
          column: 21
        }
      },
      "414": {
        start: {
          line: 746,
          column: 20
        },
        end: {
          line: 746,
          column: 46
        }
      },
      "415": {
        start: {
          line: 752,
          column: 8
        },
        end: {
          line: 752,
          column: 85
        }
      },
      "416": {
        start: {
          line: 755,
          column: 8
        },
        end: {
          line: 757,
          column: 9
        }
      },
      "417": {
        start: {
          line: 756,
          column: 12
        },
        end: {
          line: 756,
          column: 25
        }
      },
      "418": {
        start: {
          line: 758,
          column: 8
        },
        end: {
          line: 758,
          column: 20
        }
      },
      "419": {
        start: {
          line: 761,
          column: 28
        },
        end: {
          line: 761,
          column: 96
        }
      },
      "420": {
        start: {
          line: 762,
          column: 8
        },
        end: {
          line: 765,
          column: 10
        }
      },
      "421": {
        start: {
          line: 766,
          column: 8
        },
        end: {
          line: 766,
          column: 52
        }
      },
      "422": {
        start: {
          line: 769,
          column: 0
        },
        end: {
          line: 769,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 27
          },
          end: {
            line: 608,
            column: 5
          }
        },
        line: 65
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 70,
            column: 22
          },
          end: {
            line: 70,
            column: 23
          }
        },
        loc: {
          start: {
            line: 70,
            column: 31
          },
          end: {
            line: 76,
            column: 9
          }
        },
        line: 70
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 77,
            column: 21
          },
          end: {
            line: 77,
            column: 22
          }
        },
        loc: {
          start: {
            line: 77,
            column: 30
          },
          end: {
            line: 87,
            column: 9
          }
        },
        line: 77
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 81,
            column: 85
          },
          end: {
            line: 81,
            column: 86
          }
        },
        loc: {
          start: {
            line: 81,
            column: 119
          },
          end: {
            line: 85,
            column: 17
          }
        },
        line: 81
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 93,
            column: 22
          },
          end: {
            line: 93,
            column: 23
          }
        },
        loc: {
          start: {
            line: 93,
            column: 47
          },
          end: {
            line: 98,
            column: 9
          }
        },
        line: 93
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 99,
            column: 31
          },
          end: {
            line: 99,
            column: 32
          }
        },
        loc: {
          start: {
            line: 99,
            column: 40
          },
          end: {
            line: 134,
            column: 9
          }
        },
        line: 99
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 100,
            column: 36
          },
          end: {
            line: 100,
            column: 37
          }
        },
        loc: {
          start: {
            line: 100,
            column: 49
          },
          end: {
            line: 133,
            column: 13
          }
        },
        line: 100
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 103,
            column: 103
          },
          end: {
            line: 103,
            column: 104
          }
        },
        loc: {
          start: {
            line: 103,
            column: 108
          },
          end: {
            line: 103,
            column: 132
          }
        },
        line: 103
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 105,
            column: 38
          },
          end: {
            line: 105,
            column: 39
          }
        },
        loc: {
          start: {
            line: 105,
            column: 49
          },
          end: {
            line: 110,
            column: 17
          }
        },
        line: 105
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 135,
            column: 33
          },
          end: {
            line: 135,
            column: 34
          }
        },
        loc: {
          start: {
            line: 135,
            column: 42
          },
          end: {
            line: 164,
            column: 9
          }
        },
        line: 135
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 136,
            column: 36
          },
          end: {
            line: 136,
            column: 37
          }
        },
        loc: {
          start: {
            line: 136,
            column: 49
          },
          end: {
            line: 163,
            column: 13
          }
        },
        line: 136
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 165,
            column: 31
          },
          end: {
            line: 165,
            column: 32
          }
        },
        loc: {
          start: {
            line: 165,
            column: 71
          },
          end: {
            line: 282,
            column: 9
          }
        },
        line: 165
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 182,
            column: 59
          },
          end: {
            line: 182,
            column: 60
          }
        },
        loc: {
          start: {
            line: 182,
            column: 64
          },
          end: {
            line: 182,
            column: 95
          }
        },
        line: 182
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 183,
            column: 59
          },
          end: {
            line: 183,
            column: 60
          }
        },
        loc: {
          start: {
            line: 183,
            column: 64
          },
          end: {
            line: 183,
            column: 95
          }
        },
        line: 183
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 283,
            column: 29
          },
          end: {
            line: 283,
            column: 30
          }
        },
        loc: {
          start: {
            line: 283,
            column: 54
          },
          end: {
            line: 357,
            column: 9
          }
        },
        line: 283
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 385,
            column: 35
          },
          end: {
            line: 385,
            column: 36
          }
        },
        loc: {
          start: {
            line: 385,
            column: 60
          },
          end: {
            line: 428,
            column: 9
          }
        },
        line: 385
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 410,
            column: 33
          },
          end: {
            line: 410,
            column: 34
          }
        },
        loc: {
          start: {
            line: 410,
            column: 46
          },
          end: {
            line: 413,
            column: 17
          }
        },
        line: 410
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 416,
            column: 33
          },
          end: {
            line: 416,
            column: 34
          }
        },
        loc: {
          start: {
            line: 416,
            column: 46
          },
          end: {
            line: 419,
            column: 17
          }
        },
        line: 416
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 422,
            column: 33
          },
          end: {
            line: 422,
            column: 34
          }
        },
        loc: {
          start: {
            line: 422,
            column: 46
          },
          end: {
            line: 425,
            column: 17
          }
        },
        line: 422
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 429,
            column: 35
          },
          end: {
            line: 429,
            column: 36
          }
        },
        loc: {
          start: {
            line: 429,
            column: 71
          },
          end: {
            line: 435,
            column: 9
          }
        },
        line: 429
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 436,
            column: 36
          },
          end: {
            line: 436,
            column: 37
          }
        },
        loc: {
          start: {
            line: 436,
            column: 72
          },
          end: {
            line: 442,
            column: 9
          }
        },
        line: 436
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 443,
            column: 37
          },
          end: {
            line: 443,
            column: 38
          }
        },
        loc: {
          start: {
            line: 443,
            column: 73
          },
          end: {
            line: 455,
            column: 9
          }
        },
        line: 443
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 456,
            column: 38
          },
          end: {
            line: 456,
            column: 39
          }
        },
        loc: {
          start: {
            line: 456,
            column: 74
          },
          end: {
            line: 467,
            column: 9
          }
        },
        line: 456
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 468,
            column: 38
          },
          end: {
            line: 468,
            column: 39
          }
        },
        loc: {
          start: {
            line: 468,
            column: 74
          },
          end: {
            line: 479,
            column: 9
          }
        },
        line: 468
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 480,
            column: 34
          },
          end: {
            line: 480,
            column: 35
          }
        },
        loc: {
          start: {
            line: 480,
            column: 49
          },
          end: {
            line: 514,
            column: 9
          }
        },
        line: 480
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 485,
            column: 51
          },
          end: {
            line: 485,
            column: 52
          }
        },
        loc: {
          start: {
            line: 485,
            column: 56
          },
          end: {
            line: 485,
            column: 80
          }
        },
        line: 485
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 515,
            column: 37
          },
          end: {
            line: 515,
            column: 38
          }
        },
        loc: {
          start: {
            line: 515,
            column: 52
          },
          end: {
            line: 558,
            column: 9
          }
        },
        line: 515
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 520,
            column: 51
          },
          end: {
            line: 520,
            column: 52
          }
        },
        loc: {
          start: {
            line: 520,
            column: 56
          },
          end: {
            line: 520,
            column: 80
          }
        },
        line: 520
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 559,
            column: 41
          },
          end: {
            line: 559,
            column: 42
          }
        },
        loc: {
          start: {
            line: 559,
            column: 56
          },
          end: {
            line: 602,
            column: 9
          }
        },
        line: 559
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 564,
            column: 51
          },
          end: {
            line: 564,
            column: 52
          }
        },
        loc: {
          start: {
            line: 564,
            column: 56
          },
          end: {
            line: 564,
            column: 80
          }
        },
        line: 564
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 603,
            column: 27
          },
          end: {
            line: 603,
            column: 28
          }
        },
        loc: {
          start: {
            line: 603,
            column: 37
          },
          end: {
            line: 605,
            column: 9
          }
        },
        line: 603
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 609,
            column: 4
          },
          end: {
            line: 609,
            column: 5
          }
        },
        loc: {
          start: {
            line: 609,
            column: 44
          },
          end: {
            line: 632,
            column: 5
          }
        },
        line: 609
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 612,
            column: 55
          },
          end: {
            line: 612,
            column: 56
          }
        },
        loc: {
          start: {
            line: 612,
            column: 60
          },
          end: {
            line: 612,
            column: 91
          }
        },
        line: 612
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 613,
            column: 55
          },
          end: {
            line: 613,
            column: 56
          }
        },
        loc: {
          start: {
            line: 613,
            column: 60
          },
          end: {
            line: 613,
            column: 91
          }
        },
        line: 613
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 633,
            column: 4
          },
          end: {
            line: 633,
            column: 5
          }
        },
        loc: {
          start: {
            line: 633,
            column: 25
          },
          end: {
            line: 635,
            column: 5
          }
        },
        line: 633
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 636,
            column: 4
          },
          end: {
            line: 636,
            column: 5
          }
        },
        loc: {
          start: {
            line: 636,
            column: 59
          },
          end: {
            line: 645,
            column: 5
          }
        },
        line: 636
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 646,
            column: 4
          },
          end: {
            line: 646,
            column: 5
          }
        },
        loc: {
          start: {
            line: 646,
            column: 35
          },
          end: {
            line: 671,
            column: 5
          }
        },
        line: 646
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 672,
            column: 4
          },
          end: {
            line: 672,
            column: 5
          }
        },
        loc: {
          start: {
            line: 672,
            column: 38
          },
          end: {
            line: 697,
            column: 5
          }
        },
        line: 672
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 698,
            column: 4
          },
          end: {
            line: 698,
            column: 5
          }
        },
        loc: {
          start: {
            line: 698,
            column: 18
          },
          end: {
            line: 706,
            column: 5
          }
        },
        line: 698
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 707,
            column: 4
          },
          end: {
            line: 707,
            column: 5
          }
        },
        loc: {
          start: {
            line: 707,
            column: 33
          },
          end: {
            line: 723,
            column: 5
          }
        },
        line: 707
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 727,
            column: 4
          },
          end: {
            line: 727,
            column: 5
          }
        },
        loc: {
          start: {
            line: 727,
            column: 44
          },
          end: {
            line: 750,
            column: 5
          }
        },
        line: 727
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 733,
            column: 61
          },
          end: {
            line: 733,
            column: 62
          }
        },
        loc: {
          start: {
            line: 733,
            column: 66
          },
          end: {
            line: 733,
            column: 88
          }
        },
        line: 733
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 739,
            column: 73
          },
          end: {
            line: 739,
            column: 74
          }
        },
        loc: {
          start: {
            line: 739,
            column: 78
          },
          end: {
            line: 739,
            column: 99
          }
        },
        line: 739
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 741,
            column: 85
          },
          end: {
            line: 741,
            column: 86
          }
        },
        loc: {
          start: {
            line: 741,
            column: 90
          },
          end: {
            line: 741,
            column: 120
          }
        },
        line: 741
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 751,
            column: 4
          },
          end: {
            line: 751,
            column: 5
          }
        },
        loc: {
          start: {
            line: 751,
            column: 32
          },
          end: {
            line: 753,
            column: 5
          }
        },
        line: 751
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 754,
            column: 4
          },
          end: {
            line: 754,
            column: 5
          }
        },
        loc: {
          start: {
            line: 754,
            column: 45
          },
          end: {
            line: 759,
            column: 5
          }
        },
        line: 754
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 760,
            column: 4
          },
          end: {
            line: 760,
            column: 5
          }
        },
        loc: {
          start: {
            line: 760,
            column: 56
          },
          end: {
            line: 767,
            column: 5
          }
        },
        line: 760
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 65,
            column: 16
          },
          end: {
            line: 65,
            column: 25
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 65,
            column: 23
          },
          end: {
            line: 65,
            column: 25
          }
        }],
        line: 65
      },
      "1": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }],
        line: 80
      },
      "2": {
        loc: {
          start: {
            line: 81,
            column: 31
          },
          end: {
            line: 81,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 31
          },
          end: {
            line: 81,
            column: 69
          }
        }, {
          start: {
            line: 81,
            column: 73
          },
          end: {
            line: 81,
            column: 75
          }
        }],
        line: 81
      },
      "3": {
        loc: {
          start: {
            line: 103,
            column: 34
          },
          end: {
            line: 103,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 86
          },
          end: {
            line: 103,
            column: 92
          }
        }, {
          start: {
            line: 103,
            column: 95
          },
          end: {
            line: 103,
            column: 133
          }
        }],
        line: 103
      },
      "4": {
        loc: {
          start: {
            line: 103,
            column: 34
          },
          end: {
            line: 103,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 34
          },
          end: {
            line: 103,
            column: 66
          }
        }, {
          start: {
            line: 103,
            column: 70
          },
          end: {
            line: 103,
            column: 83
          }
        }],
        line: 103
      },
      "5": {
        loc: {
          start: {
            line: 107,
            column: 20
          },
          end: {
            line: 109,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 20
          },
          end: {
            line: 109,
            column: 21
          }
        }, {
          start: {
            line: 107,
            column: 20
          },
          end: {
            line: 109,
            column: 21
          }
        }],
        line: 107
      },
      "6": {
        loc: {
          start: {
            line: 117,
            column: 38
          },
          end: {
            line: 117,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 61
          },
          end: {
            line: 117,
            column: 65
          }
        }, {
          start: {
            line: 117,
            column: 68
          },
          end: {
            line: 117,
            column: 73
          }
        }],
        line: 117
      },
      "7": {
        loc: {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 131,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 131,
            column: 17
          }
        }, {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 131,
            column: 17
          }
        }],
        line: 118
      },
      "8": {
        loc: {
          start: {
            line: 141,
            column: 38
          },
          end: {
            line: 141,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 61
          },
          end: {
            line: 141,
            column: 65
          }
        }, {
          start: {
            line: 141,
            column: 68
          },
          end: {
            line: 141,
            column: 73
          }
        }],
        line: 141
      },
      "9": {
        loc: {
          start: {
            line: 145,
            column: 39
          },
          end: {
            line: 145,
            column: 157
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 76
          },
          end: {
            line: 145,
            column: 115
          }
        }, {
          start: {
            line: 145,
            column: 118
          },
          end: {
            line: 145,
            column: 157
          }
        }],
        line: 145
      },
      "10": {
        loc: {
          start: {
            line: 167,
            column: 34
          },
          end: {
            line: 167,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 167,
            column: 57
          },
          end: {
            line: 167,
            column: 61
          }
        }, {
          start: {
            line: 167,
            column: 64
          },
          end: {
            line: 167,
            column: 69
          }
        }],
        line: 167
      },
      "11": {
        loc: {
          start: {
            line: 186,
            column: 32
          },
          end: {
            line: 186,
            column: 136
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 186,
            column: 110
          },
          end: {
            line: 186,
            column: 124
          }
        }, {
          start: {
            line: 186,
            column: 127
          },
          end: {
            line: 186,
            column: 136
          }
        }],
        line: 186
      },
      "12": {
        loc: {
          start: {
            line: 187,
            column: 32
          },
          end: {
            line: 187,
            column: 136
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 187,
            column: 110
          },
          end: {
            line: 187,
            column: 124
          }
        }, {
          start: {
            line: 187,
            column: 127
          },
          end: {
            line: 187,
            column: 136
          }
        }],
        line: 187
      },
      "13": {
        loc: {
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }],
        line: 190
      },
      "14": {
        loc: {
          start: {
            line: 195,
            column: 17
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 17
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: 195,
            column: 17
          },
          end: {
            line: 214,
            column: 13
          }
        }],
        line: 195
      },
      "15": {
        loc: {
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 201,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 201,
            column: 17
          }
        }, {
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 201,
            column: 17
          }
        }],
        line: 196
      },
      "16": {
        loc: {
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 207,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 207,
            column: 17
          }
        }, {
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 207,
            column: 17
          }
        }],
        line: 202
      },
      "17": {
        loc: {
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        }, {
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        }],
        line: 208
      },
      "18": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 238,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 238,
            column: 13
          }
        }, {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 238,
            column: 13
          }
        }],
        line: 217
      },
      "19": {
        loc: {
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 221,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 221,
            column: 17
          }
        }, {
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 221,
            column: 17
          }
        }],
        line: 219
      },
      "20": {
        loc: {
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 236,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 236,
            column: 17
          }
        }, {
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 236,
            column: 17
          }
        }],
        line: 234
      },
      "21": {
        loc: {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        }, {
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        }],
        line: 239
      },
      "22": {
        loc: {
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 243,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 243,
            column: 17
          }
        }, {
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 243,
            column: 17
          }
        }],
        line: 241
      },
      "23": {
        loc: {
          start: {
            line: 255,
            column: 16
          },
          end: {
            line: 257,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 16
          },
          end: {
            line: 257,
            column: 17
          }
        }, {
          start: {
            line: 255,
            column: 16
          },
          end: {
            line: 257,
            column: 17
          }
        }],
        line: 255
      },
      "24": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        }, {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        }],
        line: 260
      },
      "25": {
        loc: {
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 264,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 264,
            column: 17
          }
        }, {
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 264,
            column: 17
          }
        }],
        line: 262
      },
      "26": {
        loc: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 275,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 275,
            column: 17
          }
        }, {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 275,
            column: 17
          }
        }],
        line: 273
      },
      "27": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        }, {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        }],
        line: 279
      },
      "28": {
        loc: {
          start: {
            line: 279,
            column: 16
          },
          end: {
            line: 279,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 16
          },
          end: {
            line: 279,
            column: 32
          }
        }, {
          start: {
            line: 279,
            column: 36
          },
          end: {
            line: 279,
            column: 52
          }
        }, {
          start: {
            line: 279,
            column: 56
          },
          end: {
            line: 279,
            column: 72
          }
        }],
        line: 279
      },
      "29": {
        loc: {
          start: {
            line: 292,
            column: 34
          },
          end: {
            line: 292,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 292,
            column: 57
          },
          end: {
            line: 292,
            column: 61
          }
        }, {
          start: {
            line: 292,
            column: 64
          },
          end: {
            line: 292,
            column: 69
          }
        }],
        line: 292
      },
      "30": {
        loc: {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        }, {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        }],
        line: 297
      },
      "31": {
        loc: {
          start: {
            line: 301,
            column: 17
          },
          end: {
            line: 314,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 17
          },
          end: {
            line: 314,
            column: 13
          }
        }, {
          start: {
            line: 301,
            column: 17
          },
          end: {
            line: 314,
            column: 13
          }
        }],
        line: 301
      },
      "32": {
        loc: {
          start: {
            line: 302,
            column: 16
          },
          end: {
            line: 307,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 16
          },
          end: {
            line: 307,
            column: 17
          }
        }, {
          start: {
            line: 302,
            column: 16
          },
          end: {
            line: 307,
            column: 17
          }
        }],
        line: 302
      },
      "33": {
        loc: {
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 313,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 313,
            column: 17
          }
        }, {
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 313,
            column: 17
          }
        }],
        line: 308
      },
      "34": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 320,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 320,
            column: 13
          }
        }, {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 320,
            column: 13
          }
        }],
        line: 315
      },
      "35": {
        loc: {
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 319,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 319,
            column: 17
          }
        }, {
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 319,
            column: 17
          }
        }],
        line: 316
      },
      "36": {
        loc: {
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        }, {
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        }],
        line: 322
      },
      "37": {
        loc: {
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        }, {
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 344,
            column: 13
          }
        }],
        line: 337
      },
      "38": {
        loc: {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 355,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 355,
            column: 13
          }
        }, {
          start: {
            line: 345,
            column: 12
          },
          end: {
            line: 355,
            column: 13
          }
        }],
        line: 345
      },
      "39": {
        loc: {
          start: {
            line: 390,
            column: 36
          },
          end: {
            line: 390,
            column: 295
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 390,
            column: 37
          },
          end: {
            line: 390,
            column: 191
          }
        }, {
          start: {
            line: 390,
            column: 196
          },
          end: {
            line: 390,
            column: 295
          }
        }],
        line: 390
      },
      "40": {
        loc: {
          start: {
            line: 390,
            column: 37
          },
          end: {
            line: 390,
            column: 191
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 390,
            column: 173
          },
          end: {
            line: 390,
            column: 179
          }
        }, {
          start: {
            line: 390,
            column: 182
          },
          end: {
            line: 390,
            column: 191
          }
        }],
        line: 390
      },
      "41": {
        loc: {
          start: {
            line: 390,
            column: 37
          },
          end: {
            line: 390,
            column: 170
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 390,
            column: 37
          },
          end: {
            line: 390,
            column: 153
          }
        }, {
          start: {
            line: 390,
            column: 157
          },
          end: {
            line: 390,
            column: 170
          }
        }],
        line: 390
      },
      "42": {
        loc: {
          start: {
            line: 390,
            column: 43
          },
          end: {
            line: 390,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 390,
            column: 106
          },
          end: {
            line: 390,
            column: 112
          }
        }, {
          start: {
            line: 390,
            column: 115
          },
          end: {
            line: 390,
            column: 143
          }
        }],
        line: 390
      },
      "43": {
        loc: {
          start: {
            line: 390,
            column: 43
          },
          end: {
            line: 390,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 390,
            column: 43
          },
          end: {
            line: 390,
            column: 70
          }
        }, {
          start: {
            line: 390,
            column: 74
          },
          end: {
            line: 390,
            column: 103
          }
        }],
        line: 390
      },
      "44": {
        loc: {
          start: {
            line: 391,
            column: 36
          },
          end: {
            line: 391,
            column: 295
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 37
          },
          end: {
            line: 391,
            column: 191
          }
        }, {
          start: {
            line: 391,
            column: 196
          },
          end: {
            line: 391,
            column: 295
          }
        }],
        line: 391
      },
      "45": {
        loc: {
          start: {
            line: 391,
            column: 37
          },
          end: {
            line: 391,
            column: 191
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 391,
            column: 173
          },
          end: {
            line: 391,
            column: 179
          }
        }, {
          start: {
            line: 391,
            column: 182
          },
          end: {
            line: 391,
            column: 191
          }
        }],
        line: 391
      },
      "46": {
        loc: {
          start: {
            line: 391,
            column: 37
          },
          end: {
            line: 391,
            column: 170
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 37
          },
          end: {
            line: 391,
            column: 153
          }
        }, {
          start: {
            line: 391,
            column: 157
          },
          end: {
            line: 391,
            column: 170
          }
        }],
        line: 391
      },
      "47": {
        loc: {
          start: {
            line: 391,
            column: 43
          },
          end: {
            line: 391,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 391,
            column: 106
          },
          end: {
            line: 391,
            column: 112
          }
        }, {
          start: {
            line: 391,
            column: 115
          },
          end: {
            line: 391,
            column: 143
          }
        }],
        line: 391
      },
      "48": {
        loc: {
          start: {
            line: 391,
            column: 43
          },
          end: {
            line: 391,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 43
          },
          end: {
            line: 391,
            column: 70
          }
        }, {
          start: {
            line: 391,
            column: 74
          },
          end: {
            line: 391,
            column: 103
          }
        }],
        line: 391
      },
      "49": {
        loc: {
          start: {
            line: 392,
            column: 36
          },
          end: {
            line: 392,
            column: 223
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 37
          },
          end: {
            line: 392,
            column: 119
          }
        }, {
          start: {
            line: 392,
            column: 124
          },
          end: {
            line: 392,
            column: 223
          }
        }],
        line: 392
      },
      "50": {
        loc: {
          start: {
            line: 392,
            column: 37
          },
          end: {
            line: 392,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 392,
            column: 101
          },
          end: {
            line: 392,
            column: 107
          }
        }, {
          start: {
            line: 392,
            column: 110
          },
          end: {
            line: 392,
            column: 119
          }
        }],
        line: 392
      },
      "51": {
        loc: {
          start: {
            line: 392,
            column: 37
          },
          end: {
            line: 392,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 37
          },
          end: {
            line: 392,
            column: 81
          }
        }, {
          start: {
            line: 392,
            column: 85
          },
          end: {
            line: 392,
            column: 98
          }
        }],
        line: 392
      },
      "52": {
        loc: {
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 400,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 400,
            column: 13
          }
        }, {
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 400,
            column: 13
          }
        }],
        line: 398
      },
      "53": {
        loc: {
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 403,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 403,
            column: 13
          }
        }, {
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 403,
            column: 13
          }
        }],
        line: 401
      },
      "54": {
        loc: {
          start: {
            line: 401,
            column: 16
          },
          end: {
            line: 401,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 16
          },
          end: {
            line: 401,
            column: 37
          }
        }, {
          start: {
            line: 401,
            column: 41
          },
          end: {
            line: 401,
            column: 78
          }
        }],
        line: 401
      },
      "55": {
        loc: {
          start: {
            line: 405,
            column: 29
          },
          end: {
            line: 405,
            column: 230
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 30
          },
          end: {
            line: 405,
            column: 138
          }
        }, {
          start: {
            line: 405,
            column: 143
          },
          end: {
            line: 405,
            column: 230
          }
        }],
        line: 405
      },
      "56": {
        loc: {
          start: {
            line: 405,
            column: 30
          },
          end: {
            line: 405,
            column: 138
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 405,
            column: 99
          },
          end: {
            line: 405,
            column: 105
          }
        }, {
          start: {
            line: 405,
            column: 108
          },
          end: {
            line: 405,
            column: 138
          }
        }],
        line: 405
      },
      "57": {
        loc: {
          start: {
            line: 405,
            column: 30
          },
          end: {
            line: 405,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 30
          },
          end: {
            line: 405,
            column: 60
          }
        }, {
          start: {
            line: 405,
            column: 64
          },
          end: {
            line: 405,
            column: 96
          }
        }],
        line: 405
      },
      "58": {
        loc: {
          start: {
            line: 406,
            column: 29
          },
          end: {
            line: 406,
            column: 230
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 406,
            column: 30
          },
          end: {
            line: 406,
            column: 138
          }
        }, {
          start: {
            line: 406,
            column: 143
          },
          end: {
            line: 406,
            column: 230
          }
        }],
        line: 406
      },
      "59": {
        loc: {
          start: {
            line: 406,
            column: 30
          },
          end: {
            line: 406,
            column: 138
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 406,
            column: 99
          },
          end: {
            line: 406,
            column: 105
          }
        }, {
          start: {
            line: 406,
            column: 108
          },
          end: {
            line: 406,
            column: 138
          }
        }],
        line: 406
      },
      "60": {
        loc: {
          start: {
            line: 406,
            column: 30
          },
          end: {
            line: 406,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 406,
            column: 30
          },
          end: {
            line: 406,
            column: 60
          }
        }, {
          start: {
            line: 406,
            column: 64
          },
          end: {
            line: 406,
            column: 96
          }
        }],
        line: 406
      },
      "61": {
        loc: {
          start: {
            line: 407,
            column: 29
          },
          end: {
            line: 407,
            column: 230
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 407,
            column: 30
          },
          end: {
            line: 407,
            column: 138
          }
        }, {
          start: {
            line: 407,
            column: 143
          },
          end: {
            line: 407,
            column: 230
          }
        }],
        line: 407
      },
      "62": {
        loc: {
          start: {
            line: 407,
            column: 30
          },
          end: {
            line: 407,
            column: 138
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 407,
            column: 99
          },
          end: {
            line: 407,
            column: 105
          }
        }, {
          start: {
            line: 407,
            column: 108
          },
          end: {
            line: 407,
            column: 138
          }
        }],
        line: 407
      },
      "63": {
        loc: {
          start: {
            line: 407,
            column: 30
          },
          end: {
            line: 407,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 407,
            column: 30
          },
          end: {
            line: 407,
            column: 60
          }
        }, {
          start: {
            line: 407,
            column: 64
          },
          end: {
            line: 407,
            column: 96
          }
        }],
        line: 407
      },
      "64": {
        loc: {
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 414,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 414,
            column: 13
          }
        }, {
          start: {
            line: 409,
            column: 12
          },
          end: {
            line: 414,
            column: 13
          }
        }],
        line: 409
      },
      "65": {
        loc: {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 420,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 420,
            column: 13
          }
        }, {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 420,
            column: 13
          }
        }],
        line: 415
      },
      "66": {
        loc: {
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 426,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 426,
            column: 13
          }
        }, {
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 426,
            column: 13
          }
        }],
        line: 421
      },
      "67": {
        loc: {
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 432,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 432,
            column: 13
          }
        }, {
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 432,
            column: 13
          }
        }],
        line: 430
      },
      "68": {
        loc: {
          start: {
            line: 433,
            column: 94
          },
          end: {
            line: 433,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 433,
            column: 117
          },
          end: {
            line: 433,
            column: 121
          }
        }, {
          start: {
            line: 433,
            column: 124
          },
          end: {
            line: 433,
            column: 129
          }
        }],
        line: 433
      },
      "69": {
        loc: {
          start: {
            line: 437,
            column: 12
          },
          end: {
            line: 439,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 12
          },
          end: {
            line: 439,
            column: 13
          }
        }, {
          start: {
            line: 437,
            column: 12
          },
          end: {
            line: 439,
            column: 13
          }
        }],
        line: 437
      },
      "70": {
        loc: {
          start: {
            line: 440,
            column: 95
          },
          end: {
            line: 440,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 440,
            column: 118
          },
          end: {
            line: 440,
            column: 122
          }
        }, {
          start: {
            line: 440,
            column: 125
          },
          end: {
            line: 440,
            column: 130
          }
        }],
        line: 440
      },
      "71": {
        loc: {
          start: {
            line: 444,
            column: 12
          },
          end: {
            line: 446,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 444,
            column: 12
          },
          end: {
            line: 446,
            column: 13
          }
        }, {
          start: {
            line: 444,
            column: 12
          },
          end: {
            line: 446,
            column: 13
          }
        }],
        line: 444
      },
      "72": {
        loc: {
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 459,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 459,
            column: 13
          }
        }, {
          start: {
            line: 457,
            column: 12
          },
          end: {
            line: 459,
            column: 13
          }
        }],
        line: 457
      },
      "73": {
        loc: {
          start: {
            line: 469,
            column: 12
          },
          end: {
            line: 471,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 12
          },
          end: {
            line: 471,
            column: 13
          }
        }, {
          start: {
            line: 469,
            column: 12
          },
          end: {
            line: 471,
            column: 13
          }
        }],
        line: 469
      },
      "74": {
        loc: {
          start: {
            line: 482,
            column: 12
          },
          end: {
            line: 484,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 482,
            column: 12
          },
          end: {
            line: 484,
            column: 13
          }
        }, {
          start: {
            line: 482,
            column: 12
          },
          end: {
            line: 484,
            column: 13
          }
        }],
        line: 482
      },
      "75": {
        loc: {
          start: {
            line: 491,
            column: 12
          },
          end: {
            line: 508,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 491,
            column: 12
          },
          end: {
            line: 508,
            column: 13
          }
        }, {
          start: {
            line: 491,
            column: 12
          },
          end: {
            line: 508,
            column: 13
          }
        }],
        line: 491
      },
      "76": {
        loc: {
          start: {
            line: 495,
            column: 17
          },
          end: {
            line: 508,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 495,
            column: 17
          },
          end: {
            line: 508,
            column: 13
          }
        }, {
          start: {
            line: 495,
            column: 17
          },
          end: {
            line: 508,
            column: 13
          }
        }],
        line: 495
      },
      "77": {
        loc: {
          start: {
            line: 496,
            column: 16
          },
          end: {
            line: 501,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 496,
            column: 16
          },
          end: {
            line: 501,
            column: 17
          }
        }, {
          start: {
            line: 496,
            column: 16
          },
          end: {
            line: 501,
            column: 17
          }
        }],
        line: 496
      },
      "78": {
        loc: {
          start: {
            line: 502,
            column: 16
          },
          end: {
            line: 507,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 16
          },
          end: {
            line: 507,
            column: 17
          }
        }, {
          start: {
            line: 502,
            column: 16
          },
          end: {
            line: 507,
            column: 17
          }
        }],
        line: 502
      },
      "79": {
        loc: {
          start: {
            line: 510,
            column: 53
          },
          end: {
            line: 510,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 510,
            column: 69
          },
          end: {
            line: 510,
            column: 88
          }
        }, {
          start: {
            line: 510,
            column: 91
          },
          end: {
            line: 510,
            column: 93
          }
        }],
        line: 510
      },
      "80": {
        loc: {
          start: {
            line: 511,
            column: 54
          },
          end: {
            line: 511,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 511,
            column: 71
          },
          end: {
            line: 511,
            column: 91
          }
        }, {
          start: {
            line: 511,
            column: 94
          },
          end: {
            line: 511,
            column: 96
          }
        }],
        line: 511
      },
      "81": {
        loc: {
          start: {
            line: 512,
            column: 54
          },
          end: {
            line: 512,
            column: 177
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 512,
            column: 77
          },
          end: {
            line: 512,
            column: 172
          }
        }, {
          start: {
            line: 512,
            column: 175
          },
          end: {
            line: 512,
            column: 177
          }
        }],
        line: 512
      },
      "82": {
        loc: {
          start: {
            line: 517,
            column: 12
          },
          end: {
            line: 519,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 517,
            column: 12
          },
          end: {
            line: 519,
            column: 13
          }
        }, {
          start: {
            line: 517,
            column: 12
          },
          end: {
            line: 519,
            column: 13
          }
        }],
        line: 517
      },
      "83": {
        loc: {
          start: {
            line: 528,
            column: 12
          },
          end: {
            line: 552,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 528,
            column: 12
          },
          end: {
            line: 552,
            column: 13
          }
        }, {
          start: {
            line: 528,
            column: 12
          },
          end: {
            line: 552,
            column: 13
          }
        }],
        line: 528
      },
      "84": {
        loc: {
          start: {
            line: 533,
            column: 17
          },
          end: {
            line: 552,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 533,
            column: 17
          },
          end: {
            line: 552,
            column: 13
          }
        }, {
          start: {
            line: 533,
            column: 17
          },
          end: {
            line: 552,
            column: 13
          }
        }],
        line: 533
      },
      "85": {
        loc: {
          start: {
            line: 534,
            column: 16
          },
          end: {
            line: 539,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 534,
            column: 16
          },
          end: {
            line: 539,
            column: 17
          }
        }, {
          start: {
            line: 534,
            column: 16
          },
          end: {
            line: 539,
            column: 17
          }
        }],
        line: 534
      },
      "86": {
        loc: {
          start: {
            line: 540,
            column: 16
          },
          end: {
            line: 545,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 540,
            column: 16
          },
          end: {
            line: 545,
            column: 17
          }
        }, {
          start: {
            line: 540,
            column: 16
          },
          end: {
            line: 545,
            column: 17
          }
        }],
        line: 540
      },
      "87": {
        loc: {
          start: {
            line: 546,
            column: 16
          },
          end: {
            line: 551,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 546,
            column: 16
          },
          end: {
            line: 551,
            column: 17
          }
        }, {
          start: {
            line: 546,
            column: 16
          },
          end: {
            line: 551,
            column: 17
          }
        }],
        line: 546
      },
      "88": {
        loc: {
          start: {
            line: 554,
            column: 59
          },
          end: {
            line: 554,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 554,
            column: 78
          },
          end: {
            line: 554,
            column: 104
          }
        }, {
          start: {
            line: 554,
            column: 107
          },
          end: {
            line: 554,
            column: 109
          }
        }],
        line: 554
      },
      "89": {
        loc: {
          start: {
            line: 555,
            column: 59
          },
          end: {
            line: 555,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 555,
            column: 78
          },
          end: {
            line: 555,
            column: 103
          }
        }, {
          start: {
            line: 555,
            column: 106
          },
          end: {
            line: 555,
            column: 108
          }
        }],
        line: 555
      },
      "90": {
        loc: {
          start: {
            line: 556,
            column: 59
          },
          end: {
            line: 556,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 556,
            column: 78
          },
          end: {
            line: 556,
            column: 103
          }
        }, {
          start: {
            line: 556,
            column: 106
          },
          end: {
            line: 556,
            column: 108
          }
        }],
        line: 556
      },
      "91": {
        loc: {
          start: {
            line: 561,
            column: 12
          },
          end: {
            line: 563,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 561,
            column: 12
          },
          end: {
            line: 563,
            column: 13
          }
        }, {
          start: {
            line: 561,
            column: 12
          },
          end: {
            line: 563,
            column: 13
          }
        }],
        line: 561
      },
      "92": {
        loc: {
          start: {
            line: 572,
            column: 12
          },
          end: {
            line: 596,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 572,
            column: 12
          },
          end: {
            line: 596,
            column: 13
          }
        }, {
          start: {
            line: 572,
            column: 12
          },
          end: {
            line: 596,
            column: 13
          }
        }],
        line: 572
      },
      "93": {
        loc: {
          start: {
            line: 572,
            column: 16
          },
          end: {
            line: 572,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 572,
            column: 16
          },
          end: {
            line: 572,
            column: 57
          }
        }, {
          start: {
            line: 572,
            column: 61
          },
          end: {
            line: 572,
            column: 109
          }
        }],
        line: 572
      },
      "94": {
        loc: {
          start: {
            line: 577,
            column: 17
          },
          end: {
            line: 596,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 577,
            column: 17
          },
          end: {
            line: 596,
            column: 13
          }
        }, {
          start: {
            line: 577,
            column: 17
          },
          end: {
            line: 596,
            column: 13
          }
        }],
        line: 577
      },
      "95": {
        loc: {
          start: {
            line: 578,
            column: 16
          },
          end: {
            line: 583,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 578,
            column: 16
          },
          end: {
            line: 583,
            column: 17
          }
        }, {
          start: {
            line: 578,
            column: 16
          },
          end: {
            line: 583,
            column: 17
          }
        }],
        line: 578
      },
      "96": {
        loc: {
          start: {
            line: 584,
            column: 16
          },
          end: {
            line: 589,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 584,
            column: 16
          },
          end: {
            line: 589,
            column: 17
          }
        }, {
          start: {
            line: 584,
            column: 16
          },
          end: {
            line: 589,
            column: 17
          }
        }],
        line: 584
      },
      "97": {
        loc: {
          start: {
            line: 590,
            column: 16
          },
          end: {
            line: 595,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 590,
            column: 16
          },
          end: {
            line: 595,
            column: 17
          }
        }, {
          start: {
            line: 590,
            column: 16
          },
          end: {
            line: 595,
            column: 17
          }
        }],
        line: 590
      },
      "98": {
        loc: {
          start: {
            line: 598,
            column: 66
          },
          end: {
            line: 598,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 598,
            column: 87
          },
          end: {
            line: 598,
            column: 104
          }
        }, {
          start: {
            line: 598,
            column: 107
          },
          end: {
            line: 598,
            column: 109
          }
        }],
        line: 598
      },
      "99": {
        loc: {
          start: {
            line: 599,
            column: 66
          },
          end: {
            line: 599,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 599,
            column: 87
          },
          end: {
            line: 599,
            column: 104
          }
        }, {
          start: {
            line: 599,
            column: 107
          },
          end: {
            line: 599,
            column: 109
          }
        }],
        line: 599
      },
      "100": {
        loc: {
          start: {
            line: 600,
            column: 66
          },
          end: {
            line: 600,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 600,
            column: 87
          },
          end: {
            line: 600,
            column: 104
          }
        }, {
          start: {
            line: 600,
            column: 107
          },
          end: {
            line: 600,
            column: 109
          }
        }],
        line: 600
      },
      "101": {
        loc: {
          start: {
            line: 616,
            column: 8
          },
          end: {
            line: 618,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 616,
            column: 8
          },
          end: {
            line: 618,
            column: 9
          }
        }, {
          start: {
            line: 616,
            column: 8
          },
          end: {
            line: 618,
            column: 9
          }
        }],
        line: 616
      },
      "102": {
        loc: {
          start: {
            line: 619,
            column: 8
          },
          end: {
            line: 621,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 619,
            column: 8
          },
          end: {
            line: 621,
            column: 9
          }
        }, {
          start: {
            line: 619,
            column: 8
          },
          end: {
            line: 621,
            column: 9
          }
        }],
        line: 619
      },
      "103": {
        loc: {
          start: {
            line: 627,
            column: 20
          },
          end: {
            line: 627,
            column: 230
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 627,
            column: 64
          },
          end: {
            line: 627,
            column: 225
          }
        }, {
          start: {
            line: 627,
            column: 228
          },
          end: {
            line: 627,
            column: 230
          }
        }],
        line: 627
      },
      "104": {
        loc: {
          start: {
            line: 627,
            column: 20
          },
          end: {
            line: 627,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 627,
            column: 20
          },
          end: {
            line: 627,
            column: 34
          }
        }, {
          start: {
            line: 627,
            column: 38
          },
          end: {
            line: 627,
            column: 61
          }
        }],
        line: 627
      },
      "105": {
        loc: {
          start: {
            line: 628,
            column: 20
          },
          end: {
            line: 628,
            column: 230
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 628,
            column: 64
          },
          end: {
            line: 628,
            column: 225
          }
        }, {
          start: {
            line: 628,
            column: 228
          },
          end: {
            line: 628,
            column: 230
          }
        }],
        line: 628
      },
      "106": {
        loc: {
          start: {
            line: 628,
            column: 20
          },
          end: {
            line: 628,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 628,
            column: 20
          },
          end: {
            line: 628,
            column: 34
          }
        }, {
          start: {
            line: 628,
            column: 38
          },
          end: {
            line: 628,
            column: 61
          }
        }],
        line: 628
      },
      "107": {
        loc: {
          start: {
            line: 636,
            column: 43
          },
          end: {
            line: 636,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 636,
            column: 52
          },
          end: {
            line: 636,
            column: 57
          }
        }],
        line: 636
      },
      "108": {
        loc: {
          start: {
            line: 638,
            column: 8
          },
          end: {
            line: 640,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 638,
            column: 8
          },
          end: {
            line: 640,
            column: 9
          }
        }, {
          start: {
            line: 638,
            column: 8
          },
          end: {
            line: 640,
            column: 9
          }
        }],
        line: 638
      },
      "109": {
        loc: {
          start: {
            line: 649,
            column: 12
          },
          end: {
            line: 651,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 649,
            column: 12
          },
          end: {
            line: 651,
            column: 13
          }
        }, {
          start: {
            line: 649,
            column: 12
          },
          end: {
            line: 651,
            column: 13
          }
        }],
        line: 649
      },
      "110": {
        loc: {
          start: {
            line: 656,
            column: 12
          },
          end: {
            line: 658,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 656,
            column: 12
          },
          end: {
            line: 658,
            column: 13
          }
        }, {
          start: {
            line: 656,
            column: 12
          },
          end: {
            line: 658,
            column: 13
          }
        }],
        line: 656
      },
      "111": {
        loc: {
          start: {
            line: 662,
            column: 8
          },
          end: {
            line: 664,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 662,
            column: 8
          },
          end: {
            line: 664,
            column: 9
          }
        }, {
          start: {
            line: 662,
            column: 8
          },
          end: {
            line: 664,
            column: 9
          }
        }],
        line: 662
      },
      "112": {
        loc: {
          start: {
            line: 665,
            column: 8
          },
          end: {
            line: 670,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 665,
            column: 8
          },
          end: {
            line: 670,
            column: 9
          }
        }, {
          start: {
            line: 665,
            column: 8
          },
          end: {
            line: 670,
            column: 9
          }
        }],
        line: 665
      },
      "113": {
        loc: {
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 669,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 669,
            column: 13
          }
        }, {
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 669,
            column: 13
          }
        }],
        line: 667
      },
      "114": {
        loc: {
          start: {
            line: 675,
            column: 12
          },
          end: {
            line: 677,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 675,
            column: 12
          },
          end: {
            line: 677,
            column: 13
          }
        }, {
          start: {
            line: 675,
            column: 12
          },
          end: {
            line: 677,
            column: 13
          }
        }],
        line: 675
      },
      "115": {
        loc: {
          start: {
            line: 682,
            column: 12
          },
          end: {
            line: 684,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 682,
            column: 12
          },
          end: {
            line: 684,
            column: 13
          }
        }, {
          start: {
            line: 682,
            column: 12
          },
          end: {
            line: 684,
            column: 13
          }
        }],
        line: 682
      },
      "116": {
        loc: {
          start: {
            line: 686,
            column: 8
          },
          end: {
            line: 696,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 686,
            column: 8
          },
          end: {
            line: 696,
            column: 9
          }
        }, {
          start: {
            line: 686,
            column: 8
          },
          end: {
            line: 696,
            column: 9
          }
        }],
        line: 686
      },
      "117": {
        loc: {
          start: {
            line: 689,
            column: 12
          },
          end: {
            line: 691,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 689,
            column: 12
          },
          end: {
            line: 691,
            column: 13
          }
        }, {
          start: {
            line: 689,
            column: 12
          },
          end: {
            line: 691,
            column: 13
          }
        }],
        line: 689
      },
      "118": {
        loc: {
          start: {
            line: 693,
            column: 12
          },
          end: {
            line: 695,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 693,
            column: 12
          },
          end: {
            line: 695,
            column: 13
          }
        }, {
          start: {
            line: 693,
            column: 12
          },
          end: {
            line: 695,
            column: 13
          }
        }],
        line: 693
      },
      "119": {
        loc: {
          start: {
            line: 710,
            column: 8
          },
          end: {
            line: 712,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 710,
            column: 8
          },
          end: {
            line: 712,
            column: 9
          }
        }, {
          start: {
            line: 710,
            column: 8
          },
          end: {
            line: 712,
            column: 9
          }
        }],
        line: 710
      },
      "120": {
        loc: {
          start: {
            line: 710,
            column: 12
          },
          end: {
            line: 710,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 710,
            column: 12
          },
          end: {
            line: 710,
            column: 26
          }
        }, {
          start: {
            line: 710,
            column: 30
          },
          end: {
            line: 710,
            column: 52
          }
        }],
        line: 710
      },
      "121": {
        loc: {
          start: {
            line: 713,
            column: 8
          },
          end: {
            line: 721,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 713,
            column: 8
          },
          end: {
            line: 721,
            column: 9
          }
        }, {
          start: {
            line: 713,
            column: 8
          },
          end: {
            line: 721,
            column: 9
          }
        }],
        line: 713
      },
      "122": {
        loc: {
          start: {
            line: 713,
            column: 12
          },
          end: {
            line: 713,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 713,
            column: 12
          },
          end: {
            line: 713,
            column: 26
          }
        }, {
          start: {
            line: 713,
            column: 30
          },
          end: {
            line: 713,
            column: 51
          }
        }, {
          start: {
            line: 713,
            column: 55
          },
          end: {
            line: 713,
            column: 86
          }
        }],
        line: 713
      },
      "123": {
        loc: {
          start: {
            line: 715,
            column: 12
          },
          end: {
            line: 720,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 715,
            column: 12
          },
          end: {
            line: 720,
            column: 13
          }
        }, {
          start: {
            line: 715,
            column: 12
          },
          end: {
            line: 720,
            column: 13
          }
        }],
        line: 715
      },
      "124": {
        loc: {
          start: {
            line: 715,
            column: 16
          },
          end: {
            line: 715,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 715,
            column: 16
          },
          end: {
            line: 715,
            column: 52
          }
        }, {
          start: {
            line: 715,
            column: 56
          },
          end: {
            line: 715,
            column: 90
          }
        }],
        line: 715
      },
      "125": {
        loc: {
          start: {
            line: 728,
            column: 8
          },
          end: {
            line: 749,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 728,
            column: 8
          },
          end: {
            line: 749,
            column: 9
          }
        }, {
          start: {
            line: 728,
            column: 8
          },
          end: {
            line: 749,
            column: 9
          }
        }],
        line: 728
      },
      "126": {
        loc: {
          start: {
            line: 731,
            column: 12
          },
          end: {
            line: 748,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 731,
            column: 12
          },
          end: {
            line: 748,
            column: 13
          }
        }, {
          start: {
            line: 731,
            column: 12
          },
          end: {
            line: 748,
            column: 13
          }
        }],
        line: 731
      },
      "127": {
        loc: {
          start: {
            line: 735,
            column: 16
          },
          end: {
            line: 737,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 735,
            column: 16
          },
          end: {
            line: 737,
            column: 17
          }
        }, {
          start: {
            line: 735,
            column: 16
          },
          end: {
            line: 737,
            column: 17
          }
        }],
        line: 735
      },
      "128": {
        loc: {
          start: {
            line: 735,
            column: 20
          },
          end: {
            line: 735,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 735,
            column: 20
          },
          end: {
            line: 735,
            column: 33
          }
        }, {
          start: {
            line: 735,
            column: 37
          },
          end: {
            line: 735,
            column: 61
          }
        }],
        line: 735
      },
      "129": {
        loc: {
          start: {
            line: 740,
            column: 16
          },
          end: {
            line: 747,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 740,
            column: 16
          },
          end: {
            line: 747,
            column: 17
          }
        }, {
          start: {
            line: 740,
            column: 16
          },
          end: {
            line: 747,
            column: 17
          }
        }],
        line: 740
      },
      "130": {
        loc: {
          start: {
            line: 755,
            column: 8
          },
          end: {
            line: 757,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 755,
            column: 8
          },
          end: {
            line: 757,
            column: 9
          }
        }, {
          start: {
            line: 755,
            column: 8
          },
          end: {
            line: 757,
            column: 9
          }
        }],
        line: 755
      },
      "131": {
        loc: {
          start: {
            line: 755,
            column: 12
          },
          end: {
            line: 755,
            column: 163
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 755,
            column: 12
          },
          end: {
            line: 755,
            column: 17
          }
        }, {
          start: {
            line: 755,
            column: 21
          },
          end: {
            line: 755,
            column: 163
          }
        }],
        line: 755
      },
      "132": {
        loc: {
          start: {
            line: 755,
            column: 23
          },
          end: {
            line: 755,
            column: 162
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 755,
            column: 23
          },
          end: {
            line: 755,
            column: 93
          }
        }, {
          start: {
            line: 755,
            column: 97
          },
          end: {
            line: 755,
            column: 162
          }
        }],
        line: 755
      },
      "133": {
        loc: {
          start: {
            line: 761,
            column: 28
          },
          end: {
            line: 761,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 761,
            column: 61
          },
          end: {
            line: 761,
            column: 91
          }
        }, {
          start: {
            line: 761,
            column: 94
          },
          end: {
            line: 761,
            column: 96
          }
        }],
        line: 761
      },
      "134": {
        loc: {
          start: {
            line: 763,
            column: 15
          },
          end: {
            line: 763,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 763,
            column: 64
          },
          end: {
            line: 763,
            column: 70
          }
        }, {
          start: {
            line: 763,
            column: 73
          },
          end: {
            line: 763,
            column: 113
          }
        }],
        line: 763
      },
      "135": {
        loc: {
          start: {
            line: 763,
            column: 15
          },
          end: {
            line: 763,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 763,
            column: 15
          },
          end: {
            line: 763,
            column: 35
          }
        }, {
          start: {
            line: 763,
            column: 39
          },
          end: {
            line: 763,
            column: 61
          }
        }],
        line: 763
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0,
      "382": 0,
      "383": 0,
      "384": 0,
      "385": 0,
      "386": 0,
      "387": 0,
      "388": 0,
      "389": 0,
      "390": 0,
      "391": 0,
      "392": 0,
      "393": 0,
      "394": 0,
      "395": 0,
      "396": 0,
      "397": 0,
      "398": 0,
      "399": 0,
      "400": 0,
      "401": 0,
      "402": 0,
      "403": 0,
      "404": 0,
      "405": 0,
      "406": 0,
      "407": 0,
      "408": 0,
      "409": 0,
      "410": 0,
      "411": 0,
      "412": 0,
      "413": 0,
      "414": 0,
      "415": 0,
      "416": 0,
      "417": 0,
      "418": 0,
      "419": 0,
      "420": 0,
      "421": 0,
      "422": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0, 0],
      "98": [0, 0],
      "99": [0, 0],
      "100": [0, 0],
      "101": [0, 0],
      "102": [0, 0],
      "103": [0, 0],
      "104": [0, 0],
      "105": [0, 0],
      "106": [0, 0],
      "107": [0],
      "108": [0, 0],
      "109": [0, 0],
      "110": [0, 0],
      "111": [0, 0],
      "112": [0, 0],
      "113": [0, 0],
      "114": [0, 0],
      "115": [0, 0],
      "116": [0, 0],
      "117": [0, 0],
      "118": [0, 0],
      "119": [0, 0],
      "120": [0, 0],
      "121": [0, 0],
      "122": [0, 0, 0],
      "123": [0, 0],
      "124": [0, 0],
      "125": [0, 0],
      "126": [0, 0],
      "127": [0, 0],
      "128": [0, 0],
      "129": [0, 0],
      "130": [0, 0],
      "131": [0, 0],
      "132": [0, 0],
      "133": [0, 0],
      "134": [0, 0],
      "135": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      file: "/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/DynamoDBModelTransformer.ts",
      sources: ["/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/DynamoDBModelTransformer.ts"],
      names: [],
      mappings: "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",
      sourcesContent: ["import { DeletionPolicy, AppSync } from 'cloudform-types';\nimport {\n  DirectiveNode,\n  ObjectTypeDefinitionNode,\n  InputObjectTypeDefinitionNode,\n  FieldDefinitionNode,\n  InterfaceTypeDefinitionNode,\n  GraphQLObjectType,\n} from 'graphql';\nimport {\n  blankObject,\n  makeConnectionField,\n  makeField,\n  makeInputValueDefinition,\n  wrapNonNull,\n  makeNamedType,\n  makeNonNullType,\n  ModelResourceIDs,\n  ResolverResourceIDs,\n  getBaseType,\n  graphqlName,\n  toUpper,\n  plurality,\n} from 'graphql-transformer-common';\nimport {\n  getDirectiveArguments,\n  gql,\n  Transformer,\n  TransformerContext,\n  SyncConfig,\n  TransformerModelProvider,\n} from 'graphql-transformer-core';\nimport {\n  getNonModelObjectArray,\n  makeCreateInputObject,\n  makeDeleteInputObject,\n  makeEnumFilterInputObjects,\n  makeModelConnectionType,\n  makeModelSortDirectionEnumObject,\n  makeModelXFilterInputObject,\n  makeNonModelInputObject,\n  makeScalarFilterInputs,\n  makeSubscriptionField,\n  makeUpdateInputObject,\n  makeModelXConditionInputObject,\n  makeAttributeTypeEnum,\n} from './definitions';\nimport { ModelDirectiveArgs, getCreatedAtFieldName, getUpdatedAtFieldName } from './ModelDirectiveArgs';\nimport { ResourceFactory } from './resources';\nimport { doesNotReject } from 'assert';\nimport { ModelCapabilities, QueryFieldType, MutationFieldType, SubscriptionFieldType } from 'graphql-transformer-core/lib/ITransformer';\nimport { BaseResolver } from 'graphql-transformer-core/lib/util/BaseResolver';\n\nconst METADATA_KEY = 'DynamoDBTransformerMetadata';\n\n// export type ModelObject = {\n//   name: string;\n//   stackName: string;\n\n// }\n// export type NonModelObject = {\n//   name: string\n// }\nexport interface DynamoDBModelTransformerOptions {\n  EnableDeletionProtection?: boolean;\n  SyncConfig?: SyncConfig;\n}\n\n// Transform config version constants\n// We have constants instead of magic number all around, later these should be moved to feature\n// flags and transformers should be feature and not version dependent.\n\n// To support generation of conditions and new naming, version 5 was introduced\nexport const CONDITIONS_MINIMUM_VERSION = 5;\n\n/**\n * The @model transformer.\n *\n * This transform creates a single DynamoDB table for all of your application's\n * data. It uses a standard key structure and nested map to store object values.\n * A relationKey field\n *\n * {\n *  type (HASH),\n *  id (SORT),\n *  value (MAP),\n *  createdAt, (LSI w/ type)\n *  updatedAt (LSI w/ type)\n * }\n */\n\nexport const directiveDefinition = gql`\n  directive @model(\n    queries: ModelQueryMap\n    mutations: ModelMutationMap\n    subscriptions: ModelSubscriptionMap\n    timestamps: TimestampConfiguration\n  ) on OBJECT\n  input ModelMutationMap {\n    create: String\n    update: String\n    delete: String\n  }\n  input ModelQueryMap {\n    get: String\n    list: String\n  }\n  input ModelSubscriptionMap {\n    onCreate: [String]\n    onUpdate: [String]\n    onDelete: [String]\n    level: ModelSubscriptionLevel\n  }\n  enum ModelSubscriptionLevel {\n    off\n    public\n    on\n  }\n  input TimestampConfiguration {\n    createdAt: String\n    updatedAt: String\n  }\n`;\n\nexport class DynamoDBModelTransformer extends Transformer implements TransformerModelProvider {\n  readonly transformerName = 'DynamoDBModelTransformer';\n  readonly capabilities = [ModelCapabilities.SUPPORT_AUTH];\n  resources: ResourceFactory;\n  opts: DynamoDBModelTransformerOptions;\n  private modelTypes: string[] = [];\n\n  constructor(opts: DynamoDBModelTransformerOptions = {}) {\n    super('DynamoDBModelTransformer', directiveDefinition);\n    this.opts = this.getOpts(opts);\n    this.resources = new ResourceFactory();\n  }\n\n  public before = (ctx: TransformerContext): void => {\n    const template = this.resources.initTemplate();\n    ctx.mergeResources(template.Resources);\n    ctx.mergeParameters(template.Parameters);\n    ctx.mergeOutputs(template.Outputs);\n    ctx.mergeConditions(template.Conditions);\n  };\n\n  public after = (ctx: TransformerContext): void => {\n    // append hoisted initalization code to the top of request mapping template\n    const ddbMetata = ctx.metadata.get(METADATA_KEY);\n    if (ddbMetata) {\n      Object.entries(ddbMetata.hoistedRequestMappingContent || {}).forEach(([resourceId, hoistedContent]) => {\n        const resource: AppSync.Resolver = ctx.getResource(resourceId) as any;\n        resource.Properties.RequestMappingTemplate = [hoistedContent, resource.Properties.RequestMappingTemplate].join('\\n');\n        ctx.setResource(resourceId, resource);\n      });\n    }\n  };\n\n  /**\n   * Given the initial input and context manipulate the context to handle this object directive.\n   * @param initial The input passed to the transform.\n   * @param ctx The accumulated context for the transform.\n   */\n  public object = (def: ObjectTypeDefinitionNode, directive: DirectiveNode, ctx: TransformerContext): void => {\n    // Add a stack mapping so that all model resources are pulled\n    // into their own stack at the end of the transformation.\n    const typeName = def.name.value;\n    this.modelTypes.push(typeName);\n  };\n\n  public transformSchema = (ctx: TransformerContext) => {\n    this.modelTypes.forEach(modelName => {\n      const model = ctx.getObject(modelName);\n      const directive = model.directives?.find(d => d.name.value === 'model');\n      const nonModelArray: ObjectTypeDefinitionNode[] = getNonModelObjectArray(model, ctx, new Map<string, ObjectTypeDefinitionNode>());\n\n      nonModelArray.forEach((value: ObjectTypeDefinitionNode) => {\n        const nonModelObject = makeNonModelInputObject(value, nonModelArray, ctx);\n        if (!this.typeExist(nonModelObject.name.value, ctx)) {\n          ctx.addInput(nonModelObject);\n        }\n      });\n\n      this.createQueries(model, directive, ctx);\n      this.createMutations(model, directive, ctx, nonModelArray);\n      this.createSubscriptions(model, directive, ctx);\n      // Update ModelXConditionInput type\n      this.updateMutationConditionInput(ctx, model);\n\n      // change type to include sync related fields if sync is enabled\n      const isSyncEnabled = this.opts.SyncConfig ? true : false;\n      if (isSyncEnabled) {\n        const obj = ctx.getObject(model.name.value);\n        const newFields = [\n          ...obj.fields,\n          makeField('_version', [], wrapNonNull(makeNamedType('Int'))),\n          makeField('_deleted', [], makeNamedType('Boolean')),\n          makeField('_lastChangedAt', [], wrapNonNull(makeNamedType('AWSTimestamp'))),\n        ];\n\n        const newObj = {\n          ...obj,\n          fields: newFields,\n        };\n\n        ctx.updateObject(newObj);\n      }\n      this.addTimestampFields(model, directive, ctx);\n    });\n  };\n\n  public generateResolvers = (ctx: TransformerContext) => {\n    this.modelTypes.forEach(modelName => {\n      const model = ctx.getObject(modelName);\n      // Create the dynamodb table to hold the @model type\n      // TODO: Handle types with more than a single \"id\" hash key\n      this.setSyncConfig(ctx, modelName);\n      const isSyncEnabled = this.opts.SyncConfig ? true : false;\n      const tableLogicalID = ModelResourceIDs.ModelTableResourceID(modelName);\n      const iamRoleLogicalID = ModelResourceIDs.ModelTableIAMRoleID(modelName);\n      const dataSourceRoleLogicalID = ModelResourceIDs.ModelTableDataSourceID(modelName);\n      const deletionPolicy = this.opts.EnableDeletionProtection ? DeletionPolicy.Retain : DeletionPolicy.Delete;\n      ctx.setResource(tableLogicalID, this.resources.makeModelTable(modelName, undefined, undefined, deletionPolicy, isSyncEnabled));\n      ctx.mapResourceToStack(modelName, tableLogicalID);\n      ctx.setResource(iamRoleLogicalID, this.resources.makeIAMRole(modelName, this.opts.SyncConfig));\n      ctx.mapResourceToStack(modelName, iamRoleLogicalID);\n      ctx.setResource(\n        dataSourceRoleLogicalID,\n        this.resources.makeDynamoDBDataSource(tableLogicalID, iamRoleLogicalID, modelName, isSyncEnabled),\n      );\n      ctx.mapResourceToStack(modelName, dataSourceRoleLogicalID);\n\n      const streamArnOutputId = `GetAtt${ModelResourceIDs.ModelTableStreamArn(modelName)}`;\n      ctx.setOutput(\n        // \"GetAtt\" is a backward compatibility addition to prevent breaking current deploys.\n        streamArnOutputId,\n        this.resources.makeTableStreamArnOutput(tableLogicalID),\n      );\n      ctx.mapResourceToStack(modelName, streamArnOutputId);\n\n      const datasourceOutputId = `GetAtt${dataSourceRoleLogicalID}Name`;\n      ctx.setOutput(datasourceOutputId, this.resources.makeDataSourceOutput(dataSourceRoleLogicalID));\n      ctx.mapResourceToStack(modelName, datasourceOutputId);\n\n      const tableNameOutputId = `GetAtt${tableLogicalID}Name`;\n      ctx.setOutput(tableNameOutputId, this.resources.makeTableNameOutput(tableLogicalID));\n      ctx.mapResourceToStack(modelName, tableNameOutputId);\n    });\n  };\n\n  private addTimestampFields(def: ObjectTypeDefinitionNode, directive: DirectiveNode, ctx: TransformerContext): void {\n    const createdAtField = getCreatedAtFieldName(directive);\n    const updatedAtField = getUpdatedAtFieldName(directive);\n    const existingCreatedAtField = def.fields.find(f => f.name.value === createdAtField);\n    const existingUpdatedAtField = def.fields.find(f => f.name.value === updatedAtField);\n    // Todo: Consolidate how warnings are shown. Instead of printing them here, the invoker of transformer should get\n    // all the warnings together and decide how to render those warning\n    if (!DynamoDBModelTransformer.isTimestampCompatibleField(existingCreatedAtField)) {\n      console.log(\n        `${def.name.value}.${existingCreatedAtField.name.value} is of type ${getBaseType(\n          existingCreatedAtField.type,\n        )}. To support auto population change the type to AWSDateTime or String`,\n      );\n    }\n    if (!DynamoDBModelTransformer.isTimestampCompatibleField(existingUpdatedAtField)) {\n      console.log(\n        `${def.name.value}.${existingUpdatedAtField.name.value} is of type ${getBaseType(\n          existingUpdatedAtField.type,\n        )}. To support auto population change the type to AWSDateTime or String`,\n      );\n    }\n    const obj = ctx.getObject(def.name.value);\n    const newObj: ObjectTypeDefinitionNode = {\n      ...obj,\n      fields: [\n        ...obj.fields,\n        ...(createdAtField && !existingCreatedAtField ? [makeField(createdAtField, [], wrapNonNull(makeNamedType('AWSDateTime')))] : []), // createdAt field\n        ...(updatedAtField && !existingUpdatedAtField ? [makeField(updatedAtField, [], wrapNonNull(makeNamedType('AWSDateTime')))] : []), // updated field\n      ],\n    };\n    ctx.updateObject(newObj);\n  }\n\n  private createMutations = (\n    def: ObjectTypeDefinitionNode,\n    directive: DirectiveNode,\n    ctx: TransformerContext,\n    nonModelArray: ObjectTypeDefinitionNode[],\n  ) => {\n    const typeName = def.name.value;\n    const isSyncEnabled = this.opts.SyncConfig ? true : false;\n\n    const mutationFields = [];\n    // Get any name overrides provided by the user. If an empty map it provided\n    // then we do not generate those fields.\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    // Configure mutations based on *mutations* argument\n    let shouldMakeCreate = true;\n    let shouldMakeUpdate = true;\n    let shouldMakeDelete = true;\n    let createFieldNameOverride = undefined;\n    let updateFieldNameOverride = undefined;\n    let deleteFieldNameOverride = undefined;\n\n    // timestamp fields\n    const createdAtField = getCreatedAtFieldName(directive);\n    const updatedAtField = getUpdatedAtFieldName(directive);\n\n    const existingCreatedAtField = def.fields.find(f => f.name.value === createdAtField);\n    const existingUpdatedAtField = def.fields.find(f => f.name.value === updatedAtField);\n\n    // auto populate the timestamp field only if they are of AWSDateTime type\n    const timestampFields = {\n      createdAtField: DynamoDBModelTransformer.isTimestampCompatibleField(existingCreatedAtField) ? createdAtField : undefined,\n      updatedAtField: DynamoDBModelTransformer.isTimestampCompatibleField(existingUpdatedAtField) ? updatedAtField : undefined,\n    };\n\n    // Figure out which mutations to make and if they have name overrides\n    if (directiveArguments.mutations === null) {\n      shouldMakeCreate = false;\n      shouldMakeUpdate = false;\n      shouldMakeDelete = false;\n    } else if (directiveArguments.mutations) {\n      if (!directiveArguments.mutations.create) {\n        shouldMakeCreate = false;\n      } else {\n        createFieldNameOverride = directiveArguments.mutations.create;\n      }\n      if (!directiveArguments.mutations.update) {\n        shouldMakeUpdate = false;\n      } else {\n        updateFieldNameOverride = directiveArguments.mutations.update;\n      }\n      if (!directiveArguments.mutations.delete) {\n        shouldMakeDelete = false;\n      } else {\n        deleteFieldNameOverride = directiveArguments.mutations.delete;\n      }\n    }\n\n    const conditionInputName = ModelResourceIDs.ModelConditionInputTypeName(typeName);\n\n    // Create the mutations.\n    if (shouldMakeCreate) {\n      const createInput = makeCreateInputObject(def, directive, nonModelArray, ctx, isSyncEnabled);\n      if (!ctx.getType(createInput.name.value)) {\n        ctx.addInput(createInput);\n      }\n      const createResolver = this.resources.makeCreateResolver({\n        type: def.name.value,\n        nameOverride: createFieldNameOverride,\n        syncConfig: this.opts.SyncConfig,\n      });\n      const resolver = ctx.resolvers.addMutationResolver(\n        createResolver.typeName,\n        createResolver.fieldName,\n        createResolver.dataSourceName,\n        createResolver.requestMappingTemplate,\n        createResolver.responseMappingTemplate,\n      );\n\n      const hositedInitalization = this.resources.initalizeDefaultInputForCreateMutation(createInput, timestampFields);\n      resolver.addSlot('init', hositedInitalization);\n      const resourceId = ResolverResourceIDs.DynamoDBCreateResolverResourceID(typeName);\n      resolver.mapResourceToStack(typeName);\n      ctx.mapResourceToStack(typeName, resourceId);\n      const args = [makeInputValueDefinition('input', makeNonNullType(makeNamedType(createInput.name.value)))];\n      if (this.supportsConditions(ctx)) {\n        args.push(makeInputValueDefinition('condition', makeNamedType(conditionInputName)));\n      }\n      mutationFields.push(makeField(createResolver.fieldName, args, makeNamedType(def.name.value)));\n    }\n\n    if (shouldMakeUpdate) {\n      const updateInput = makeUpdateInputObject(def, nonModelArray, ctx, isSyncEnabled);\n      if (!ctx.getType(updateInput.name.value)) {\n        ctx.addInput(updateInput);\n      }\n      const updateResolver = this.resources.makeUpdateResolver({\n        type: def.name.value,\n        nameOverride: updateFieldNameOverride,\n        syncConfig: this.opts.SyncConfig,\n        timestamps: timestampFields,\n      });\n      const resourceId = ResolverResourceIDs.DynamoDBUpdateResolverResourceID(typeName);\n      const resolver = ctx.resolvers.addMutationResolver(\n        updateResolver.typeName,\n        updateResolver.fieldName,\n        updateResolver.dataSourceName,\n        updateResolver.requestMappingTemplate,\n        updateResolver.responseMappingTemplate,\n      );\n      resolver.mapResourceToStack(typeName);\n      ctx.mapResourceToStack(typeName, resourceId);\n      const args = [makeInputValueDefinition('input', makeNonNullType(makeNamedType(updateInput.name.value)))];\n      if (this.supportsConditions(ctx)) {\n        args.push(makeInputValueDefinition('condition', makeNamedType(conditionInputName)));\n      }\n      mutationFields.push(makeField(updateResolver.fieldName.toString(), args, makeNamedType(def.name.value)));\n    }\n\n    if (shouldMakeDelete) {\n      const deleteInput = makeDeleteInputObject(def, isSyncEnabled);\n      if (!ctx.getType(deleteInput.name.value)) {\n        ctx.addInput(deleteInput);\n      }\n      const deleteResolver = this.resources.makeDeleteResolver({\n        type: def.name.value,\n        nameOverride: deleteFieldNameOverride,\n        syncConfig: this.opts.SyncConfig,\n      });\n      const resolver = ctx.resolvers.addMutationResolver(\n        deleteResolver.typeName,\n        deleteResolver.fieldName,\n        deleteResolver.dataSourceName,\n        deleteResolver.requestMappingTemplate,\n        deleteResolver.responseMappingTemplate,\n      );\n      resolver.mapResourceToStack(typeName);\n      const args = [makeInputValueDefinition('input', makeNonNullType(makeNamedType(deleteInput.name.value)))];\n      if (this.supportsConditions(ctx)) {\n        args.push(makeInputValueDefinition('condition', makeNamedType(conditionInputName)));\n      }\n      mutationFields.push(makeField(deleteResolver.fieldName.toString(), args, makeNamedType(def.name.value)));\n    }\n    ctx.addMutationFields(mutationFields);\n\n    if (shouldMakeCreate || shouldMakeUpdate || shouldMakeDelete) {\n      this.generateConditionInputs(ctx, def);\n    }\n  };\n\n  private createQueries = (def: ObjectTypeDefinitionNode, directive: DirectiveNode, ctx: TransformerContext) => {\n    const typeName = def.name.value;\n    const queryFields = [];\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    // Configure queries based on *queries* argument\n    let shouldMakeGet = true;\n    let shouldMakeList = true;\n    let getFieldNameOverride = undefined;\n    let listFieldNameOverride = undefined;\n    const isSyncEnabled = this.opts.SyncConfig ? true : false;\n\n    // Figure out which queries to make and if they have name overrides.\n    // If queries is undefined (default), create all queries\n    // If queries is explicetly set to null, do not create any\n    // else if queries is defined, check overrides\n    if (directiveArguments.queries === null) {\n      shouldMakeGet = false;\n      shouldMakeList = false;\n    } else if (directiveArguments.queries) {\n      if (!directiveArguments.queries.get) {\n        shouldMakeGet = false;\n      } else {\n        getFieldNameOverride = directiveArguments.queries.get;\n      }\n      if (!directiveArguments.queries.list) {\n        shouldMakeList = false;\n      } else {\n        listFieldNameOverride = directiveArguments.queries.list;\n      }\n    }\n\n    if (shouldMakeList) {\n      if (!this.typeExist('ModelSortDirection', ctx)) {\n        const tableSortDirection = makeModelSortDirectionEnumObject();\n        ctx.addEnum(tableSortDirection);\n      }\n    }\n\n    // Create sync query\n    if (isSyncEnabled) {\n      const syncResolver = this.resources.makeSyncResolver(typeName);\n      const syncResourceID = ResolverResourceIDs.SyncResolverResourceID(typeName);\n      ctx.setResource(syncResourceID, syncResolver);\n      ctx.mapResourceToStack(typeName, syncResourceID);\n      this.generateModelXConnectionType(ctx, def, isSyncEnabled);\n      this.generateFilterInputs(ctx, def);\n      queryFields.push(\n        makeField(\n          syncResolver.Properties.FieldName.toString(),\n          [\n            makeInputValueDefinition('filter', makeNamedType(ModelResourceIDs.ModelFilterInputTypeName(def.name.value))),\n            makeInputValueDefinition('limit', makeNamedType('Int')),\n            makeInputValueDefinition('nextToken', makeNamedType('String')),\n            makeInputValueDefinition('lastSync', makeNamedType('AWSTimestamp')),\n          ],\n          makeNamedType(ModelResourceIDs.ModelConnectionTypeName(def.name.value)),\n        ),\n      );\n    }\n\n    // Create get queries\n    if (shouldMakeGet) {\n      const getResolver = this.resources.makeGetResolver(def.name.value, getFieldNameOverride, isSyncEnabled, ctx.getQueryTypeName());\n      const resolver = ctx.resolvers.addQueryResolver(\n        getResolver.typeName,\n        getResolver.fieldName,\n        getResolver.dataSourceName,\n        getResolver.requestMappingTemplate,\n        getResolver.responseMappingTemplate,\n      );\n      resolver.mapResourceToStack(typeName);\n      const resourceId = ResolverResourceIDs.DynamoDBGetResolverResourceID(typeName);\n      ctx.mapResourceToStack(typeName, resourceId);\n\n      queryFields.push(\n        makeField(\n          getResolver.fieldName.toString(),\n          [makeInputValueDefinition('id', makeNonNullType(makeNamedType('ID')))],\n          makeNamedType(def.name.value),\n        ),\n      );\n    }\n\n    if (shouldMakeList) {\n      this.generateModelXConnectionType(ctx, def);\n\n      // Create the list resolver\n      const listResolver = this.resources.makeListResolver(def.name.value, listFieldNameOverride, isSyncEnabled, ctx.getQueryTypeName());\n      const resourceId = ResolverResourceIDs.DynamoDBListResolverResourceID(typeName);\n      const resolver = ctx.resolvers.addQueryResolver(\n        listResolver.typeName,\n        listResolver.fieldName,\n        listResolver.dataSourceName,\n        listResolver.requestMappingTemplate,\n        listResolver.responseMappingTemplate,\n      );\n      resolver.mapResourceToStack(typeName);\n      ctx.mapResourceToStack(typeName, resourceId);\n\n      queryFields.push(makeConnectionField(listResolver.fieldName.toString(), def.name.value));\n      this.generateFilterInputs(ctx, def);\n    }\n\n    ctx.addQueryFields(queryFields);\n  };\n\n  /**\n   * Creates subscriptions for a @model object type. By default creates a subscription for\n   * create, update, and delete mutations.\n   *\n   * Subscriptions are one to many in that a subscription may subscribe to multiple mutations.\n   * You may thus provide multiple names of the subscriptions that will be triggered by each\n   * mutation.\n   *\n   * type Post @model(subscriptions: { onCreate: [\"onPostCreated\", \"onFeedUpdated\"] }) {\n   *      id: ID!\n   *      title: String!\n   * }\n   *\n   * will create two subscription fields:\n   *\n   * type Subscription {\n   *      onPostCreated: Post @aws_subscribe(mutations: [\"createPost\"])\n   *      onFeedUpdated: Post @aws_subscribe(mutations: [\"createPost\"])\n   * }\n   *  Subscription Levels\n   *   subscriptions.level === OFF || subscriptions === null\n   *      Will not create subscription operations\n   *   subcriptions.level === PUBLIC\n   *      Will continue as is creating subscription operations\n   *   subscriptions.level === ON || subscriptions === undefined\n   *      If auth is enabled it will enabled protection on subscription operations and resolvers\n   */\n  private createSubscriptions = (def: ObjectTypeDefinitionNode, directive: DirectiveNode, ctx: TransformerContext) => {\n    const typeName = def.name.value;\n    const subscriptionFields = [];\n\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    const createFieldName = directiveArguments?.mutations?.create || graphqlName('create' + toUpper(typeName));\n    const updateFieldName = directiveArguments?.mutations?.update || graphqlName('update' + toUpper(typeName));\n    const deleteFieldName = directiveArguments.mutations?.delete || graphqlName('delete' + toUpper(typeName));\n\n    const mutationTypeName = ctx.getMutationTypeName();\n    const subscriptionsArgument = directiveArguments.subscriptions;\n    const createResolver = ctx.resolvers.getResolver(mutationTypeName, createFieldName);\n    const updateResolver = ctx.resolvers.getResolver(mutationTypeName, updateFieldName);\n    const deleteResolver = ctx.resolvers.getResolver(mutationTypeName, deleteFieldName);\n\n    if (subscriptionsArgument === null) {\n      return;\n    }\n    if (subscriptionsArgument && subscriptionsArgument.level === 'off') {\n      return;\n    }\n    // Add the custom subscriptions\n    const onCreate = subscriptionsArgument?.onCreate || [ModelResourceIDs.ModelOnCreateSubscriptionName(typeName)];\n    const onUpdate = subscriptionsArgument?.onUpdate || [ModelResourceIDs.ModelOnUpdateSubscriptionName(typeName)];\n    const onDelete = subscriptionsArgument?.onDelete || [ModelResourceIDs.ModelOnDeleteSubscriptionName(typeName)];\n\n    // Add the default subscriptions\n    if (createResolver) {\n      onCreate.forEach(fieldName => {\n        const onCreateField = makeSubscriptionField(fieldName, typeName, [createFieldName]);\n        subscriptionFields.push(onCreateField);\n      });\n    }\n    if (updateResolver) {\n      onUpdate.forEach(fieldName => {\n        const onUpdateField = makeSubscriptionField(fieldName, typeName, [updateFieldName]);\n        subscriptionFields.push(onUpdateField);\n      });\n    }\n    if (deleteResolver) {\n      onDelete.forEach(fieldName => {\n        const onDeleteField = makeSubscriptionField(fieldName, typeName, [deleteFieldName]);\n        subscriptionFields.push(onDeleteField);\n      });\n    }\n\n    ctx.addSubscriptionFields(subscriptionFields);\n  };\n\n  public generateGetResolver = (\n    ctx: TransformerContext,\n    type: ObjectTypeDefinitionNode,\n    typeName: string,\n    fieldName: string,\n  ): BaseResolver => {\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const resolverConfig = this.resources.makeGetResolver(type.name.value, fieldName, this.opts.SyncConfig ? true : false, typeName);\n    return ctx.resolvers.addQueryResolver(\n      resolverConfig.typeName,\n      resolverConfig.fieldName,\n      resolverConfig.dataSourceName,\n      resolverConfig.requestMappingTemplate,\n      resolverConfig.responseMappingTemplate,\n    );\n  };\n\n  public generateListResolver = (\n    ctx: TransformerContext,\n    type: ObjectTypeDefinitionNode,\n    typeName: string,\n    fieldName: string,\n  ): BaseResolver => {\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const resolverConfig = this.resources.makeListResolver(type.name.value, fieldName, this.opts.SyncConfig ? true : false, typeName);\n    return ctx.resolvers.addQueryResolver(\n      resolverConfig.typeName,\n      resolverConfig.fieldName,\n      resolverConfig.dataSourceName,\n      resolverConfig.requestMappingTemplate,\n      resolverConfig.responseMappingTemplate,\n    );\n  };\n\n  public generteCreateResolver = (\n    ctx: TransformerContext,\n    type: ObjectTypeDefinitionNode,\n    typeName: string,\n    fieldName: string,\n  ): BaseResolver => {\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    // Todo: Make the signature consistent with queryTypes. Either pass single object or mulitple arguments\n    const resolverConfig = this.resources.makeCreateResolver({\n      type: type.name.value,\n      nameOverride: fieldName,\n      syncConfig: this.opts.SyncConfig,\n      mutationTypeName: typeName,\n    });\n    return ctx.resolvers.addMutationResolver(\n      resolverConfig.typeName,\n      resolverConfig.fieldName,\n      resolverConfig.dataSourceName,\n      resolverConfig.requestMappingTemplate,\n      resolverConfig.responseMappingTemplate,\n    );\n  };\n\n  public generateUpdateResolver = (\n    ctx: TransformerContext,\n    type: ObjectTypeDefinitionNode,\n    typeName: string,\n    fieldName: string,\n  ): BaseResolver => {\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const resolverConfig = this.resources.makeUpdateResolver({\n      type: type.name.value,\n      nameOverride: fieldName,\n      syncConfig: this.opts.SyncConfig,\n      mutationTypeName: typeName,\n    });\n    return ctx.resolvers.addMutationResolver(\n      resolverConfig.typeName,\n      resolverConfig.fieldName,\n      resolverConfig.dataSourceName,\n      resolverConfig.requestMappingTemplate,\n      resolverConfig.responseMappingTemplate,\n    );\n  };\n\n  public generateDeleteResolver = (\n    ctx: TransformerContext,\n    type: ObjectTypeDefinitionNode,\n    typeName: string,\n    fieldName: string,\n  ): BaseResolver => {\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const resolverConfig = this.resources.makeDeleteResolver({\n      type: type.name.value,\n      nameOverride: fieldName,\n      syncConfig: this.opts.SyncConfig,\n      mutationTypeName: typeName,\n    });\n    return ctx.resolvers.addMutationResolver(\n      resolverConfig.typeName,\n      resolverConfig.fieldName,\n      resolverConfig.dataSourceName,\n      resolverConfig.requestMappingTemplate,\n      resolverConfig.responseMappingTemplate,\n    );\n  };\n\n  public getQueryFieldNames = (ctx: TransformerContext, type: ObjectTypeDefinitionNode): Record<QueryFieldType, string[]> => {\n    const name = type.name.value;\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const directive = type.directives.find(d => d.name.value === 'model');\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    let shouldMakeGet = true;\n    let shouldMakeList = true;\n    let getQueryFieldName = graphqlName('get' + toUpper(name));\n    let listQueryFieldName = graphqlName('list' + plurality(toUpper(name)));\n\n    if (directiveArguments.queries === null) {\n      shouldMakeGet = false;\n      shouldMakeList = false;\n    } else if (directiveArguments.queries) {\n      if (!directiveArguments.queries.get) {\n        shouldMakeGet = false;\n      } else {\n        getQueryFieldName = directiveArguments.queries.get;\n      }\n      if (!directiveArguments.queries.list) {\n        shouldMakeList = false;\n      } else {\n        listQueryFieldName = directiveArguments.queries.list;\n      }\n    }\n    return {\n      [QueryFieldType.GET]: shouldMakeGet ? [getQueryFieldName] : [],\n      [QueryFieldType.LIST]: shouldMakeList ? [listQueryFieldName] : [],\n      [QueryFieldType.SYNC]: this.opts.SyncConfig ? [graphqlName('sync' + toUpper(name))] : [],\n    };\n  };\n\n  public getMutationFieldNames = (ctx: TransformerContext, type: ObjectTypeDefinitionNode): Record<MutationFieldType, string[]> => {\n    const name = type.name.value;\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const directive = type.directives.find(d => d.name.value === 'model');\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    let shouldMakeCreate = true;\n    let shouldMakeUpdate = true;\n    let shouldMakeDelete = true;\n\n    let createMutationsFieldName = graphqlName('create' + toUpper(name));\n    let updateMutationFieldName = graphqlName('update' + toUpper(name));\n    let deleteMutationFieldName = graphqlName('delete' + toUpper(name));\n\n    if (directiveArguments.mutations === null) {\n      shouldMakeCreate = false;\n      shouldMakeUpdate = false;\n      shouldMakeDelete = false;\n    } else if (directiveArguments.mutations) {\n      if (!directiveArguments.mutations.create) {\n        shouldMakeCreate = false;\n      } else {\n        createMutationsFieldName = directiveArguments.mutations.create;\n      }\n      if (!directiveArguments.mutations.update) {\n        shouldMakeUpdate = false;\n      } else {\n        updateMutationFieldName = directiveArguments.mutations.update;\n      }\n      if (!directiveArguments.mutations.delete) {\n        shouldMakeDelete = false;\n      } else {\n        updateMutationFieldName = directiveArguments.mutations.delete;\n      }\n    }\n    return {\n      [MutationFieldType.CREATE]: shouldMakeCreate ? [createMutationsFieldName] : [],\n      [MutationFieldType.UPDATE]: shouldMakeUpdate ? [updateMutationFieldName] : [],\n      [MutationFieldType.DELETE]: shouldMakeDelete ? [deleteMutationFieldName] : [],\n    };\n  };\n\n  public getSubscriptionFieldNames = (ctx: TransformerContext, type: ObjectTypeDefinitionNode): Record<SubscriptionFieldType, string[]> => {\n    const name = type.name.value;\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const directive = type.directives.find(d => d.name.value === 'model');\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    let shouldMakeOnCreate = true;\n    let shouldMakeOnUpdate = true;\n    let shouldMakeOnDelete = true;\n\n    let onCreateFieldName = [graphqlName('onCreate' + toUpper(name))];\n    let onUpdateFieldName = [graphqlName('onUpdate' + toUpper(name))];\n    let onDeleteFieldName = [graphqlName('onDelete' + toUpper(name))];\n\n    if (directiveArguments.subscriptions === null || directiveArguments.subscriptions.level === 'off') {\n      shouldMakeOnCreate = false;\n      shouldMakeOnUpdate = false;\n      shouldMakeOnDelete = false;\n    } else if (directiveArguments.subscriptions) {\n      if (!directiveArguments.subscriptions.onCreate) {\n        shouldMakeOnCreate = false;\n      } else {\n        onCreateFieldName = directiveArguments.subscriptions.onCreate;\n      }\n      if (!directiveArguments.subscriptions.onUpdate) {\n        shouldMakeOnUpdate = false;\n      } else {\n        onUpdateFieldName = directiveArguments.subscriptions.onUpdate;\n      }\n      if (!directiveArguments.subscriptions.onDelete) {\n        shouldMakeOnDelete = false;\n      } else {\n        onUpdateFieldName = directiveArguments.subscriptions.onDelete;\n      }\n    }\n    return {\n      [SubscriptionFieldType.ON_CREATE]: shouldMakeOnCreate ? onCreateFieldName : [],\n      [SubscriptionFieldType.ON_UPDATE]: shouldMakeOnUpdate ? onUpdateFieldName : [],\n      [SubscriptionFieldType.ON_DELETE]: shouldMakeOnDelete ? onDeleteFieldName : [],\n    };\n  };\n\n  private isModelType = (type: ObjectTypeDefinitionNode): boolean => {\n    return this.modelTypes.includes(type.name.value);\n  };\n  private typeExist(type: string, ctx: TransformerContext): boolean {\n    return Boolean(type in ctx.nodeMap);\n  }\n\n  private generateModelXConnectionType(ctx: TransformerContext, def: ObjectTypeDefinitionNode, isSync: Boolean = false): void {\n    const tableXConnectionName = ModelResourceIDs.ModelConnectionTypeName(def.name.value);\n    if (this.typeExist(tableXConnectionName, ctx)) {\n      return;\n    }\n\n    // Create the ModelXConnection\n    const connectionType = blankObject(tableXConnectionName);\n    ctx.addObject(connectionType);\n    ctx.addObjectExtension(makeModelConnectionType(def.name.value, isSync));\n  }\n\n  private generateFilterInputs(ctx: TransformerContext, def: ObjectTypeDefinitionNode): void {\n    const scalarFilters = makeScalarFilterInputs(this.supportsConditions(ctx));\n    for (const filter of scalarFilters) {\n      if (!this.typeExist(filter.name.value, ctx)) {\n        ctx.addInput(filter);\n      }\n    }\n\n    // Create the Enum filters\n    const enumFilters = makeEnumFilterInputObjects(def, ctx, this.supportsConditions(ctx));\n    for (const filter of enumFilters) {\n      if (!this.typeExist(filter.name.value, ctx)) {\n        ctx.addInput(filter);\n      }\n    }\n\n    // Create the ModelXFilterInput\n    const tableXQueryFilterInput = makeModelXFilterInputObject(def, ctx, this.supportsConditions(ctx));\n    if (!this.typeExist(tableXQueryFilterInput.name.value, ctx)) {\n      ctx.addInput(tableXQueryFilterInput);\n    }\n\n    if (this.supportsConditions(ctx)) {\n      const attributeTypeEnum = makeAttributeTypeEnum();\n      if (!this.typeExist(attributeTypeEnum.name.value, ctx)) {\n        ctx.addType(attributeTypeEnum);\n      }\n    }\n  }\n\n  private generateConditionInputs(ctx: TransformerContext, def: ObjectTypeDefinitionNode): void {\n    const scalarFilters = makeScalarFilterInputs(this.supportsConditions(ctx));\n    for (const filter of scalarFilters) {\n      if (!this.typeExist(filter.name.value, ctx)) {\n        ctx.addInput(filter);\n      }\n    }\n\n    // Create the Enum filters\n    const enumFilters = makeEnumFilterInputObjects(def, ctx, this.supportsConditions(ctx));\n    for (const filter of enumFilters) {\n      if (!this.typeExist(filter.name.value, ctx)) {\n        ctx.addInput(filter);\n      }\n    }\n\n    if (this.supportsConditions(ctx)) {\n      // Create the ModelXConditionInput\n      const tableXMutationConditionInput = makeModelXConditionInputObject(def, ctx, this.supportsConditions(ctx));\n      if (!this.typeExist(tableXMutationConditionInput.name.value, ctx)) {\n        ctx.addInput(tableXMutationConditionInput);\n      }\n\n      const attributeTypeEnum = makeAttributeTypeEnum();\n      if (!this.typeExist(attributeTypeEnum.name.value, ctx)) {\n        ctx.addType(attributeTypeEnum);\n      }\n    }\n  }\n\n  private getOpts(opts: DynamoDBModelTransformerOptions) {\n    const defaultOpts = {\n      EnableDeletionProtection: false,\n    };\n    return {\n      ...defaultOpts,\n      ...opts,\n    };\n  }\n\n  private setSyncConfig(ctx: TransformerContext, typeName: string) {\n    let syncConfig: SyncConfig;\n    const resolverConfig = ctx.getResolverConfig();\n    if (resolverConfig && resolverConfig.project) {\n      syncConfig = resolverConfig.project;\n    }\n    if (resolverConfig && resolverConfig.models && resolverConfig.models[typeName]) {\n      const typeResolverConfig = resolverConfig.models[typeName];\n      if (typeResolverConfig.ConflictDetection && typeResolverConfig.ConflictHandler) {\n        syncConfig = typeResolverConfig;\n      } else {\n        console.warn(`Invalid resolverConfig for type ${typeName}. Using the project resolverConfig instead.`);\n      }\n    }\n    return (this.opts.SyncConfig = syncConfig);\n  }\n\n  // Due to the current architecture of Transformers we've to handle the 'id' field removal\n  // here, because KeyTranformer will not be invoked if there are no @key directives declared\n  // on the type.\n  private updateMutationConditionInput(ctx: TransformerContext, type: ObjectTypeDefinitionNode): void {\n    if (this.supportsConditions(ctx)) {\n      // Get the existing ModelXConditionInput\n      const tableXMutationConditionInputName = ModelResourceIDs.ModelConditionInputTypeName(type.name.value);\n\n      if (this.typeExist(tableXMutationConditionInputName, ctx)) {\n        const tableXMutationConditionInput = <InputObjectTypeDefinitionNode>ctx.getType(tableXMutationConditionInputName);\n\n        const keyDirectives = type.directives.filter(d => d.name.value === 'key');\n\n        // If there are @key directives defined we've nothing to do, it will handle everything\n        if (keyDirectives && keyDirectives.length > 0) {\n          return;\n        }\n\n        // Remove the field named 'id' from the condition if there is one\n        const idField = tableXMutationConditionInput.fields.find(f => f.name.value === 'id');\n\n        if (idField) {\n          const reducedFields = tableXMutationConditionInput.fields.filter(f => Boolean(f.name.value !== 'id'));\n\n          const updatedInput = {\n            ...tableXMutationConditionInput,\n            fields: reducedFields,\n          };\n\n          ctx.putType(updatedInput);\n        }\n      }\n    }\n  }\n\n  private supportsConditions(context: TransformerContext) {\n    return context.getTransformerVersion() >= CONDITIONS_MINIMUM_VERSION;\n  }\n\n  private static isTimestampCompatibleField(field?: FieldDefinitionNode): boolean {\n    if (field && !(getBaseType(field.type) === 'AWSDateTime' || getBaseType(field.type) === 'String')) {\n      return false;\n    }\n    return true;\n  }\n\n  private addInitalizationMetadata(ctx: TransformerContext, resourceId: string, initCode: string): void {\n    const ddbMetadata = ctx.metadata.has(METADATA_KEY) ? ctx.metadata.get(METADATA_KEY) : {};\n    ddbMetadata.hoistedRequestMappingContent = {\n      ...ddbMetadata?.hoistedRequestMappingContent,\n      [resourceId]: initCode,\n    };\n    ctx.metadata.set(METADATA_KEY, ddbMetadata);\n  }\n}\n"]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7ceb30bd5cab81744dffec644c52054d920072a6"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1n8u9ip2ud = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1n8u9ip2ud();
cov_1n8u9ip2ud().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1n8u9ip2ud().s[1]++;
exports.DynamoDBModelTransformer = exports.directiveDefinition = exports.CONDITIONS_MINIMUM_VERSION = void 0;
const cloudform_types_1 =
/* istanbul ignore next */
(cov_1n8u9ip2ud().s[2]++, require("cloudform-types"));
const graphql_transformer_common_1 =
/* istanbul ignore next */
(cov_1n8u9ip2ud().s[3]++, require("graphql-transformer-common"));
const graphql_transformer_core_1 =
/* istanbul ignore next */
(cov_1n8u9ip2ud().s[4]++, require("graphql-transformer-core"));
const definitions_1 =
/* istanbul ignore next */
(cov_1n8u9ip2ud().s[5]++, require("./definitions"));
const ModelDirectiveArgs_1 =
/* istanbul ignore next */
(cov_1n8u9ip2ud().s[6]++, require("./ModelDirectiveArgs"));
const resources_1 =
/* istanbul ignore next */
(cov_1n8u9ip2ud().s[7]++, require("./resources"));
const ITransformer_1 =
/* istanbul ignore next */
(cov_1n8u9ip2ud().s[8]++, require("graphql-transformer-core/lib/ITransformer"));
const METADATA_KEY =
/* istanbul ignore next */
(cov_1n8u9ip2ud().s[9]++, 'DynamoDBTransformerMetadata'); // Transform config version constants
// We have constants instead of magic number all around, later these should be moved to feature
// flags and transformers should be feature and not version dependent.
// To support generation of conditions and new naming, version 5 was introduced

/* istanbul ignore next */
cov_1n8u9ip2ud().s[10]++;
exports.CONDITIONS_MINIMUM_VERSION = 5;
/**
 * The @model transformer.
 *
 * This transform creates a single DynamoDB table for all of your application's
 * data. It uses a standard key structure and nested map to store object values.
 * A relationKey field
 *
 * {
 *  type (HASH),
 *  id (SORT),
 *  value (MAP),
 *  createdAt, (LSI w/ type)
 *  updatedAt (LSI w/ type)
 * }
 */

/* istanbul ignore next */
cov_1n8u9ip2ud().s[11]++;
exports.directiveDefinition = graphql_transformer_core_1.gql`
  directive @model(
    queries: ModelQueryMap
    mutations: ModelMutationMap
    subscriptions: ModelSubscriptionMap
    timestamps: TimestampConfiguration
  ) on OBJECT
  input ModelMutationMap {
    create: String
    update: String
    delete: String
  }
  input ModelQueryMap {
    get: String
    list: String
  }
  input ModelSubscriptionMap {
    onCreate: [String]
    onUpdate: [String]
    onDelete: [String]
    level: ModelSubscriptionLevel
  }
  enum ModelSubscriptionLevel {
    off
    public
    on
  }
  input TimestampConfiguration {
    createdAt: String
    updatedAt: String
  }
`;

class DynamoDBModelTransformer extends
/* istanbul ignore next */
(graphql_transformer_core_1.Transformer) {
  constructor(opts =
  /* istanbul ignore next */
  (cov_1n8u9ip2ud().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[0]++;
    cov_1n8u9ip2ud().s[12]++;
    super('DynamoDBModelTransformer', exports.directiveDefinition);

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[13]++;
    this.transformerName = 'DynamoDBModelTransformer';

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[14]++;
    this.capabilities = [ITransformer_1.ModelCapabilities.SUPPORT_AUTH];

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[15]++;
    this.modelTypes = [];

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[16]++;

    this.before = ctx => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[1]++;
      const template =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[17]++, this.resources.initTemplate());

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[18]++;
      ctx.mergeResources(template.Resources);

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[19]++;
      ctx.mergeParameters(template.Parameters);

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[20]++;
      ctx.mergeOutputs(template.Outputs);

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[21]++;
      ctx.mergeConditions(template.Conditions);
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[22]++;

    this.after = ctx => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[2]++;
      // append hoisted initalization code to the top of request mapping template
      const ddbMetata =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[23]++, ctx.metadata.get(METADATA_KEY));

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[24]++;

      if (ddbMetata) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[1][0]++;
        cov_1n8u9ip2ud().s[25]++;
        Object.entries(
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[2][0]++, ddbMetata.hoistedRequestMappingContent) ||
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[2][1]++, {})).forEach(([resourceId, hoistedContent]) => {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().f[3]++;
          const resource =
          /* istanbul ignore next */
          (cov_1n8u9ip2ud().s[26]++, ctx.getResource(resourceId));

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[27]++;
          resource.Properties.RequestMappingTemplate = [hoistedContent, resource.Properties.RequestMappingTemplate].join('\n');

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[28]++;
          ctx.setResource(resourceId, resource);
        });
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[1][1]++;
      }
    };
    /**
     * Given the initial input and context manipulate the context to handle this object directive.
     * @param initial The input passed to the transform.
     * @param ctx The accumulated context for the transform.
     */


    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[29]++;

    this.object = (def, directive, ctx) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[4]++;
      // Add a stack mapping so that all model resources are pulled
      // into their own stack at the end of the transformation.
      const typeName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[30]++, def.name.value);

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[31]++;
      this.modelTypes.push(typeName);
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[32]++;

    this.transformSchema = ctx => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[5]++;
      cov_1n8u9ip2ud().s[33]++;
      this.modelTypes.forEach(modelName => {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().f[6]++;

        var _a;

        const model =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[34]++, ctx.getObject(modelName));
        const directive =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[35]++,
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[4][0]++, (_a = model.directives) === null) ||
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[4][1]++, _a === void 0) ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[3][0]++, void 0) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[3][1]++, _a.find(d => {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().f[7]++;
          cov_1n8u9ip2ud().s[36]++;
          return d.name.value === 'model';
        })));
        const nonModelArray =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[37]++, definitions_1.getNonModelObjectArray(model, ctx, new Map()));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[38]++;
        nonModelArray.forEach(value => {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().f[8]++;
          const nonModelObject =
          /* istanbul ignore next */
          (cov_1n8u9ip2ud().s[39]++, definitions_1.makeNonModelInputObject(value, nonModelArray, ctx));

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[40]++;

          if (!this.typeExist(nonModelObject.name.value, ctx)) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[5][0]++;
            cov_1n8u9ip2ud().s[41]++;
            ctx.addInput(nonModelObject);
          } else
          /* istanbul ignore next */
          {
            cov_1n8u9ip2ud().b[5][1]++;
          }
        });

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[42]++;
        this.createQueries(model, directive, ctx);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[43]++;
        this.createMutations(model, directive, ctx, nonModelArray);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[44]++;
        this.createSubscriptions(model, directive, ctx); // Update ModelXConditionInput type

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[45]++;
        this.updateMutationConditionInput(ctx, model); // change type to include sync related fields if sync is enabled

        const isSyncEnabled =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[46]++, this.opts.SyncConfig ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[6][0]++, true) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[6][1]++, false));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[47]++;

        if (isSyncEnabled) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[7][0]++;
          const obj =
          /* istanbul ignore next */
          (cov_1n8u9ip2ud().s[48]++, ctx.getObject(model.name.value));
          const newFields =
          /* istanbul ignore next */
          (cov_1n8u9ip2ud().s[49]++, [...obj.fields, graphql_transformer_common_1.makeField('_version', [], graphql_transformer_common_1.wrapNonNull(graphql_transformer_common_1.makeNamedType('Int'))), graphql_transformer_common_1.makeField('_deleted', [], graphql_transformer_common_1.makeNamedType('Boolean')), graphql_transformer_common_1.makeField('_lastChangedAt', [], graphql_transformer_common_1.wrapNonNull(graphql_transformer_common_1.makeNamedType('AWSTimestamp')))]);
          const newObj =
          /* istanbul ignore next */
          (cov_1n8u9ip2ud().s[50]++, { ...obj,
            fields: newFields
          });

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[51]++;
          ctx.updateObject(newObj);
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[7][1]++;
        }

        cov_1n8u9ip2ud().s[52]++;
        this.addTimestampFields(model, directive, ctx);
      });
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[53]++;

    this.generateResolvers = ctx => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[9]++;
      cov_1n8u9ip2ud().s[54]++;
      this.modelTypes.forEach(modelName => {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().f[10]++;
        const model =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[55]++, ctx.getObject(modelName)); // Create the dynamodb table to hold the @model type
        // TODO: Handle types with more than a single "id" hash key

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[56]++;
        this.setSyncConfig(ctx, modelName);
        const isSyncEnabled =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[57]++, this.opts.SyncConfig ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[8][0]++, true) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[8][1]++, false));
        const tableLogicalID =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[58]++, graphql_transformer_common_1.ModelResourceIDs.ModelTableResourceID(modelName));
        const iamRoleLogicalID =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[59]++, graphql_transformer_common_1.ModelResourceIDs.ModelTableIAMRoleID(modelName));
        const dataSourceRoleLogicalID =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[60]++, graphql_transformer_common_1.ModelResourceIDs.ModelTableDataSourceID(modelName));
        const deletionPolicy =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[61]++, this.opts.EnableDeletionProtection ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[9][0]++, cloudform_types_1.DeletionPolicy.Retain) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[9][1]++, cloudform_types_1.DeletionPolicy.Delete));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[62]++;
        ctx.setResource(tableLogicalID, this.resources.makeModelTable(modelName, undefined, undefined, deletionPolicy, isSyncEnabled));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[63]++;
        ctx.mapResourceToStack(modelName, tableLogicalID);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[64]++;
        ctx.setResource(iamRoleLogicalID, this.resources.makeIAMRole(modelName, this.opts.SyncConfig));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[65]++;
        ctx.mapResourceToStack(modelName, iamRoleLogicalID);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[66]++;
        ctx.setResource(dataSourceRoleLogicalID, this.resources.makeDynamoDBDataSource(tableLogicalID, iamRoleLogicalID, modelName, isSyncEnabled));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[67]++;
        ctx.mapResourceToStack(modelName, dataSourceRoleLogicalID);
        const streamArnOutputId =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[68]++, `GetAtt${graphql_transformer_common_1.ModelResourceIDs.ModelTableStreamArn(modelName)}`);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[69]++;
        ctx.setOutput( // "GetAtt" is a backward compatibility addition to prevent breaking current deploys.
        streamArnOutputId, this.resources.makeTableStreamArnOutput(tableLogicalID));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[70]++;
        ctx.mapResourceToStack(modelName, streamArnOutputId);
        const datasourceOutputId =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[71]++, `GetAtt${dataSourceRoleLogicalID}Name`);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[72]++;
        ctx.setOutput(datasourceOutputId, this.resources.makeDataSourceOutput(dataSourceRoleLogicalID));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[73]++;
        ctx.mapResourceToStack(modelName, datasourceOutputId);
        const tableNameOutputId =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[74]++, `GetAtt${tableLogicalID}Name`);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[75]++;
        ctx.setOutput(tableNameOutputId, this.resources.makeTableNameOutput(tableLogicalID));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[76]++;
        ctx.mapResourceToStack(modelName, tableNameOutputId);
      });
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[77]++;

    this.createMutations = (def, directive, ctx, nonModelArray) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[11]++;
      const typeName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[78]++, def.name.value);
      const isSyncEnabled =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[79]++, this.opts.SyncConfig ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[10][0]++, true) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[10][1]++, false));
      const mutationFields =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[80]++, []); // Get any name overrides provided by the user. If an empty map it provided
      // then we do not generate those fields.

      const directiveArguments =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[81]++, graphql_transformer_core_1.getDirectiveArguments(directive)); // Configure mutations based on *mutations* argument

      let shouldMakeCreate =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[82]++, true);
      let shouldMakeUpdate =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[83]++, true);
      let shouldMakeDelete =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[84]++, true);
      let createFieldNameOverride =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[85]++, undefined);
      let updateFieldNameOverride =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[86]++, undefined);
      let deleteFieldNameOverride =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[87]++, undefined); // timestamp fields

      const createdAtField =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[88]++, ModelDirectiveArgs_1.getCreatedAtFieldName(directive));
      const updatedAtField =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[89]++, ModelDirectiveArgs_1.getUpdatedAtFieldName(directive));
      const existingCreatedAtField =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[90]++, def.fields.find(f => {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().f[12]++;
        cov_1n8u9ip2ud().s[91]++;
        return f.name.value === createdAtField;
      }));
      const existingUpdatedAtField =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[92]++, def.fields.find(f => {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().f[13]++;
        cov_1n8u9ip2ud().s[93]++;
        return f.name.value === updatedAtField;
      })); // auto populate the timestamp field only if they are of AWSDateTime type

      const timestampFields =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[94]++, {
        createdAtField: DynamoDBModelTransformer.isTimestampCompatibleField(existingCreatedAtField) ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[11][0]++, createdAtField) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[11][1]++, undefined),
        updatedAtField: DynamoDBModelTransformer.isTimestampCompatibleField(existingUpdatedAtField) ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[12][0]++, updatedAtField) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[12][1]++, undefined)
      }); // Figure out which mutations to make and if they have name overrides

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[95]++;

      if (directiveArguments.mutations === null) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[13][0]++;
        cov_1n8u9ip2ud().s[96]++;
        shouldMakeCreate = false;

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[97]++;
        shouldMakeUpdate = false;

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[98]++;
        shouldMakeDelete = false;
      } else {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[13][1]++;
        cov_1n8u9ip2ud().s[99]++;

        if (directiveArguments.mutations) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[14][0]++;
          cov_1n8u9ip2ud().s[100]++;

          if (!directiveArguments.mutations.create) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[15][0]++;
            cov_1n8u9ip2ud().s[101]++;
            shouldMakeCreate = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[15][1]++;
            cov_1n8u9ip2ud().s[102]++;
            createFieldNameOverride = directiveArguments.mutations.create;
          }

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[103]++;

          if (!directiveArguments.mutations.update) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[16][0]++;
            cov_1n8u9ip2ud().s[104]++;
            shouldMakeUpdate = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[16][1]++;
            cov_1n8u9ip2ud().s[105]++;
            updateFieldNameOverride = directiveArguments.mutations.update;
          }

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[106]++;

          if (!directiveArguments.mutations.delete) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[17][0]++;
            cov_1n8u9ip2ud().s[107]++;
            shouldMakeDelete = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[17][1]++;
            cov_1n8u9ip2ud().s[108]++;
            deleteFieldNameOverride = directiveArguments.mutations.delete;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[14][1]++;
        }
      }

      const conditionInputName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[109]++, graphql_transformer_common_1.ModelResourceIDs.ModelConditionInputTypeName(typeName)); // Create the mutations.

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[110]++;

      if (shouldMakeCreate) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[18][0]++;
        const createInput =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[111]++, definitions_1.makeCreateInputObject(def, directive, nonModelArray, ctx, isSyncEnabled));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[112]++;

        if (!ctx.getType(createInput.name.value)) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[19][0]++;
          cov_1n8u9ip2ud().s[113]++;
          ctx.addInput(createInput);
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[19][1]++;
        }

        const createResolver =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[114]++, this.resources.makeCreateResolver({
          type: def.name.value,
          nameOverride: createFieldNameOverride,
          syncConfig: this.opts.SyncConfig
        }));
        const resolver =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[115]++, ctx.resolvers.addMutationResolver(createResolver.typeName, createResolver.fieldName, createResolver.dataSourceName, createResolver.requestMappingTemplate, createResolver.responseMappingTemplate));
        const hositedInitalization =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[116]++, this.resources.initalizeDefaultInputForCreateMutation(createInput, timestampFields));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[117]++;
        resolver.addSlot('init', hositedInitalization);
        const resourceId =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[118]++, graphql_transformer_common_1.ResolverResourceIDs.DynamoDBCreateResolverResourceID(typeName));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[119]++;
        resolver.mapResourceToStack(typeName);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[120]++;
        ctx.mapResourceToStack(typeName, resourceId);
        const args =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[121]++, [graphql_transformer_common_1.makeInputValueDefinition('input', graphql_transformer_common_1.makeNonNullType(graphql_transformer_common_1.makeNamedType(createInput.name.value)))]);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[122]++;

        if (this.supportsConditions(ctx)) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[20][0]++;
          cov_1n8u9ip2ud().s[123]++;
          args.push(graphql_transformer_common_1.makeInputValueDefinition('condition', graphql_transformer_common_1.makeNamedType(conditionInputName)));
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[20][1]++;
        }

        cov_1n8u9ip2ud().s[124]++;
        mutationFields.push(graphql_transformer_common_1.makeField(createResolver.fieldName, args, graphql_transformer_common_1.makeNamedType(def.name.value)));
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[18][1]++;
      }

      cov_1n8u9ip2ud().s[125]++;

      if (shouldMakeUpdate) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[21][0]++;
        const updateInput =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[126]++, definitions_1.makeUpdateInputObject(def, nonModelArray, ctx, isSyncEnabled));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[127]++;

        if (!ctx.getType(updateInput.name.value)) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[22][0]++;
          cov_1n8u9ip2ud().s[128]++;
          ctx.addInput(updateInput);
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[22][1]++;
        }

        const updateResolver =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[129]++, this.resources.makeUpdateResolver({
          type: def.name.value,
          nameOverride: updateFieldNameOverride,
          syncConfig: this.opts.SyncConfig,
          timestamps: timestampFields
        }));
        const resourceId =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[130]++, graphql_transformer_common_1.ResolverResourceIDs.DynamoDBUpdateResolverResourceID(typeName));
        const resolver =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[131]++, ctx.resolvers.addMutationResolver(updateResolver.typeName, updateResolver.fieldName, updateResolver.dataSourceName, updateResolver.requestMappingTemplate, updateResolver.responseMappingTemplate));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[132]++;
        resolver.mapResourceToStack(typeName);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[133]++;
        ctx.mapResourceToStack(typeName, resourceId);
        const args =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[134]++, [graphql_transformer_common_1.makeInputValueDefinition('input', graphql_transformer_common_1.makeNonNullType(graphql_transformer_common_1.makeNamedType(updateInput.name.value)))]);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[135]++;

        if (this.supportsConditions(ctx)) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[23][0]++;
          cov_1n8u9ip2ud().s[136]++;
          args.push(graphql_transformer_common_1.makeInputValueDefinition('condition', graphql_transformer_common_1.makeNamedType(conditionInputName)));
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[23][1]++;
        }

        cov_1n8u9ip2ud().s[137]++;
        mutationFields.push(graphql_transformer_common_1.makeField(updateResolver.fieldName.toString(), args, graphql_transformer_common_1.makeNamedType(def.name.value)));
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[21][1]++;
      }

      cov_1n8u9ip2ud().s[138]++;

      if (shouldMakeDelete) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[24][0]++;
        const deleteInput =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[139]++, definitions_1.makeDeleteInputObject(def, isSyncEnabled));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[140]++;

        if (!ctx.getType(deleteInput.name.value)) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[25][0]++;
          cov_1n8u9ip2ud().s[141]++;
          ctx.addInput(deleteInput);
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[25][1]++;
        }

        const deleteResolver =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[142]++, this.resources.makeDeleteResolver({
          type: def.name.value,
          nameOverride: deleteFieldNameOverride,
          syncConfig: this.opts.SyncConfig
        }));
        const resolver =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[143]++, ctx.resolvers.addMutationResolver(deleteResolver.typeName, deleteResolver.fieldName, deleteResolver.dataSourceName, deleteResolver.requestMappingTemplate, deleteResolver.responseMappingTemplate));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[144]++;
        resolver.mapResourceToStack(typeName);
        const args =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[145]++, [graphql_transformer_common_1.makeInputValueDefinition('input', graphql_transformer_common_1.makeNonNullType(graphql_transformer_common_1.makeNamedType(deleteInput.name.value)))]);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[146]++;

        if (this.supportsConditions(ctx)) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[26][0]++;
          cov_1n8u9ip2ud().s[147]++;
          args.push(graphql_transformer_common_1.makeInputValueDefinition('condition', graphql_transformer_common_1.makeNamedType(conditionInputName)));
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[26][1]++;
        }

        cov_1n8u9ip2ud().s[148]++;
        mutationFields.push(graphql_transformer_common_1.makeField(deleteResolver.fieldName.toString(), args, graphql_transformer_common_1.makeNamedType(def.name.value)));
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[24][1]++;
      }

      cov_1n8u9ip2ud().s[149]++;
      ctx.addMutationFields(mutationFields);

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[150]++;

      if (
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[28][0]++, shouldMakeCreate) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[28][1]++, shouldMakeUpdate) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[28][2]++, shouldMakeDelete)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[27][0]++;
        cov_1n8u9ip2ud().s[151]++;
        this.generateConditionInputs(ctx, def);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[27][1]++;
      }
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[152]++;

    this.createQueries = (def, directive, ctx) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[14]++;
      const typeName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[153]++, def.name.value);
      const queryFields =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[154]++, []);
      const directiveArguments =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[155]++, graphql_transformer_core_1.getDirectiveArguments(directive)); // Configure queries based on *queries* argument

      let shouldMakeGet =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[156]++, true);
      let shouldMakeList =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[157]++, true);
      let getFieldNameOverride =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[158]++, undefined);
      let listFieldNameOverride =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[159]++, undefined);
      const isSyncEnabled =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[160]++, this.opts.SyncConfig ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[29][0]++, true) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[29][1]++, false)); // Figure out which queries to make and if they have name overrides.
      // If queries is undefined (default), create all queries
      // If queries is explicetly set to null, do not create any
      // else if queries is defined, check overrides

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[161]++;

      if (directiveArguments.queries === null) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[30][0]++;
        cov_1n8u9ip2ud().s[162]++;
        shouldMakeGet = false;

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[163]++;
        shouldMakeList = false;
      } else {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[30][1]++;
        cov_1n8u9ip2ud().s[164]++;

        if (directiveArguments.queries) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[31][0]++;
          cov_1n8u9ip2ud().s[165]++;

          if (!directiveArguments.queries.get) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[32][0]++;
            cov_1n8u9ip2ud().s[166]++;
            shouldMakeGet = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[32][1]++;
            cov_1n8u9ip2ud().s[167]++;
            getFieldNameOverride = directiveArguments.queries.get;
          }

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[168]++;

          if (!directiveArguments.queries.list) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[33][0]++;
            cov_1n8u9ip2ud().s[169]++;
            shouldMakeList = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[33][1]++;
            cov_1n8u9ip2ud().s[170]++;
            listFieldNameOverride = directiveArguments.queries.list;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[31][1]++;
        }
      }

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[171]++;

      if (shouldMakeList) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[34][0]++;
        cov_1n8u9ip2ud().s[172]++;

        if (!this.typeExist('ModelSortDirection', ctx)) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[35][0]++;
          const tableSortDirection =
          /* istanbul ignore next */
          (cov_1n8u9ip2ud().s[173]++, definitions_1.makeModelSortDirectionEnumObject());

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[174]++;
          ctx.addEnum(tableSortDirection);
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[35][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[34][1]++;
      } // Create sync query


      cov_1n8u9ip2ud().s[175]++;

      if (isSyncEnabled) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[36][0]++;
        const syncResolver =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[176]++, this.resources.makeSyncResolver(typeName));
        const syncResourceID =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[177]++, graphql_transformer_common_1.ResolverResourceIDs.SyncResolverResourceID(typeName));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[178]++;
        ctx.setResource(syncResourceID, syncResolver);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[179]++;
        ctx.mapResourceToStack(typeName, syncResourceID);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[180]++;
        this.generateModelXConnectionType(ctx, def, isSyncEnabled);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[181]++;
        this.generateFilterInputs(ctx, def);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[182]++;
        queryFields.push(graphql_transformer_common_1.makeField(syncResolver.Properties.FieldName.toString(), [graphql_transformer_common_1.makeInputValueDefinition('filter', graphql_transformer_common_1.makeNamedType(graphql_transformer_common_1.ModelResourceIDs.ModelFilterInputTypeName(def.name.value))), graphql_transformer_common_1.makeInputValueDefinition('limit', graphql_transformer_common_1.makeNamedType('Int')), graphql_transformer_common_1.makeInputValueDefinition('nextToken', graphql_transformer_common_1.makeNamedType('String')), graphql_transformer_common_1.makeInputValueDefinition('lastSync', graphql_transformer_common_1.makeNamedType('AWSTimestamp'))], graphql_transformer_common_1.makeNamedType(graphql_transformer_common_1.ModelResourceIDs.ModelConnectionTypeName(def.name.value))));
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[36][1]++;
      } // Create get queries


      cov_1n8u9ip2ud().s[183]++;

      if (shouldMakeGet) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[37][0]++;
        const getResolver =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[184]++, this.resources.makeGetResolver(def.name.value, getFieldNameOverride, isSyncEnabled, ctx.getQueryTypeName()));
        const resolver =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[185]++, ctx.resolvers.addQueryResolver(getResolver.typeName, getResolver.fieldName, getResolver.dataSourceName, getResolver.requestMappingTemplate, getResolver.responseMappingTemplate));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[186]++;
        resolver.mapResourceToStack(typeName);
        const resourceId =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[187]++, graphql_transformer_common_1.ResolverResourceIDs.DynamoDBGetResolverResourceID(typeName));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[188]++;
        ctx.mapResourceToStack(typeName, resourceId);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[189]++;
        queryFields.push(graphql_transformer_common_1.makeField(getResolver.fieldName.toString(), [graphql_transformer_common_1.makeInputValueDefinition('id', graphql_transformer_common_1.makeNonNullType(graphql_transformer_common_1.makeNamedType('ID')))], graphql_transformer_common_1.makeNamedType(def.name.value)));
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[37][1]++;
      }

      cov_1n8u9ip2ud().s[190]++;

      if (shouldMakeList) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[38][0]++;
        cov_1n8u9ip2ud().s[191]++;
        this.generateModelXConnectionType(ctx, def); // Create the list resolver

        const listResolver =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[192]++, this.resources.makeListResolver(def.name.value, listFieldNameOverride, isSyncEnabled, ctx.getQueryTypeName()));
        const resourceId =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[193]++, graphql_transformer_common_1.ResolverResourceIDs.DynamoDBListResolverResourceID(typeName));
        const resolver =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[194]++, ctx.resolvers.addQueryResolver(listResolver.typeName, listResolver.fieldName, listResolver.dataSourceName, listResolver.requestMappingTemplate, listResolver.responseMappingTemplate));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[195]++;
        resolver.mapResourceToStack(typeName);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[196]++;
        ctx.mapResourceToStack(typeName, resourceId);

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[197]++;
        queryFields.push(graphql_transformer_common_1.makeConnectionField(listResolver.fieldName.toString(), def.name.value));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[198]++;
        this.generateFilterInputs(ctx, def);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[38][1]++;
      }

      cov_1n8u9ip2ud().s[199]++;
      ctx.addQueryFields(queryFields);
    };
    /**
     * Creates subscriptions for a @model object type. By default creates a subscription for
     * create, update, and delete mutations.
     *
     * Subscriptions are one to many in that a subscription may subscribe to multiple mutations.
     * You may thus provide multiple names of the subscriptions that will be triggered by each
     * mutation.
     *
     * type Post @model(subscriptions: { onCreate: ["onPostCreated", "onFeedUpdated"] }) {
     *      id: ID!
     *      title: String!
     * }
     *
     * will create two subscription fields:
     *
     * type Subscription {
     *      onPostCreated: Post @aws_subscribe(mutations: ["createPost"])
     *      onFeedUpdated: Post @aws_subscribe(mutations: ["createPost"])
     * }
     *  Subscription Levels
     *   subscriptions.level === OFF || subscriptions === null
     *      Will not create subscription operations
     *   subcriptions.level === PUBLIC
     *      Will continue as is creating subscription operations
     *   subscriptions.level === ON || subscriptions === undefined
     *      If auth is enabled it will enabled protection on subscription operations and resolvers
     */


    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[200]++;

    this.createSubscriptions = (def, directive, ctx) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[15]++;

      var _a, _b, _c;

      const typeName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[201]++, def.name.value);
      const subscriptionFields =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[202]++, []);
      const directiveArguments =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[203]++, graphql_transformer_core_1.getDirectiveArguments(directive));
      const createFieldName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[204]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[39][0]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[41][0]++, (_a =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[43][0]++, directiveArguments === null) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[43][1]++, directiveArguments === void 0) ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[42][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[42][1]++, directiveArguments.mutations)) === null) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[41][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[40][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[40][1]++, _a.create)) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[39][1]++, graphql_transformer_common_1.graphqlName('create' + graphql_transformer_common_1.toUpper(typeName))));
      const updateFieldName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[205]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[44][0]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[46][0]++, (_b =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[48][0]++, directiveArguments === null) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[48][1]++, directiveArguments === void 0) ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[47][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[47][1]++, directiveArguments.mutations)) === null) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[46][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[45][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[45][1]++, _b.update)) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[44][1]++, graphql_transformer_common_1.graphqlName('update' + graphql_transformer_common_1.toUpper(typeName))));
      const deleteFieldName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[206]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[49][0]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[51][0]++, (_c = directiveArguments.mutations) === null) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[51][1]++, _c === void 0) ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[50][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[50][1]++, _c.delete)) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[49][1]++, graphql_transformer_common_1.graphqlName('delete' + graphql_transformer_common_1.toUpper(typeName))));
      const mutationTypeName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[207]++, ctx.getMutationTypeName());
      const subscriptionsArgument =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[208]++, directiveArguments.subscriptions);
      const createResolver =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[209]++, ctx.resolvers.getResolver(mutationTypeName, createFieldName));
      const updateResolver =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[210]++, ctx.resolvers.getResolver(mutationTypeName, updateFieldName));
      const deleteResolver =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[211]++, ctx.resolvers.getResolver(mutationTypeName, deleteFieldName));

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[212]++;

      if (subscriptionsArgument === null) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[52][0]++;
        cov_1n8u9ip2ud().s[213]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[52][1]++;
      }

      cov_1n8u9ip2ud().s[214]++;

      if (
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[54][0]++, subscriptionsArgument) &&
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[54][1]++, subscriptionsArgument.level === 'off')) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[53][0]++;
        cov_1n8u9ip2ud().s[215]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[53][1]++;
      } // Add the custom subscriptions


      const onCreate =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[216]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[55][0]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[57][0]++, subscriptionsArgument === null) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[57][1]++, subscriptionsArgument === void 0) ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[56][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[56][1]++, subscriptionsArgument.onCreate)) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[55][1]++, [graphql_transformer_common_1.ModelResourceIDs.ModelOnCreateSubscriptionName(typeName)]));
      const onUpdate =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[217]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[58][0]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[60][0]++, subscriptionsArgument === null) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[60][1]++, subscriptionsArgument === void 0) ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[59][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[59][1]++, subscriptionsArgument.onUpdate)) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[58][1]++, [graphql_transformer_common_1.ModelResourceIDs.ModelOnUpdateSubscriptionName(typeName)]));
      const onDelete =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[218]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[61][0]++,
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[63][0]++, subscriptionsArgument === null) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[63][1]++, subscriptionsArgument === void 0) ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[62][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[62][1]++, subscriptionsArgument.onDelete)) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[61][1]++, [graphql_transformer_common_1.ModelResourceIDs.ModelOnDeleteSubscriptionName(typeName)])); // Add the default subscriptions

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[219]++;

      if (createResolver) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[64][0]++;
        cov_1n8u9ip2ud().s[220]++;
        onCreate.forEach(fieldName => {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().f[16]++;
          const onCreateField =
          /* istanbul ignore next */
          (cov_1n8u9ip2ud().s[221]++, definitions_1.makeSubscriptionField(fieldName, typeName, [createFieldName]));

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[222]++;
          subscriptionFields.push(onCreateField);
        });
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[64][1]++;
      }

      cov_1n8u9ip2ud().s[223]++;

      if (updateResolver) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[65][0]++;
        cov_1n8u9ip2ud().s[224]++;
        onUpdate.forEach(fieldName => {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().f[17]++;
          const onUpdateField =
          /* istanbul ignore next */
          (cov_1n8u9ip2ud().s[225]++, definitions_1.makeSubscriptionField(fieldName, typeName, [updateFieldName]));

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[226]++;
          subscriptionFields.push(onUpdateField);
        });
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[65][1]++;
      }

      cov_1n8u9ip2ud().s[227]++;

      if (deleteResolver) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[66][0]++;
        cov_1n8u9ip2ud().s[228]++;
        onDelete.forEach(fieldName => {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().f[18]++;
          const onDeleteField =
          /* istanbul ignore next */
          (cov_1n8u9ip2ud().s[229]++, definitions_1.makeSubscriptionField(fieldName, typeName, [deleteFieldName]));

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[230]++;
          subscriptionFields.push(onDeleteField);
        });
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[66][1]++;
      }

      cov_1n8u9ip2ud().s[231]++;
      ctx.addSubscriptionFields(subscriptionFields);
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[232]++;

    this.generateGetResolver = (ctx, type, typeName, fieldName) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[19]++;
      cov_1n8u9ip2ud().s[233]++;

      if (!this.isModelType(type)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[67][0]++;
        cov_1n8u9ip2ud().s[234]++;
        throw new Error(`type ${type.name} does not use @model directive`);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[67][1]++;
      }

      const resolverConfig =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[235]++, this.resources.makeGetResolver(type.name.value, fieldName, this.opts.SyncConfig ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[68][0]++, true) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[68][1]++, false), typeName));

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[236]++;
      return ctx.resolvers.addQueryResolver(resolverConfig.typeName, resolverConfig.fieldName, resolverConfig.dataSourceName, resolverConfig.requestMappingTemplate, resolverConfig.responseMappingTemplate);
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[237]++;

    this.generateListResolver = (ctx, type, typeName, fieldName) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[20]++;
      cov_1n8u9ip2ud().s[238]++;

      if (!this.isModelType(type)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[69][0]++;
        cov_1n8u9ip2ud().s[239]++;
        throw new Error(`type ${type.name} does not use @model directive`);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[69][1]++;
      }

      const resolverConfig =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[240]++, this.resources.makeListResolver(type.name.value, fieldName, this.opts.SyncConfig ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[70][0]++, true) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[70][1]++, false), typeName));

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[241]++;
      return ctx.resolvers.addQueryResolver(resolverConfig.typeName, resolverConfig.fieldName, resolverConfig.dataSourceName, resolverConfig.requestMappingTemplate, resolverConfig.responseMappingTemplate);
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[242]++;

    this.generteCreateResolver = (ctx, type, typeName, fieldName) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[21]++;
      cov_1n8u9ip2ud().s[243]++;

      if (!this.isModelType(type)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[71][0]++;
        cov_1n8u9ip2ud().s[244]++;
        throw new Error(`type ${type.name} does not use @model directive`);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[71][1]++;
      } // Todo: Make the signature consistent with queryTypes. Either pass single object or mulitple arguments


      const resolverConfig =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[245]++, this.resources.makeCreateResolver({
        type: type.name.value,
        nameOverride: fieldName,
        syncConfig: this.opts.SyncConfig,
        mutationTypeName: typeName
      }));

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[246]++;
      return ctx.resolvers.addMutationResolver(resolverConfig.typeName, resolverConfig.fieldName, resolverConfig.dataSourceName, resolverConfig.requestMappingTemplate, resolverConfig.responseMappingTemplate);
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[247]++;

    this.generateUpdateResolver = (ctx, type, typeName, fieldName) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[22]++;
      cov_1n8u9ip2ud().s[248]++;

      if (!this.isModelType(type)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[72][0]++;
        cov_1n8u9ip2ud().s[249]++;
        throw new Error(`type ${type.name} does not use @model directive`);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[72][1]++;
      }

      const resolverConfig =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[250]++, this.resources.makeUpdateResolver({
        type: type.name.value,
        nameOverride: fieldName,
        syncConfig: this.opts.SyncConfig,
        mutationTypeName: typeName
      }));

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[251]++;
      return ctx.resolvers.addMutationResolver(resolverConfig.typeName, resolverConfig.fieldName, resolverConfig.dataSourceName, resolverConfig.requestMappingTemplate, resolverConfig.responseMappingTemplate);
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[252]++;

    this.generateDeleteResolver = (ctx, type, typeName, fieldName) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[23]++;
      cov_1n8u9ip2ud().s[253]++;

      if (!this.isModelType(type)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[73][0]++;
        cov_1n8u9ip2ud().s[254]++;
        throw new Error(`type ${type.name} does not use @model directive`);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[73][1]++;
      }

      const resolverConfig =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[255]++, this.resources.makeDeleteResolver({
        type: type.name.value,
        nameOverride: fieldName,
        syncConfig: this.opts.SyncConfig,
        mutationTypeName: typeName
      }));

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[256]++;
      return ctx.resolvers.addMutationResolver(resolverConfig.typeName, resolverConfig.fieldName, resolverConfig.dataSourceName, resolverConfig.requestMappingTemplate, resolverConfig.responseMappingTemplate);
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[257]++;

    this.getQueryFieldNames = (ctx, type) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[24]++;
      const name =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[258]++, type.name.value);

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[259]++;

      if (!this.isModelType(type)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[74][0]++;
        cov_1n8u9ip2ud().s[260]++;
        throw new Error(`type ${type.name} does not use @model directive`);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[74][1]++;
      }

      const directive =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[261]++, type.directives.find(d => {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().f[25]++;
        cov_1n8u9ip2ud().s[262]++;
        return d.name.value === 'model';
      }));
      const directiveArguments =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[263]++, graphql_transformer_core_1.getDirectiveArguments(directive));
      let shouldMakeGet =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[264]++, true);
      let shouldMakeList =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[265]++, true);
      let getQueryFieldName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[266]++, graphql_transformer_common_1.graphqlName('get' + graphql_transformer_common_1.toUpper(name)));
      let listQueryFieldName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[267]++, graphql_transformer_common_1.graphqlName('list' + graphql_transformer_common_1.plurality(graphql_transformer_common_1.toUpper(name))));

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[268]++;

      if (directiveArguments.queries === null) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[75][0]++;
        cov_1n8u9ip2ud().s[269]++;
        shouldMakeGet = false;

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[270]++;
        shouldMakeList = false;
      } else {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[75][1]++;
        cov_1n8u9ip2ud().s[271]++;

        if (directiveArguments.queries) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[76][0]++;
          cov_1n8u9ip2ud().s[272]++;

          if (!directiveArguments.queries.get) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[77][0]++;
            cov_1n8u9ip2ud().s[273]++;
            shouldMakeGet = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[77][1]++;
            cov_1n8u9ip2ud().s[274]++;
            getQueryFieldName = directiveArguments.queries.get;
          }

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[275]++;

          if (!directiveArguments.queries.list) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[78][0]++;
            cov_1n8u9ip2ud().s[276]++;
            shouldMakeList = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[78][1]++;
            cov_1n8u9ip2ud().s[277]++;
            listQueryFieldName = directiveArguments.queries.list;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[76][1]++;
        }
      }

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[278]++;
      return {
        [ITransformer_1.QueryFieldType.GET]: shouldMakeGet ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[79][0]++, [getQueryFieldName]) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[79][1]++, []),
        [ITransformer_1.QueryFieldType.LIST]: shouldMakeList ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[80][0]++, [listQueryFieldName]) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[80][1]++, []),
        [ITransformer_1.QueryFieldType.SYNC]: this.opts.SyncConfig ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[81][0]++, [graphql_transformer_common_1.graphqlName('sync' + graphql_transformer_common_1.toUpper(name))]) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[81][1]++, [])
      };
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[279]++;

    this.getMutationFieldNames = (ctx, type) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[26]++;
      const name =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[280]++, type.name.value);

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[281]++;

      if (!this.isModelType(type)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[82][0]++;
        cov_1n8u9ip2ud().s[282]++;
        throw new Error(`type ${type.name} does not use @model directive`);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[82][1]++;
      }

      const directive =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[283]++, type.directives.find(d => {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().f[27]++;
        cov_1n8u9ip2ud().s[284]++;
        return d.name.value === 'model';
      }));
      const directiveArguments =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[285]++, graphql_transformer_core_1.getDirectiveArguments(directive));
      let shouldMakeCreate =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[286]++, true);
      let shouldMakeUpdate =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[287]++, true);
      let shouldMakeDelete =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[288]++, true);
      let createMutationsFieldName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[289]++, graphql_transformer_common_1.graphqlName('create' + graphql_transformer_common_1.toUpper(name)));
      let updateMutationFieldName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[290]++, graphql_transformer_common_1.graphqlName('update' + graphql_transformer_common_1.toUpper(name)));
      let deleteMutationFieldName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[291]++, graphql_transformer_common_1.graphqlName('delete' + graphql_transformer_common_1.toUpper(name)));

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[292]++;

      if (directiveArguments.mutations === null) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[83][0]++;
        cov_1n8u9ip2ud().s[293]++;
        shouldMakeCreate = false;

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[294]++;
        shouldMakeUpdate = false;

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[295]++;
        shouldMakeDelete = false;
      } else {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[83][1]++;
        cov_1n8u9ip2ud().s[296]++;

        if (directiveArguments.mutations) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[84][0]++;
          cov_1n8u9ip2ud().s[297]++;

          if (!directiveArguments.mutations.create) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[85][0]++;
            cov_1n8u9ip2ud().s[298]++;
            shouldMakeCreate = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[85][1]++;
            cov_1n8u9ip2ud().s[299]++;
            createMutationsFieldName = directiveArguments.mutations.create;
          }

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[300]++;

          if (!directiveArguments.mutations.update) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[86][0]++;
            cov_1n8u9ip2ud().s[301]++;
            shouldMakeUpdate = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[86][1]++;
            cov_1n8u9ip2ud().s[302]++;
            updateMutationFieldName = directiveArguments.mutations.update;
          }

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[303]++;

          if (!directiveArguments.mutations.delete) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[87][0]++;
            cov_1n8u9ip2ud().s[304]++;
            shouldMakeDelete = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[87][1]++;
            cov_1n8u9ip2ud().s[305]++;
            updateMutationFieldName = directiveArguments.mutations.delete;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[84][1]++;
        }
      }

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[306]++;
      return {
        [ITransformer_1.MutationFieldType.CREATE]: shouldMakeCreate ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[88][0]++, [createMutationsFieldName]) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[88][1]++, []),
        [ITransformer_1.MutationFieldType.UPDATE]: shouldMakeUpdate ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[89][0]++, [updateMutationFieldName]) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[89][1]++, []),
        [ITransformer_1.MutationFieldType.DELETE]: shouldMakeDelete ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[90][0]++, [deleteMutationFieldName]) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[90][1]++, [])
      };
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[307]++;

    this.getSubscriptionFieldNames = (ctx, type) => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[28]++;
      const name =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[308]++, type.name.value);

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[309]++;

      if (!this.isModelType(type)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[91][0]++;
        cov_1n8u9ip2ud().s[310]++;
        throw new Error(`type ${type.name} does not use @model directive`);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[91][1]++;
      }

      const directive =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[311]++, type.directives.find(d => {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().f[29]++;
        cov_1n8u9ip2ud().s[312]++;
        return d.name.value === 'model';
      }));
      const directiveArguments =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[313]++, graphql_transformer_core_1.getDirectiveArguments(directive));
      let shouldMakeOnCreate =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[314]++, true);
      let shouldMakeOnUpdate =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[315]++, true);
      let shouldMakeOnDelete =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[316]++, true);
      let onCreateFieldName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[317]++, [graphql_transformer_common_1.graphqlName('onCreate' + graphql_transformer_common_1.toUpper(name))]);
      let onUpdateFieldName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[318]++, [graphql_transformer_common_1.graphqlName('onUpdate' + graphql_transformer_common_1.toUpper(name))]);
      let onDeleteFieldName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[319]++, [graphql_transformer_common_1.graphqlName('onDelete' + graphql_transformer_common_1.toUpper(name))]);

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[320]++;

      if (
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[93][0]++, directiveArguments.subscriptions === null) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[93][1]++, directiveArguments.subscriptions.level === 'off')) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[92][0]++;
        cov_1n8u9ip2ud().s[321]++;
        shouldMakeOnCreate = false;

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[322]++;
        shouldMakeOnUpdate = false;

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[323]++;
        shouldMakeOnDelete = false;
      } else {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[92][1]++;
        cov_1n8u9ip2ud().s[324]++;

        if (directiveArguments.subscriptions) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[94][0]++;
          cov_1n8u9ip2ud().s[325]++;

          if (!directiveArguments.subscriptions.onCreate) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[95][0]++;
            cov_1n8u9ip2ud().s[326]++;
            shouldMakeOnCreate = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[95][1]++;
            cov_1n8u9ip2ud().s[327]++;
            onCreateFieldName = directiveArguments.subscriptions.onCreate;
          }

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[328]++;

          if (!directiveArguments.subscriptions.onUpdate) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[96][0]++;
            cov_1n8u9ip2ud().s[329]++;
            shouldMakeOnUpdate = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[96][1]++;
            cov_1n8u9ip2ud().s[330]++;
            onUpdateFieldName = directiveArguments.subscriptions.onUpdate;
          }

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[331]++;

          if (!directiveArguments.subscriptions.onDelete) {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[97][0]++;
            cov_1n8u9ip2ud().s[332]++;
            shouldMakeOnDelete = false;
          } else {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().b[97][1]++;
            cov_1n8u9ip2ud().s[333]++;
            onUpdateFieldName = directiveArguments.subscriptions.onDelete;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[94][1]++;
        }
      }

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[334]++;
      return {
        [ITransformer_1.SubscriptionFieldType.ON_CREATE]: shouldMakeOnCreate ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[98][0]++, onCreateFieldName) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[98][1]++, []),
        [ITransformer_1.SubscriptionFieldType.ON_UPDATE]: shouldMakeOnUpdate ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[99][0]++, onUpdateFieldName) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[99][1]++, []),
        [ITransformer_1.SubscriptionFieldType.ON_DELETE]: shouldMakeOnDelete ?
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[100][0]++, onDeleteFieldName) :
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[100][1]++, [])
      };
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[335]++;

    this.isModelType = type => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[30]++;
      cov_1n8u9ip2ud().s[336]++;
      return this.modelTypes.includes(type.name.value);
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[337]++;
    this.opts = this.getOpts(opts);

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[338]++;
    this.resources = new resources_1.ResourceFactory();
  }

  addTimestampFields(def, directive, ctx) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[31]++;
    const createdAtField =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[339]++, ModelDirectiveArgs_1.getCreatedAtFieldName(directive));
    const updatedAtField =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[340]++, ModelDirectiveArgs_1.getUpdatedAtFieldName(directive));
    const existingCreatedAtField =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[341]++, def.fields.find(f => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[32]++;
      cov_1n8u9ip2ud().s[342]++;
      return f.name.value === createdAtField;
    }));
    const existingUpdatedAtField =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[343]++, def.fields.find(f => {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().f[33]++;
      cov_1n8u9ip2ud().s[344]++;
      return f.name.value === updatedAtField;
    })); // Todo: Consolidate how warnings are shown. Instead of printing them here, the invoker of transformer should get
    // all the warnings together and decide how to render those warning

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[345]++;

    if (!DynamoDBModelTransformer.isTimestampCompatibleField(existingCreatedAtField)) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().b[101][0]++;
      cov_1n8u9ip2ud().s[346]++;
      console.log(`${def.name.value}.${existingCreatedAtField.name.value} is of type ${graphql_transformer_common_1.getBaseType(existingCreatedAtField.type)}. To support auto population change the type to AWSDateTime or String`);
    } else
    /* istanbul ignore next */
    {
      cov_1n8u9ip2ud().b[101][1]++;
    }

    cov_1n8u9ip2ud().s[347]++;

    if (!DynamoDBModelTransformer.isTimestampCompatibleField(existingUpdatedAtField)) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().b[102][0]++;
      cov_1n8u9ip2ud().s[348]++;
      console.log(`${def.name.value}.${existingUpdatedAtField.name.value} is of type ${graphql_transformer_common_1.getBaseType(existingUpdatedAtField.type)}. To support auto population change the type to AWSDateTime or String`);
    } else
    /* istanbul ignore next */
    {
      cov_1n8u9ip2ud().b[102][1]++;
    }

    const obj =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[349]++, ctx.getObject(def.name.value));
    const newObj =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[350]++, { ...obj,
      fields: [...obj.fields, ...(
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[104][0]++, createdAtField) &&
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[104][1]++, !existingCreatedAtField) ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[103][0]++, [graphql_transformer_common_1.makeField(createdAtField, [], graphql_transformer_common_1.wrapNonNull(graphql_transformer_common_1.makeNamedType('AWSDateTime')))]) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[103][1]++, [])), ...(
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[106][0]++, updatedAtField) &&
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[106][1]++, !existingUpdatedAtField) ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[105][0]++, [graphql_transformer_common_1.makeField(updatedAtField, [], graphql_transformer_common_1.wrapNonNull(graphql_transformer_common_1.makeNamedType('AWSDateTime')))]) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[105][1]++, []))]
    });

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[351]++;
    ctx.updateObject(newObj);
  }

  typeExist(type, ctx) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[34]++;
    cov_1n8u9ip2ud().s[352]++;
    return Boolean(type in ctx.nodeMap);
  }

  generateModelXConnectionType(ctx, def, isSync =
  /* istanbul ignore next */
  (cov_1n8u9ip2ud().b[107][0]++, false)) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[35]++;
    const tableXConnectionName =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[353]++, graphql_transformer_common_1.ModelResourceIDs.ModelConnectionTypeName(def.name.value));

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[354]++;

    if (this.typeExist(tableXConnectionName, ctx)) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().b[108][0]++;
      cov_1n8u9ip2ud().s[355]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1n8u9ip2ud().b[108][1]++;
    } // Create the ModelXConnection


    const connectionType =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[356]++, graphql_transformer_common_1.blankObject(tableXConnectionName));

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[357]++;
    ctx.addObject(connectionType);

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[358]++;
    ctx.addObjectExtension(definitions_1.makeModelConnectionType(def.name.value, isSync));
  }

  generateFilterInputs(ctx, def) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[36]++;
    const scalarFilters =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[359]++, definitions_1.makeScalarFilterInputs(this.supportsConditions(ctx)));

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[360]++;

    for (const filter of scalarFilters) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[361]++;

      if (!this.typeExist(filter.name.value, ctx)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[109][0]++;
        cov_1n8u9ip2ud().s[362]++;
        ctx.addInput(filter);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[109][1]++;
      }
    } // Create the Enum filters


    const enumFilters =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[363]++, definitions_1.makeEnumFilterInputObjects(def, ctx, this.supportsConditions(ctx)));

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[364]++;

    for (const filter of enumFilters) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[365]++;

      if (!this.typeExist(filter.name.value, ctx)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[110][0]++;
        cov_1n8u9ip2ud().s[366]++;
        ctx.addInput(filter);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[110][1]++;
      }
    } // Create the ModelXFilterInput


    const tableXQueryFilterInput =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[367]++, definitions_1.makeModelXFilterInputObject(def, ctx, this.supportsConditions(ctx)));

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[368]++;

    if (!this.typeExist(tableXQueryFilterInput.name.value, ctx)) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().b[111][0]++;
      cov_1n8u9ip2ud().s[369]++;
      ctx.addInput(tableXQueryFilterInput);
    } else
    /* istanbul ignore next */
    {
      cov_1n8u9ip2ud().b[111][1]++;
    }

    cov_1n8u9ip2ud().s[370]++;

    if (this.supportsConditions(ctx)) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().b[112][0]++;
      const attributeTypeEnum =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[371]++, definitions_1.makeAttributeTypeEnum());

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[372]++;

      if (!this.typeExist(attributeTypeEnum.name.value, ctx)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[113][0]++;
        cov_1n8u9ip2ud().s[373]++;
        ctx.addType(attributeTypeEnum);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[113][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1n8u9ip2ud().b[112][1]++;
    }
  }

  generateConditionInputs(ctx, def) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[37]++;
    const scalarFilters =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[374]++, definitions_1.makeScalarFilterInputs(this.supportsConditions(ctx)));

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[375]++;

    for (const filter of scalarFilters) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[376]++;

      if (!this.typeExist(filter.name.value, ctx)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[114][0]++;
        cov_1n8u9ip2ud().s[377]++;
        ctx.addInput(filter);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[114][1]++;
      }
    } // Create the Enum filters


    const enumFilters =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[378]++, definitions_1.makeEnumFilterInputObjects(def, ctx, this.supportsConditions(ctx)));

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[379]++;

    for (const filter of enumFilters) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[380]++;

      if (!this.typeExist(filter.name.value, ctx)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[115][0]++;
        cov_1n8u9ip2ud().s[381]++;
        ctx.addInput(filter);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[115][1]++;
      }
    }

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[382]++;

    if (this.supportsConditions(ctx)) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().b[116][0]++;
      // Create the ModelXConditionInput
      const tableXMutationConditionInput =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[383]++, definitions_1.makeModelXConditionInputObject(def, ctx, this.supportsConditions(ctx)));

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[384]++;

      if (!this.typeExist(tableXMutationConditionInput.name.value, ctx)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[117][0]++;
        cov_1n8u9ip2ud().s[385]++;
        ctx.addInput(tableXMutationConditionInput);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[117][1]++;
      }

      const attributeTypeEnum =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[386]++, definitions_1.makeAttributeTypeEnum());

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[387]++;

      if (!this.typeExist(attributeTypeEnum.name.value, ctx)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[118][0]++;
        cov_1n8u9ip2ud().s[388]++;
        ctx.addType(attributeTypeEnum);
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[118][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1n8u9ip2ud().b[116][1]++;
    }
  }

  getOpts(opts) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[38]++;
    const defaultOpts =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[389]++, {
      EnableDeletionProtection: false
    });

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[390]++;
    return { ...defaultOpts,
      ...opts
    };
  }

  setSyncConfig(ctx, typeName) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[39]++;
    let syncConfig;
    const resolverConfig =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[391]++, ctx.getResolverConfig());

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[392]++;

    if (
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().b[120][0]++, resolverConfig) &&
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().b[120][1]++, resolverConfig.project)) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().b[119][0]++;
      cov_1n8u9ip2ud().s[393]++;
      syncConfig = resolverConfig.project;
    } else
    /* istanbul ignore next */
    {
      cov_1n8u9ip2ud().b[119][1]++;
    }

    cov_1n8u9ip2ud().s[394]++;

    if (
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().b[122][0]++, resolverConfig) &&
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().b[122][1]++, resolverConfig.models) &&
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().b[122][2]++, resolverConfig.models[typeName])) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().b[121][0]++;
      const typeResolverConfig =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[395]++, resolverConfig.models[typeName]);

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[396]++;

      if (
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[124][0]++, typeResolverConfig.ConflictDetection) &&
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[124][1]++, typeResolverConfig.ConflictHandler)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[123][0]++;
        cov_1n8u9ip2ud().s[397]++;
        syncConfig = typeResolverConfig;
      } else {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[123][1]++;
        cov_1n8u9ip2ud().s[398]++;
        console.warn(`Invalid resolverConfig for type ${typeName}. Using the project resolverConfig instead.`);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1n8u9ip2ud().b[121][1]++;
    }

    cov_1n8u9ip2ud().s[399]++;
    return this.opts.SyncConfig = syncConfig;
  } // Due to the current architecture of Transformers we've to handle the 'id' field removal
  // here, because KeyTranformer will not be invoked if there are no @key directives declared
  // on the type.


  updateMutationConditionInput(ctx, type) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[40]++;
    cov_1n8u9ip2ud().s[400]++;

    if (this.supportsConditions(ctx)) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().b[125][0]++;
      // Get the existing ModelXConditionInput
      const tableXMutationConditionInputName =
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().s[401]++, graphql_transformer_common_1.ModelResourceIDs.ModelConditionInputTypeName(type.name.value));

      /* istanbul ignore next */
      cov_1n8u9ip2ud().s[402]++;

      if (this.typeExist(tableXMutationConditionInputName, ctx)) {
        /* istanbul ignore next */
        cov_1n8u9ip2ud().b[126][0]++;
        const tableXMutationConditionInput =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[403]++, ctx.getType(tableXMutationConditionInputName));
        const keyDirectives =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[404]++, type.directives.filter(d => {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().f[41]++;
          cov_1n8u9ip2ud().s[405]++;
          return d.name.value === 'key';
        })); // If there are @key directives defined we've nothing to do, it will handle everything

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[406]++;

        if (
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[128][0]++, keyDirectives) &&
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().b[128][1]++, keyDirectives.length > 0)) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[127][0]++;
          cov_1n8u9ip2ud().s[407]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[127][1]++;
        } // Remove the field named 'id' from the condition if there is one


        const idField =
        /* istanbul ignore next */
        (cov_1n8u9ip2ud().s[408]++, tableXMutationConditionInput.fields.find(f => {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().f[42]++;
          cov_1n8u9ip2ud().s[409]++;
          return f.name.value === 'id';
        }));

        /* istanbul ignore next */
        cov_1n8u9ip2ud().s[410]++;

        if (idField) {
          /* istanbul ignore next */
          cov_1n8u9ip2ud().b[129][0]++;
          const reducedFields =
          /* istanbul ignore next */
          (cov_1n8u9ip2ud().s[411]++, tableXMutationConditionInput.fields.filter(f => {
            /* istanbul ignore next */
            cov_1n8u9ip2ud().f[43]++;
            cov_1n8u9ip2ud().s[412]++;
            return Boolean(f.name.value !== 'id');
          }));
          const updatedInput =
          /* istanbul ignore next */
          (cov_1n8u9ip2ud().s[413]++, { ...tableXMutationConditionInput,
            fields: reducedFields
          });

          /* istanbul ignore next */
          cov_1n8u9ip2ud().s[414]++;
          ctx.putType(updatedInput);
        } else
        /* istanbul ignore next */
        {
          cov_1n8u9ip2ud().b[129][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1n8u9ip2ud().b[126][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1n8u9ip2ud().b[125][1]++;
    }
  }

  supportsConditions(context) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[44]++;
    cov_1n8u9ip2ud().s[415]++;
    return context.getTransformerVersion() >= exports.CONDITIONS_MINIMUM_VERSION;
  }

  static isTimestampCompatibleField(field) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[45]++;
    cov_1n8u9ip2ud().s[416]++;

    if (
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().b[131][0]++, field) &&
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().b[131][1]++, !(
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().b[132][0]++, graphql_transformer_common_1.getBaseType(field.type) === 'AWSDateTime') ||
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().b[132][1]++, graphql_transformer_common_1.getBaseType(field.type) === 'String')))) {
      /* istanbul ignore next */
      cov_1n8u9ip2ud().b[130][0]++;
      cov_1n8u9ip2ud().s[417]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1n8u9ip2ud().b[130][1]++;
    }

    cov_1n8u9ip2ud().s[418]++;
    return true;
  }

  addInitalizationMetadata(ctx, resourceId, initCode) {
    /* istanbul ignore next */
    cov_1n8u9ip2ud().f[46]++;
    const ddbMetadata =
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().s[419]++, ctx.metadata.has(METADATA_KEY) ?
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().b[133][0]++, ctx.metadata.get(METADATA_KEY)) :
    /* istanbul ignore next */
    (cov_1n8u9ip2ud().b[133][1]++, {}));

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[420]++;
    ddbMetadata.hoistedRequestMappingContent = { ...(
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[135][0]++, ddbMetadata === null) ||
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[135][1]++, ddbMetadata === void 0) ?
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[134][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1n8u9ip2ud().b[134][1]++, ddbMetadata.hoistedRequestMappingContent)),
      [resourceId]: initCode
    };

    /* istanbul ignore next */
    cov_1n8u9ip2ud().s[421]++;
    ctx.metadata.set(METADATA_KEY, ddbMetadata);
  }

}

/* istanbul ignore next */
cov_1n8u9ip2ud().s[422]++;
exports.DynamoDBModelTransformer = DynamoDBModelTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,