{"version":3,"sources":["/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/DynamoDBModelTransformer.ts"],"names":[],"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","sourcesContent":["import { DeletionPolicy, AppSync } from 'cloudform-types';\nimport {\n  DirectiveNode,\n  ObjectTypeDefinitionNode,\n  InputObjectTypeDefinitionNode,\n  FieldDefinitionNode,\n  InterfaceTypeDefinitionNode,\n  GraphQLObjectType,\n} from 'graphql';\nimport {\n  blankObject,\n  makeConnectionField,\n  makeField,\n  makeInputValueDefinition,\n  wrapNonNull,\n  makeNamedType,\n  makeNonNullType,\n  ModelResourceIDs,\n  ResolverResourceIDs,\n  getBaseType,\n  graphqlName,\n  toUpper,\n  plurality,\n} from 'graphql-transformer-common';\nimport {\n  getDirectiveArguments,\n  gql,\n  Transformer,\n  TransformerContext,\n  SyncConfig,\n  TransformerModelProvider,\n} from 'graphql-transformer-core';\nimport {\n  getNonModelObjectArray,\n  makeCreateInputObject,\n  makeDeleteInputObject,\n  makeEnumFilterInputObjects,\n  makeModelConnectionType,\n  makeModelSortDirectionEnumObject,\n  makeModelXFilterInputObject,\n  makeNonModelInputObject,\n  makeScalarFilterInputs,\n  makeSubscriptionField,\n  makeUpdateInputObject,\n  makeModelXConditionInputObject,\n  makeAttributeTypeEnum,\n} from './definitions';\nimport { ModelDirectiveArgs, getCreatedAtFieldName, getUpdatedAtFieldName } from './ModelDirectiveArgs';\nimport { ResourceFactory } from './resources';\nimport { doesNotReject } from 'assert';\nimport { ModelCapabilities, QueryFieldType, MutationFieldType, SubscriptionFieldType } from 'graphql-transformer-core/lib/ITransformer';\nimport { BaseResolver } from 'graphql-transformer-core/lib/util/BaseResolver';\n\nconst METADATA_KEY = 'DynamoDBTransformerMetadata';\n\n// export type ModelObject = {\n//   name: string;\n//   stackName: string;\n\n// }\n// export type NonModelObject = {\n//   name: string\n// }\nexport interface DynamoDBModelTransformerOptions {\n  EnableDeletionProtection?: boolean;\n  SyncConfig?: SyncConfig;\n}\n\n// Transform config version constants\n// We have constants instead of magic number all around, later these should be moved to feature\n// flags and transformers should be feature and not version dependent.\n\n// To support generation of conditions and new naming, version 5 was introduced\nexport const CONDITIONS_MINIMUM_VERSION = 5;\n\n/**\n * The @model transformer.\n *\n * This transform creates a single DynamoDB table for all of your application's\n * data. It uses a standard key structure and nested map to store object values.\n * A relationKey field\n *\n * {\n *  type (HASH),\n *  id (SORT),\n *  value (MAP),\n *  createdAt, (LSI w/ type)\n *  updatedAt (LSI w/ type)\n * }\n */\n\nexport const directiveDefinition = gql`\n  directive @model(\n    queries: ModelQueryMap\n    mutations: ModelMutationMap\n    subscriptions: ModelSubscriptionMap\n    timestamps: TimestampConfiguration\n  ) on OBJECT\n  input ModelMutationMap {\n    create: String\n    update: String\n    delete: String\n  }\n  input ModelQueryMap {\n    get: String\n    list: String\n  }\n  input ModelSubscriptionMap {\n    onCreate: [String]\n    onUpdate: [String]\n    onDelete: [String]\n    level: ModelSubscriptionLevel\n  }\n  enum ModelSubscriptionLevel {\n    off\n    public\n    on\n  }\n  input TimestampConfiguration {\n    createdAt: String\n    updatedAt: String\n  }\n`;\n\nexport class DynamoDBModelTransformer extends Transformer implements TransformerModelProvider {\n  readonly transformerName = 'DynamoDBModelTransformer';\n  readonly capabilities = [ModelCapabilities.SUPPORT_AUTH];\n  resources: ResourceFactory;\n  opts: DynamoDBModelTransformerOptions;\n  private modelTypes: string[] = [];\n\n  constructor(opts: DynamoDBModelTransformerOptions = {}) {\n    super('DynamoDBModelTransformer', directiveDefinition);\n    this.opts = this.getOpts(opts);\n    this.resources = new ResourceFactory();\n  }\n\n  public before = (ctx: TransformerContext): void => {\n    const template = this.resources.initTemplate();\n    ctx.mergeResources(template.Resources);\n    ctx.mergeParameters(template.Parameters);\n    ctx.mergeOutputs(template.Outputs);\n    ctx.mergeConditions(template.Conditions);\n  };\n\n  public after = (ctx: TransformerContext): void => {\n    // append hoisted initalization code to the top of request mapping template\n    const ddbMetata = ctx.metadata.get(METADATA_KEY);\n    if (ddbMetata) {\n      Object.entries(ddbMetata.hoistedRequestMappingContent || {}).forEach(([resourceId, hoistedContent]) => {\n        const resource: AppSync.Resolver = ctx.getResource(resourceId) as any;\n        resource.Properties.RequestMappingTemplate = [hoistedContent, resource.Properties.RequestMappingTemplate].join('\\n');\n        ctx.setResource(resourceId, resource);\n      });\n    }\n  };\n\n  /**\n   * Given the initial input and context manipulate the context to handle this object directive.\n   * @param initial The input passed to the transform.\n   * @param ctx The accumulated context for the transform.\n   */\n  public object = (def: ObjectTypeDefinitionNode, directive: DirectiveNode, ctx: TransformerContext): void => {\n    // Add a stack mapping so that all model resources are pulled\n    // into their own stack at the end of the transformation.\n    const typeName = def.name.value;\n    this.modelTypes.push(typeName);\n  };\n\n  public transformSchema = (ctx: TransformerContext) => {\n    this.modelTypes.forEach(modelName => {\n      const model = ctx.getObject(modelName);\n      const directive = model.directives?.find(d => d.name.value === 'model');\n      const nonModelArray: ObjectTypeDefinitionNode[] = getNonModelObjectArray(model, ctx, new Map<string, ObjectTypeDefinitionNode>());\n\n      nonModelArray.forEach((value: ObjectTypeDefinitionNode) => {\n        const nonModelObject = makeNonModelInputObject(value, nonModelArray, ctx);\n        if (!this.typeExist(nonModelObject.name.value, ctx)) {\n          ctx.addInput(nonModelObject);\n        }\n      });\n\n      this.createQueries(model, directive, ctx);\n      this.createMutations(model, directive, ctx, nonModelArray);\n      this.createSubscriptions(model, directive, ctx);\n      // Update ModelXConditionInput type\n      this.updateMutationConditionInput(ctx, model);\n\n      // change type to include sync related fields if sync is enabled\n      const isSyncEnabled = this.opts.SyncConfig ? true : false;\n      if (isSyncEnabled) {\n        const obj = ctx.getObject(model.name.value);\n        const newFields = [\n          ...obj.fields,\n          makeField('_version', [], wrapNonNull(makeNamedType('Int'))),\n          makeField('_deleted', [], makeNamedType('Boolean')),\n          makeField('_lastChangedAt', [], wrapNonNull(makeNamedType('AWSTimestamp'))),\n        ];\n\n        const newObj = {\n          ...obj,\n          fields: newFields,\n        };\n\n        ctx.updateObject(newObj);\n      }\n      this.addTimestampFields(model, directive, ctx);\n    });\n  };\n\n  public generateResolvers = (ctx: TransformerContext) => {\n    this.modelTypes.forEach(modelName => {\n      const model = ctx.getObject(modelName);\n      // Create the dynamodb table to hold the @model type\n      // TODO: Handle types with more than a single \"id\" hash key\n      this.setSyncConfig(ctx, modelName);\n      const isSyncEnabled = this.opts.SyncConfig ? true : false;\n      const tableLogicalID = ModelResourceIDs.ModelTableResourceID(modelName);\n      const iamRoleLogicalID = ModelResourceIDs.ModelTableIAMRoleID(modelName);\n      const dataSourceRoleLogicalID = ModelResourceIDs.ModelTableDataSourceID(modelName);\n      const deletionPolicy = this.opts.EnableDeletionProtection ? DeletionPolicy.Retain : DeletionPolicy.Delete;\n      ctx.setResource(tableLogicalID, this.resources.makeModelTable(modelName, undefined, undefined, deletionPolicy, isSyncEnabled));\n      ctx.mapResourceToStack(modelName, tableLogicalID);\n      ctx.setResource(iamRoleLogicalID, this.resources.makeIAMRole(modelName, this.opts.SyncConfig));\n      ctx.mapResourceToStack(modelName, iamRoleLogicalID);\n      ctx.setResource(\n        dataSourceRoleLogicalID,\n        this.resources.makeDynamoDBDataSource(tableLogicalID, iamRoleLogicalID, modelName, isSyncEnabled),\n      );\n      ctx.mapResourceToStack(modelName, dataSourceRoleLogicalID);\n\n      const streamArnOutputId = `GetAtt${ModelResourceIDs.ModelTableStreamArn(modelName)}`;\n      ctx.setOutput(\n        // \"GetAtt\" is a backward compatibility addition to prevent breaking current deploys.\n        streamArnOutputId,\n        this.resources.makeTableStreamArnOutput(tableLogicalID),\n      );\n      ctx.mapResourceToStack(modelName, streamArnOutputId);\n\n      const datasourceOutputId = `GetAtt${dataSourceRoleLogicalID}Name`;\n      ctx.setOutput(datasourceOutputId, this.resources.makeDataSourceOutput(dataSourceRoleLogicalID));\n      ctx.mapResourceToStack(modelName, datasourceOutputId);\n\n      const tableNameOutputId = `GetAtt${tableLogicalID}Name`;\n      ctx.setOutput(tableNameOutputId, this.resources.makeTableNameOutput(tableLogicalID));\n      ctx.mapResourceToStack(modelName, tableNameOutputId);\n    });\n  };\n\n  private addTimestampFields(def: ObjectTypeDefinitionNode, directive: DirectiveNode, ctx: TransformerContext): void {\n    const createdAtField = getCreatedAtFieldName(directive);\n    const updatedAtField = getUpdatedAtFieldName(directive);\n    const existingCreatedAtField = def.fields.find(f => f.name.value === createdAtField);\n    const existingUpdatedAtField = def.fields.find(f => f.name.value === updatedAtField);\n    // Todo: Consolidate how warnings are shown. Instead of printing them here, the invoker of transformer should get\n    // all the warnings together and decide how to render those warning\n    if (!DynamoDBModelTransformer.isTimestampCompatibleField(existingCreatedAtField)) {\n      console.log(\n        `${def.name.value}.${existingCreatedAtField.name.value} is of type ${getBaseType(\n          existingCreatedAtField.type,\n        )}. To support auto population change the type to AWSDateTime or String`,\n      );\n    }\n    if (!DynamoDBModelTransformer.isTimestampCompatibleField(existingUpdatedAtField)) {\n      console.log(\n        `${def.name.value}.${existingUpdatedAtField.name.value} is of type ${getBaseType(\n          existingUpdatedAtField.type,\n        )}. To support auto population change the type to AWSDateTime or String`,\n      );\n    }\n    const obj = ctx.getObject(def.name.value);\n    const newObj: ObjectTypeDefinitionNode = {\n      ...obj,\n      fields: [\n        ...obj.fields,\n        ...(createdAtField && !existingCreatedAtField ? [makeField(createdAtField, [], wrapNonNull(makeNamedType('AWSDateTime')))] : []), // createdAt field\n        ...(updatedAtField && !existingUpdatedAtField ? [makeField(updatedAtField, [], wrapNonNull(makeNamedType('AWSDateTime')))] : []), // updated field\n      ],\n    };\n    ctx.updateObject(newObj);\n  }\n\n  private createMutations = (\n    def: ObjectTypeDefinitionNode,\n    directive: DirectiveNode,\n    ctx: TransformerContext,\n    nonModelArray: ObjectTypeDefinitionNode[],\n  ) => {\n    const typeName = def.name.value;\n    const isSyncEnabled = this.opts.SyncConfig ? true : false;\n\n    const mutationFields = [];\n    // Get any name overrides provided by the user. If an empty map it provided\n    // then we do not generate those fields.\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    // Configure mutations based on *mutations* argument\n    let shouldMakeCreate = true;\n    let shouldMakeUpdate = true;\n    let shouldMakeDelete = true;\n    let createFieldNameOverride = undefined;\n    let updateFieldNameOverride = undefined;\n    let deleteFieldNameOverride = undefined;\n\n    // timestamp fields\n    const createdAtField = getCreatedAtFieldName(directive);\n    const updatedAtField = getUpdatedAtFieldName(directive);\n\n    const existingCreatedAtField = def.fields.find(f => f.name.value === createdAtField);\n    const existingUpdatedAtField = def.fields.find(f => f.name.value === updatedAtField);\n\n    // auto populate the timestamp field only if they are of AWSDateTime type\n    const timestampFields = {\n      createdAtField: DynamoDBModelTransformer.isTimestampCompatibleField(existingCreatedAtField) ? createdAtField : undefined,\n      updatedAtField: DynamoDBModelTransformer.isTimestampCompatibleField(existingUpdatedAtField) ? updatedAtField : undefined,\n    };\n\n    // Figure out which mutations to make and if they have name overrides\n    if (directiveArguments.mutations === null) {\n      shouldMakeCreate = false;\n      shouldMakeUpdate = false;\n      shouldMakeDelete = false;\n    } else if (directiveArguments.mutations) {\n      if (!directiveArguments.mutations.create) {\n        shouldMakeCreate = false;\n      } else {\n        createFieldNameOverride = directiveArguments.mutations.create;\n      }\n      if (!directiveArguments.mutations.update) {\n        shouldMakeUpdate = false;\n      } else {\n        updateFieldNameOverride = directiveArguments.mutations.update;\n      }\n      if (!directiveArguments.mutations.delete) {\n        shouldMakeDelete = false;\n      } else {\n        deleteFieldNameOverride = directiveArguments.mutations.delete;\n      }\n    }\n\n    const conditionInputName = ModelResourceIDs.ModelConditionInputTypeName(typeName);\n\n    // Create the mutations.\n    if (shouldMakeCreate) {\n      const createInput = makeCreateInputObject(def, directive, nonModelArray, ctx, isSyncEnabled);\n      if (!ctx.getType(createInput.name.value)) {\n        ctx.addInput(createInput);\n      }\n      const createResolver = this.resources.makeCreateResolver({\n        type: def.name.value,\n        nameOverride: createFieldNameOverride,\n        syncConfig: this.opts.SyncConfig,\n      });\n      const resolver = ctx.resolvers.addMutationResolver(\n        createResolver.typeName,\n        createResolver.fieldName,\n        createResolver.dataSourceName,\n        createResolver.requestMappingTemplate,\n        createResolver.responseMappingTemplate,\n      );\n\n      const hositedInitalization = this.resources.initalizeDefaultInputForCreateMutation(createInput, timestampFields);\n      resolver.addSlot('init', hositedInitalization);\n      const resourceId = ResolverResourceIDs.DynamoDBCreateResolverResourceID(typeName);\n      resolver.mapResourceToStack(typeName);\n      ctx.mapResourceToStack(typeName, resourceId);\n      const args = [makeInputValueDefinition('input', makeNonNullType(makeNamedType(createInput.name.value)))];\n      if (this.supportsConditions(ctx)) {\n        args.push(makeInputValueDefinition('condition', makeNamedType(conditionInputName)));\n      }\n      mutationFields.push(makeField(createResolver.fieldName, args, makeNamedType(def.name.value)));\n    }\n\n    if (shouldMakeUpdate) {\n      const updateInput = makeUpdateInputObject(def, nonModelArray, ctx, isSyncEnabled);\n      if (!ctx.getType(updateInput.name.value)) {\n        ctx.addInput(updateInput);\n      }\n      const updateResolver = this.resources.makeUpdateResolver({\n        type: def.name.value,\n        nameOverride: updateFieldNameOverride,\n        syncConfig: this.opts.SyncConfig,\n        timestamps: timestampFields,\n      });\n      const resourceId = ResolverResourceIDs.DynamoDBUpdateResolverResourceID(typeName);\n      const resolver = ctx.resolvers.addMutationResolver(\n        updateResolver.typeName,\n        updateResolver.fieldName,\n        updateResolver.dataSourceName,\n        updateResolver.requestMappingTemplate,\n        updateResolver.responseMappingTemplate,\n      );\n      resolver.mapResourceToStack(typeName);\n      ctx.mapResourceToStack(typeName, resourceId);\n      const args = [makeInputValueDefinition('input', makeNonNullType(makeNamedType(updateInput.name.value)))];\n      if (this.supportsConditions(ctx)) {\n        args.push(makeInputValueDefinition('condition', makeNamedType(conditionInputName)));\n      }\n      mutationFields.push(makeField(updateResolver.fieldName.toString(), args, makeNamedType(def.name.value)));\n    }\n\n    if (shouldMakeDelete) {\n      const deleteInput = makeDeleteInputObject(def, isSyncEnabled);\n      if (!ctx.getType(deleteInput.name.value)) {\n        ctx.addInput(deleteInput);\n      }\n      const deleteResolver = this.resources.makeDeleteResolver({\n        type: def.name.value,\n        nameOverride: deleteFieldNameOverride,\n        syncConfig: this.opts.SyncConfig,\n      });\n      const resolver = ctx.resolvers.addMutationResolver(\n        deleteResolver.typeName,\n        deleteResolver.fieldName,\n        deleteResolver.dataSourceName,\n        deleteResolver.requestMappingTemplate,\n        deleteResolver.responseMappingTemplate,\n      );\n      resolver.mapResourceToStack(typeName);\n      const args = [makeInputValueDefinition('input', makeNonNullType(makeNamedType(deleteInput.name.value)))];\n      if (this.supportsConditions(ctx)) {\n        args.push(makeInputValueDefinition('condition', makeNamedType(conditionInputName)));\n      }\n      mutationFields.push(makeField(deleteResolver.fieldName.toString(), args, makeNamedType(def.name.value)));\n    }\n    ctx.addMutationFields(mutationFields);\n\n    if (shouldMakeCreate || shouldMakeUpdate || shouldMakeDelete) {\n      this.generateConditionInputs(ctx, def);\n    }\n  };\n\n  private createQueries = (def: ObjectTypeDefinitionNode, directive: DirectiveNode, ctx: TransformerContext) => {\n    const typeName = def.name.value;\n    const queryFields = [];\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    // Configure queries based on *queries* argument\n    let shouldMakeGet = true;\n    let shouldMakeList = true;\n    let getFieldNameOverride = undefined;\n    let listFieldNameOverride = undefined;\n    const isSyncEnabled = this.opts.SyncConfig ? true : false;\n\n    // Figure out which queries to make and if they have name overrides.\n    // If queries is undefined (default), create all queries\n    // If queries is explicetly set to null, do not create any\n    // else if queries is defined, check overrides\n    if (directiveArguments.queries === null) {\n      shouldMakeGet = false;\n      shouldMakeList = false;\n    } else if (directiveArguments.queries) {\n      if (!directiveArguments.queries.get) {\n        shouldMakeGet = false;\n      } else {\n        getFieldNameOverride = directiveArguments.queries.get;\n      }\n      if (!directiveArguments.queries.list) {\n        shouldMakeList = false;\n      } else {\n        listFieldNameOverride = directiveArguments.queries.list;\n      }\n    }\n\n    if (shouldMakeList) {\n      if (!this.typeExist('ModelSortDirection', ctx)) {\n        const tableSortDirection = makeModelSortDirectionEnumObject();\n        ctx.addEnum(tableSortDirection);\n      }\n    }\n\n    // Create sync query\n    if (isSyncEnabled) {\n      const syncResolver = this.resources.makeSyncResolver(typeName);\n      const syncResourceID = ResolverResourceIDs.SyncResolverResourceID(typeName);\n      ctx.setResource(syncResourceID, syncResolver);\n      ctx.mapResourceToStack(typeName, syncResourceID);\n      this.generateModelXConnectionType(ctx, def, isSyncEnabled);\n      this.generateFilterInputs(ctx, def);\n      queryFields.push(\n        makeField(\n          syncResolver.Properties.FieldName.toString(),\n          [\n            makeInputValueDefinition('filter', makeNamedType(ModelResourceIDs.ModelFilterInputTypeName(def.name.value))),\n            makeInputValueDefinition('limit', makeNamedType('Int')),\n            makeInputValueDefinition('nextToken', makeNamedType('String')),\n            makeInputValueDefinition('lastSync', makeNamedType('AWSTimestamp')),\n          ],\n          makeNamedType(ModelResourceIDs.ModelConnectionTypeName(def.name.value)),\n        ),\n      );\n    }\n\n    // Create get queries\n    if (shouldMakeGet) {\n      const getResolver = this.resources.makeGetResolver(def.name.value, getFieldNameOverride, isSyncEnabled, ctx.getQueryTypeName());\n      const resolver = ctx.resolvers.addQueryResolver(\n        getResolver.typeName,\n        getResolver.fieldName,\n        getResolver.dataSourceName,\n        getResolver.requestMappingTemplate,\n        getResolver.responseMappingTemplate,\n      );\n      resolver.mapResourceToStack(typeName);\n      const resourceId = ResolverResourceIDs.DynamoDBGetResolverResourceID(typeName);\n      ctx.mapResourceToStack(typeName, resourceId);\n\n      queryFields.push(\n        makeField(\n          getResolver.fieldName.toString(),\n          [makeInputValueDefinition('id', makeNonNullType(makeNamedType('ID')))],\n          makeNamedType(def.name.value),\n        ),\n      );\n    }\n\n    if (shouldMakeList) {\n      this.generateModelXConnectionType(ctx, def);\n\n      // Create the list resolver\n      const listResolver = this.resources.makeListResolver(def.name.value, listFieldNameOverride, isSyncEnabled, ctx.getQueryTypeName());\n      const resourceId = ResolverResourceIDs.DynamoDBListResolverResourceID(typeName);\n      const resolver = ctx.resolvers.addQueryResolver(\n        listResolver.typeName,\n        listResolver.fieldName,\n        listResolver.dataSourceName,\n        listResolver.requestMappingTemplate,\n        listResolver.responseMappingTemplate,\n      );\n      resolver.mapResourceToStack(typeName);\n      ctx.mapResourceToStack(typeName, resourceId);\n\n      queryFields.push(makeConnectionField(listResolver.fieldName.toString(), def.name.value));\n      this.generateFilterInputs(ctx, def);\n    }\n\n    ctx.addQueryFields(queryFields);\n  };\n\n  /**\n   * Creates subscriptions for a @model object type. By default creates a subscription for\n   * create, update, and delete mutations.\n   *\n   * Subscriptions are one to many in that a subscription may subscribe to multiple mutations.\n   * You may thus provide multiple names of the subscriptions that will be triggered by each\n   * mutation.\n   *\n   * type Post @model(subscriptions: { onCreate: [\"onPostCreated\", \"onFeedUpdated\"] }) {\n   *      id: ID!\n   *      title: String!\n   * }\n   *\n   * will create two subscription fields:\n   *\n   * type Subscription {\n   *      onPostCreated: Post @aws_subscribe(mutations: [\"createPost\"])\n   *      onFeedUpdated: Post @aws_subscribe(mutations: [\"createPost\"])\n   * }\n   *  Subscription Levels\n   *   subscriptions.level === OFF || subscriptions === null\n   *      Will not create subscription operations\n   *   subcriptions.level === PUBLIC\n   *      Will continue as is creating subscription operations\n   *   subscriptions.level === ON || subscriptions === undefined\n   *      If auth is enabled it will enabled protection on subscription operations and resolvers\n   */\n  private createSubscriptions = (def: ObjectTypeDefinitionNode, directive: DirectiveNode, ctx: TransformerContext) => {\n    const typeName = def.name.value;\n    const subscriptionFields = [];\n\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    const createFieldName = directiveArguments?.mutations?.create || graphqlName('create' + toUpper(typeName));\n    const updateFieldName = directiveArguments?.mutations?.update || graphqlName('update' + toUpper(typeName));\n    const deleteFieldName = directiveArguments.mutations?.delete || graphqlName('delete' + toUpper(typeName));\n\n    const mutationTypeName = ctx.getMutationTypeName();\n    const subscriptionsArgument = directiveArguments.subscriptions;\n    const createResolver = ctx.resolvers.getResolver(mutationTypeName, createFieldName);\n    const updateResolver = ctx.resolvers.getResolver(mutationTypeName, updateFieldName);\n    const deleteResolver = ctx.resolvers.getResolver(mutationTypeName, deleteFieldName);\n\n    if (subscriptionsArgument === null) {\n      return;\n    }\n    if (subscriptionsArgument && subscriptionsArgument.level === 'off') {\n      return;\n    }\n    // Add the custom subscriptions\n    const onCreate = subscriptionsArgument?.onCreate || [ModelResourceIDs.ModelOnCreateSubscriptionName(typeName)];\n    const onUpdate = subscriptionsArgument?.onUpdate || [ModelResourceIDs.ModelOnUpdateSubscriptionName(typeName)];\n    const onDelete = subscriptionsArgument?.onDelete || [ModelResourceIDs.ModelOnDeleteSubscriptionName(typeName)];\n\n    // Add the default subscriptions\n    if (createResolver) {\n      onCreate.forEach(fieldName => {\n        const onCreateField = makeSubscriptionField(fieldName, typeName, [createFieldName]);\n        subscriptionFields.push(onCreateField);\n      });\n    }\n    if (updateResolver) {\n      onUpdate.forEach(fieldName => {\n        const onUpdateField = makeSubscriptionField(fieldName, typeName, [updateFieldName]);\n        subscriptionFields.push(onUpdateField);\n      });\n    }\n    if (deleteResolver) {\n      onDelete.forEach(fieldName => {\n        const onDeleteField = makeSubscriptionField(fieldName, typeName, [deleteFieldName]);\n        subscriptionFields.push(onDeleteField);\n      });\n    }\n\n    ctx.addSubscriptionFields(subscriptionFields);\n  };\n\n  public generateGetResolver = (\n    ctx: TransformerContext,\n    type: ObjectTypeDefinitionNode,\n    typeName: string,\n    fieldName: string,\n  ): BaseResolver => {\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const resolverConfig = this.resources.makeGetResolver(type.name.value, fieldName, this.opts.SyncConfig ? true : false, typeName);\n    return ctx.resolvers.addQueryResolver(\n      resolverConfig.typeName,\n      resolverConfig.fieldName,\n      resolverConfig.dataSourceName,\n      resolverConfig.requestMappingTemplate,\n      resolverConfig.responseMappingTemplate,\n    );\n  };\n\n  public generateListResolver = (\n    ctx: TransformerContext,\n    type: ObjectTypeDefinitionNode,\n    typeName: string,\n    fieldName: string,\n  ): BaseResolver => {\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const resolverConfig = this.resources.makeListResolver(type.name.value, fieldName, this.opts.SyncConfig ? true : false, typeName);\n    return ctx.resolvers.addQueryResolver(\n      resolverConfig.typeName,\n      resolverConfig.fieldName,\n      resolverConfig.dataSourceName,\n      resolverConfig.requestMappingTemplate,\n      resolverConfig.responseMappingTemplate,\n    );\n  };\n\n  public generteCreateResolver = (\n    ctx: TransformerContext,\n    type: ObjectTypeDefinitionNode,\n    typeName: string,\n    fieldName: string,\n  ): BaseResolver => {\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    // Todo: Make the signature consistent with queryTypes. Either pass single object or mulitple arguments\n    const resolverConfig = this.resources.makeCreateResolver({\n      type: type.name.value,\n      nameOverride: fieldName,\n      syncConfig: this.opts.SyncConfig,\n      mutationTypeName: typeName,\n    });\n    return ctx.resolvers.addMutationResolver(\n      resolverConfig.typeName,\n      resolverConfig.fieldName,\n      resolverConfig.dataSourceName,\n      resolverConfig.requestMappingTemplate,\n      resolverConfig.responseMappingTemplate,\n    );\n  };\n\n  public generateUpdateResolver = (\n    ctx: TransformerContext,\n    type: ObjectTypeDefinitionNode,\n    typeName: string,\n    fieldName: string,\n  ): BaseResolver => {\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const resolverConfig = this.resources.makeUpdateResolver({\n      type: type.name.value,\n      nameOverride: fieldName,\n      syncConfig: this.opts.SyncConfig,\n      mutationTypeName: typeName,\n    });\n    return ctx.resolvers.addMutationResolver(\n      resolverConfig.typeName,\n      resolverConfig.fieldName,\n      resolverConfig.dataSourceName,\n      resolverConfig.requestMappingTemplate,\n      resolverConfig.responseMappingTemplate,\n    );\n  };\n\n  public generateDeleteResolver = (\n    ctx: TransformerContext,\n    type: ObjectTypeDefinitionNode,\n    typeName: string,\n    fieldName: string,\n  ): BaseResolver => {\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const resolverConfig = this.resources.makeDeleteResolver({\n      type: type.name.value,\n      nameOverride: fieldName,\n      syncConfig: this.opts.SyncConfig,\n      mutationTypeName: typeName,\n    });\n    return ctx.resolvers.addMutationResolver(\n      resolverConfig.typeName,\n      resolverConfig.fieldName,\n      resolverConfig.dataSourceName,\n      resolverConfig.requestMappingTemplate,\n      resolverConfig.responseMappingTemplate,\n    );\n  };\n\n  public getQueryFieldNames = (ctx: TransformerContext, type: ObjectTypeDefinitionNode): Record<QueryFieldType, string[]> => {\n    const name = type.name.value;\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const directive = type.directives.find(d => d.name.value === 'model');\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    let shouldMakeGet = true;\n    let shouldMakeList = true;\n    let getQueryFieldName = graphqlName('get' + toUpper(name));\n    let listQueryFieldName = graphqlName('list' + plurality(toUpper(name)));\n\n    if (directiveArguments.queries === null) {\n      shouldMakeGet = false;\n      shouldMakeList = false;\n    } else if (directiveArguments.queries) {\n      if (!directiveArguments.queries.get) {\n        shouldMakeGet = false;\n      } else {\n        getQueryFieldName = directiveArguments.queries.get;\n      }\n      if (!directiveArguments.queries.list) {\n        shouldMakeList = false;\n      } else {\n        listQueryFieldName = directiveArguments.queries.list;\n      }\n    }\n    return {\n      [QueryFieldType.GET]: shouldMakeGet ? [getQueryFieldName] : [],\n      [QueryFieldType.LIST]: shouldMakeList ? [listQueryFieldName] : [],\n      [QueryFieldType.SYNC]: this.opts.SyncConfig ? [graphqlName('sync' + toUpper(name))] : [],\n    };\n  };\n\n  public getMutationFieldNames = (ctx: TransformerContext, type: ObjectTypeDefinitionNode): Record<MutationFieldType, string[]> => {\n    const name = type.name.value;\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const directive = type.directives.find(d => d.name.value === 'model');\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    let shouldMakeCreate = true;\n    let shouldMakeUpdate = true;\n    let shouldMakeDelete = true;\n\n    let createMutationsFieldName = graphqlName('create' + toUpper(name));\n    let updateMutationFieldName = graphqlName('update' + toUpper(name));\n    let deleteMutationFieldName = graphqlName('delete' + toUpper(name));\n\n    if (directiveArguments.mutations === null) {\n      shouldMakeCreate = false;\n      shouldMakeUpdate = false;\n      shouldMakeDelete = false;\n    } else if (directiveArguments.mutations) {\n      if (!directiveArguments.mutations.create) {\n        shouldMakeCreate = false;\n      } else {\n        createMutationsFieldName = directiveArguments.mutations.create;\n      }\n      if (!directiveArguments.mutations.update) {\n        shouldMakeUpdate = false;\n      } else {\n        updateMutationFieldName = directiveArguments.mutations.update;\n      }\n      if (!directiveArguments.mutations.delete) {\n        shouldMakeDelete = false;\n      } else {\n        updateMutationFieldName = directiveArguments.mutations.delete;\n      }\n    }\n    return {\n      [MutationFieldType.CREATE]: shouldMakeCreate ? [createMutationsFieldName] : [],\n      [MutationFieldType.UPDATE]: shouldMakeUpdate ? [updateMutationFieldName] : [],\n      [MutationFieldType.DELETE]: shouldMakeDelete ? [deleteMutationFieldName] : [],\n    };\n  };\n\n  public getSubscriptionFieldNames = (ctx: TransformerContext, type: ObjectTypeDefinitionNode): Record<SubscriptionFieldType, string[]> => {\n    const name = type.name.value;\n    if (!this.isModelType(type)) {\n      throw new Error(`type ${type.name} does not use @model directive`);\n    }\n    const directive = type.directives.find(d => d.name.value === 'model');\n    const directiveArguments: ModelDirectiveArgs = getDirectiveArguments(directive);\n\n    let shouldMakeOnCreate = true;\n    let shouldMakeOnUpdate = true;\n    let shouldMakeOnDelete = true;\n\n    let onCreateFieldName = [graphqlName('onCreate' + toUpper(name))];\n    let onUpdateFieldName = [graphqlName('onUpdate' + toUpper(name))];\n    let onDeleteFieldName = [graphqlName('onDelete' + toUpper(name))];\n\n    if (directiveArguments.subscriptions === null || directiveArguments.subscriptions.level === 'off') {\n      shouldMakeOnCreate = false;\n      shouldMakeOnUpdate = false;\n      shouldMakeOnDelete = false;\n    } else if (directiveArguments.subscriptions) {\n      if (!directiveArguments.subscriptions.onCreate) {\n        shouldMakeOnCreate = false;\n      } else {\n        onCreateFieldName = directiveArguments.subscriptions.onCreate;\n      }\n      if (!directiveArguments.subscriptions.onUpdate) {\n        shouldMakeOnUpdate = false;\n      } else {\n        onUpdateFieldName = directiveArguments.subscriptions.onUpdate;\n      }\n      if (!directiveArguments.subscriptions.onDelete) {\n        shouldMakeOnDelete = false;\n      } else {\n        onUpdateFieldName = directiveArguments.subscriptions.onDelete;\n      }\n    }\n    return {\n      [SubscriptionFieldType.ON_CREATE]: shouldMakeOnCreate ? onCreateFieldName : [],\n      [SubscriptionFieldType.ON_UPDATE]: shouldMakeOnUpdate ? onUpdateFieldName : [],\n      [SubscriptionFieldType.ON_DELETE]: shouldMakeOnDelete ? onDeleteFieldName : [],\n    };\n  };\n\n  private isModelType = (type: ObjectTypeDefinitionNode): boolean => {\n    return this.modelTypes.includes(type.name.value);\n  };\n  private typeExist(type: string, ctx: TransformerContext): boolean {\n    return Boolean(type in ctx.nodeMap);\n  }\n\n  private generateModelXConnectionType(ctx: TransformerContext, def: ObjectTypeDefinitionNode, isSync: Boolean = false): void {\n    const tableXConnectionName = ModelResourceIDs.ModelConnectionTypeName(def.name.value);\n    if (this.typeExist(tableXConnectionName, ctx)) {\n      return;\n    }\n\n    // Create the ModelXConnection\n    const connectionType = blankObject(tableXConnectionName);\n    ctx.addObject(connectionType);\n    ctx.addObjectExtension(makeModelConnectionType(def.name.value, isSync));\n  }\n\n  private generateFilterInputs(ctx: TransformerContext, def: ObjectTypeDefinitionNode): void {\n    const scalarFilters = makeScalarFilterInputs(this.supportsConditions(ctx));\n    for (const filter of scalarFilters) {\n      if (!this.typeExist(filter.name.value, ctx)) {\n        ctx.addInput(filter);\n      }\n    }\n\n    // Create the Enum filters\n    const enumFilters = makeEnumFilterInputObjects(def, ctx, this.supportsConditions(ctx));\n    for (const filter of enumFilters) {\n      if (!this.typeExist(filter.name.value, ctx)) {\n        ctx.addInput(filter);\n      }\n    }\n\n    // Create the ModelXFilterInput\n    const tableXQueryFilterInput = makeModelXFilterInputObject(def, ctx, this.supportsConditions(ctx));\n    if (!this.typeExist(tableXQueryFilterInput.name.value, ctx)) {\n      ctx.addInput(tableXQueryFilterInput);\n    }\n\n    if (this.supportsConditions(ctx)) {\n      const attributeTypeEnum = makeAttributeTypeEnum();\n      if (!this.typeExist(attributeTypeEnum.name.value, ctx)) {\n        ctx.addType(attributeTypeEnum);\n      }\n    }\n  }\n\n  private generateConditionInputs(ctx: TransformerContext, def: ObjectTypeDefinitionNode): void {\n    const scalarFilters = makeScalarFilterInputs(this.supportsConditions(ctx));\n    for (const filter of scalarFilters) {\n      if (!this.typeExist(filter.name.value, ctx)) {\n        ctx.addInput(filter);\n      }\n    }\n\n    // Create the Enum filters\n    const enumFilters = makeEnumFilterInputObjects(def, ctx, this.supportsConditions(ctx));\n    for (const filter of enumFilters) {\n      if (!this.typeExist(filter.name.value, ctx)) {\n        ctx.addInput(filter);\n      }\n    }\n\n    if (this.supportsConditions(ctx)) {\n      // Create the ModelXConditionInput\n      const tableXMutationConditionInput = makeModelXConditionInputObject(def, ctx, this.supportsConditions(ctx));\n      if (!this.typeExist(tableXMutationConditionInput.name.value, ctx)) {\n        ctx.addInput(tableXMutationConditionInput);\n      }\n\n      const attributeTypeEnum = makeAttributeTypeEnum();\n      if (!this.typeExist(attributeTypeEnum.name.value, ctx)) {\n        ctx.addType(attributeTypeEnum);\n      }\n    }\n  }\n\n  private getOpts(opts: DynamoDBModelTransformerOptions) {\n    const defaultOpts = {\n      EnableDeletionProtection: false,\n    };\n    return {\n      ...defaultOpts,\n      ...opts,\n    };\n  }\n\n  private setSyncConfig(ctx: TransformerContext, typeName: string) {\n    let syncConfig: SyncConfig;\n    const resolverConfig = ctx.getResolverConfig();\n    if (resolverConfig && resolverConfig.project) {\n      syncConfig = resolverConfig.project;\n    }\n    if (resolverConfig && resolverConfig.models && resolverConfig.models[typeName]) {\n      const typeResolverConfig = resolverConfig.models[typeName];\n      if (typeResolverConfig.ConflictDetection && typeResolverConfig.ConflictHandler) {\n        syncConfig = typeResolverConfig;\n      } else {\n        console.warn(`Invalid resolverConfig for type ${typeName}. Using the project resolverConfig instead.`);\n      }\n    }\n    return (this.opts.SyncConfig = syncConfig);\n  }\n\n  // Due to the current architecture of Transformers we've to handle the 'id' field removal\n  // here, because KeyTranformer will not be invoked if there are no @key directives declared\n  // on the type.\n  private updateMutationConditionInput(ctx: TransformerContext, type: ObjectTypeDefinitionNode): void {\n    if (this.supportsConditions(ctx)) {\n      // Get the existing ModelXConditionInput\n      const tableXMutationConditionInputName = ModelResourceIDs.ModelConditionInputTypeName(type.name.value);\n\n      if (this.typeExist(tableXMutationConditionInputName, ctx)) {\n        const tableXMutationConditionInput = <InputObjectTypeDefinitionNode>ctx.getType(tableXMutationConditionInputName);\n\n        const keyDirectives = type.directives.filter(d => d.name.value === 'key');\n\n        // If there are @key directives defined we've nothing to do, it will handle everything\n        if (keyDirectives && keyDirectives.length > 0) {\n          return;\n        }\n\n        // Remove the field named 'id' from the condition if there is one\n        const idField = tableXMutationConditionInput.fields.find(f => f.name.value === 'id');\n\n        if (idField) {\n          const reducedFields = tableXMutationConditionInput.fields.filter(f => Boolean(f.name.value !== 'id'));\n\n          const updatedInput = {\n            ...tableXMutationConditionInput,\n            fields: reducedFields,\n          };\n\n          ctx.putType(updatedInput);\n        }\n      }\n    }\n  }\n\n  private supportsConditions(context: TransformerContext) {\n    return context.getTransformerVersion() >= CONDITIONS_MINIMUM_VERSION;\n  }\n\n  private static isTimestampCompatibleField(field?: FieldDefinitionNode): boolean {\n    if (field && !(getBaseType(field.type) === 'AWSDateTime' || getBaseType(field.type) === 'String')) {\n      return false;\n    }\n    return true;\n  }\n\n  private addInitalizationMetadata(ctx: TransformerContext, resourceId: string, initCode: string): void {\n    const ddbMetadata = ctx.metadata.has(METADATA_KEY) ? ctx.metadata.get(METADATA_KEY) : {};\n    ddbMetadata.hoistedRequestMappingContent = {\n      ...ddbMetadata?.hoistedRequestMappingContent,\n      [resourceId]: initCode,\n    };\n    ctx.metadata.set(METADATA_KEY, ddbMetadata);\n  }\n}\n"]}