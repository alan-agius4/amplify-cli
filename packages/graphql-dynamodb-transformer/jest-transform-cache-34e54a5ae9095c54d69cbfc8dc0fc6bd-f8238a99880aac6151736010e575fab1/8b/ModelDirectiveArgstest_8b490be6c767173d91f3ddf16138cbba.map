{"version":3,"file":"/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/__tests__/ModelDirectiveArgs.test.ts","sources":["/Users/yathiraj/Documents/work/amplify-cli/packages/graphql-dynamodb-transformer/src/__tests__/ModelDirectiveArgs.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { buildASTSchema, concatAST, DirectiveNode, parse } from 'graphql';\nimport { directiveDefinition } from '../DynamoDBModelTransformer';\nimport { getCreatedAtFieldName, getUpdatedAtFieldName } from '../ModelDirectiveArgs';\n\nfunction getDirective(doc: string, typeName: string): DirectiveNode {\n  const schema = buildASTSchema(concatAST([directiveDefinition, parse(doc)]));\n  const selectedType = schema.getTypeMap()[typeName];\n  return selectedType.astNode.directives.find(d => d.name.value === 'model');\n}\ndescribe('getCreatedAtField', () => {\n  it('should return createdAt when there is no timestamps configuration', () => {\n    const doc = /* GraphQL */ `\n      type Post @model {\n        id: ID!\n        title: String\n      }\n    `;\n    const modelDirective = getDirective(doc, 'Post');\n    expect(modelDirective).toBeDefined();\n    expect(getCreatedAtFieldName(modelDirective)).toEqual('createdAt');\n  });\n\n  it('should return null when timestamps are set to null', () => {\n    const doc = /* GraphQL */ `\n      type Post @model(timestamps: null) {\n        id: ID!\n        title: String\n      }\n    `;\n    const modelDirective = getDirective(doc, 'Post');\n    expect(modelDirective).toBeDefined();\n    expect(getCreatedAtFieldName(modelDirective)).toBeNull();\n  });\n\n  it('should return null when createdAt is set to null', () => {\n    const doc = /* GraphQL */ `\n      type Post @model(timestamps: { createdAt: null }) {\n        id: ID!\n        title: String\n      }\n    `;\n    const modelDirective = getDirective(doc, 'Post');\n    expect(modelDirective).toBeDefined();\n    expect(getCreatedAtFieldName(modelDirective)).toBeNull();\n  });\n\n  it('should return createdOn when createdAt is set to createdOn', () => {\n    const doc = /* GraphQL */ `\n      type Post @model(timestamps: { createdAt: \"createdOn\" }) {\n        id: ID!\n        title: String\n      }\n    `;\n    const modelDirective = getDirective(doc, 'Post');\n    expect(modelDirective).toBeDefined();\n    expect(getCreatedAtFieldName(modelDirective)).toEqual('createdOn');\n  });\n\n  it('should return createdAt when createdAt is not set in timestamps', () => {\n    const doc = /* GraphQL */ `\n      type Post @model(timestamps: { updatedAt: \"updatedOn\" }) {\n        id: ID!\n        title: String\n      }\n    `;\n    const modelDirective = getDirective(doc, 'Post');\n    expect(modelDirective).toBeDefined();\n    expect(getCreatedAtFieldName(modelDirective)).toEqual('createdAt');\n  });\n});\n\ndescribe('getUpdatedAtField', () => {\n  it('should return updatedAt when there is no timestamps configuration', () => {\n    const doc = /* GraphQL */ `\n      type Post @model {\n        id: ID!\n        title: String\n      }\n    `;\n    const modelDirective = getDirective(doc, 'Post');\n    expect(modelDirective).toBeDefined();\n    expect(getUpdatedAtFieldName(modelDirective)).toEqual('updatedAt');\n  });\n\n  it('should return null for updatedAt when timestamps are set to null', () => {\n    const doc = /* GraphQL */ `\n      type Post @model(timestamps: null) {\n        id: ID!\n        title: String\n      }\n    `;\n    const modelDirective = getDirective(doc, 'Post');\n    expect(modelDirective).toBeDefined();\n    expect(getUpdatedAtFieldName(modelDirective)).toBeNull();\n  });\n\n  it('should return null when updatedAt is set to null', () => {\n    const doc = /* GraphQL */ `\n      type Post @model(timestamps: { updatedAt: null }) {\n        id: ID!\n        title: String\n      }\n    `;\n    const modelDirective = getDirective(doc, 'Post');\n    expect(modelDirective).toBeDefined();\n    expect(getUpdatedAtFieldName(modelDirective)).toBeNull();\n  });\n\n  it('should return updatedOn when updatedAt is set to updatedOn', () => {\n    const doc = /* GraphQL */ `\n      type Post @model(timestamps: { updatedAt: \"updatedOn\" }) {\n        id: ID!\n        title: String\n      }\n    `;\n    const modelDirective = getDirective(doc, 'Post');\n    expect(modelDirective).toBeDefined();\n    expect(getUpdatedAtFieldName(modelDirective)).toEqual('updatedOn');\n  });\n\n  it('should return updatedAt when updatedAt is not set in timestamps', () => {\n    const doc = /* GraphQL */ `\n      type Post @model(timestamps: { createdAt: \"createdOnOn\" }) {\n        id: ID!\n        title: String\n      }\n    `;\n    const modelDirective = getDirective(doc, 'Post');\n    expect(modelDirective).toBeDefined();\n    expect(getUpdatedAtFieldName(modelDirective)).toEqual('updatedAt');\n  });\n});\n"]}