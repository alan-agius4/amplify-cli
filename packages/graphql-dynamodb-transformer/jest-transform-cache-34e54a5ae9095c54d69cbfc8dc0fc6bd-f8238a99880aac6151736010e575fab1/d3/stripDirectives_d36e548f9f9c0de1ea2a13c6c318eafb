a5ffd2cd5b8757b9fbf46361b39fb414
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stripDirectives = void 0;

const graphql_1 = require("graphql");

function stripDirectives(doc, except = []) {
  const definitions = [];

  for (const def of doc.definitions) {
    switch (def.kind) {
      case graphql_1.Kind.OBJECT_TYPE_DEFINITION:
        definitions.push(stripObjectDirectives(def));
        break;

      case graphql_1.Kind.INTERFACE_TYPE_DEFINITION:
        definitions.push(stripInterfaceDirectives(def));
        break;

      case graphql_1.Kind.UNION_TYPE_DEFINITION:
        definitions.push(stripUnionDirectives(def));
        break;

      case graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        definitions.push(stripInputObjectDirectives(def));
        break;

      case graphql_1.Kind.ENUM_TYPE_DEFINITION:
        definitions.push(stripEnumDirectives(def));
        break;

      case graphql_1.Kind.SCALAR_TYPE_DEFINITION:
        definitions.push(stripScalarDirectives(def));
        break;
    }
  }

  function excepted(dir) {
    return Boolean(except.find(f => dir.name.value === f));
  }

  function stripObjectDirectives(node) {
    const fields = node.fields ? node.fields.map(stripFieldDirectives) : node.fields;
    return { ...node,
      fields,
      directives: node.directives.filter(excepted)
    };
  }

  function stripInterfaceDirectives(node) {
    const fields = node.fields ? node.fields.map(stripFieldDirectives) : node.fields;
    return { ...node,
      fields,
      directives: node.directives.filter(excepted)
    };
  }

  function stripFieldDirectives(node) {
    const args = node.arguments ? node.arguments.map(stripArgumentDirectives) : node.arguments;
    return { ...node,
      arguments: args,
      directives: node.directives.filter(excepted)
    };
  }

  function stripArgumentDirectives(node) {
    return { ...node,
      directives: node.directives.filter(excepted)
    };
  }

  function stripUnionDirectives(node) {
    return { ...node,
      directives: node.directives.filter(excepted)
    };
  }

  function stripScalarDirectives(node) {
    return { ...node,
      directives: node.directives.filter(excepted)
    };
  }

  function stripInputObjectDirectives(node) {
    const fields = node.fields ? node.fields.map(stripArgumentDirectives) : node.fields;
    return { ...node,
      fields,
      directives: node.directives.filter(excepted)
    };
  }

  function stripEnumDirectives(node) {
    const values = node.values ? node.values.map(stripEnumValueDirectives) : node.values;
    return { ...node,
      values,
      directives: node.directives.filter(excepted)
    };
  }

  function stripEnumValueDirectives(node) {
    return { ...node,
      directives: node.directives.filter(excepted)
    };
  }

  return {
    kind: graphql_1.Kind.DOCUMENT,
    definitions
  };
}

exports.stripDirectives = stripDirectives;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHJpcERpcmVjdGl2ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE1BQUEsU0FBQSxHQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUE7O0FBZ0JBLFNBQWdCLGVBQWhCLENBQWdDLEdBQWhDLEVBQW1ELE1BQUEsR0FBbUIsRUFBdEUsRUFBd0U7QUFDdEUsUUFBTSxXQUFXLEdBQUcsRUFBcEI7O0FBQ0EsT0FBSyxNQUFNLEdBQVgsSUFBa0IsR0FBRyxDQUFDLFdBQXRCLEVBQW1DO0FBQ2pDLFlBQVEsR0FBRyxDQUFDLElBQVo7QUFDRSxXQUFLLFNBQUEsQ0FBQSxJQUFBLENBQUssc0JBQVY7QUFDRSxRQUFBLFdBQVcsQ0FBQyxJQUFaLENBQWlCLHFCQUFxQixDQUFDLEdBQUQsQ0FBdEM7QUFDQTs7QUFDRixXQUFLLFNBQUEsQ0FBQSxJQUFBLENBQUsseUJBQVY7QUFDRSxRQUFBLFdBQVcsQ0FBQyxJQUFaLENBQWlCLHdCQUF3QixDQUFDLEdBQUQsQ0FBekM7QUFDQTs7QUFDRixXQUFLLFNBQUEsQ0FBQSxJQUFBLENBQUsscUJBQVY7QUFDRSxRQUFBLFdBQVcsQ0FBQyxJQUFaLENBQWlCLG9CQUFvQixDQUFDLEdBQUQsQ0FBckM7QUFDQTs7QUFDRixXQUFLLFNBQUEsQ0FBQSxJQUFBLENBQUssNEJBQVY7QUFDRSxRQUFBLFdBQVcsQ0FBQyxJQUFaLENBQWlCLDBCQUEwQixDQUFDLEdBQUQsQ0FBM0M7QUFDQTs7QUFDRixXQUFLLFNBQUEsQ0FBQSxJQUFBLENBQUssb0JBQVY7QUFDRSxRQUFBLFdBQVcsQ0FBQyxJQUFaLENBQWlCLG1CQUFtQixDQUFDLEdBQUQsQ0FBcEM7QUFDQTs7QUFDRixXQUFLLFNBQUEsQ0FBQSxJQUFBLENBQUssc0JBQVY7QUFDRSxRQUFBLFdBQVcsQ0FBQyxJQUFaLENBQWlCLHFCQUFxQixDQUFDLEdBQUQsQ0FBdEM7QUFDQTtBQWxCSjtBQW9CRDs7QUFFRCxXQUFTLFFBQVQsQ0FBa0IsR0FBbEIs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