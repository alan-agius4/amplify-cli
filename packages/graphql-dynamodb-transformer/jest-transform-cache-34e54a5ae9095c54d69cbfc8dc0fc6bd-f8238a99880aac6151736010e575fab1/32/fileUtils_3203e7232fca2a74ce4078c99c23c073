6251c8b9833ee0a292900cf2aab82fc4
"use strict";

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throwIfNotJSONExt = exports.handleFile = exports.readFromPath = exports.writeToPath = exports.emptyDirectory = void 0;

const path = __importStar(require("path"));

const fs = require('fs-extra');

async function emptyDirectory(directory) {
  const pathExists = await fs.exists(directory);

  if (!pathExists) {
    return;
  }

  const dirStats = await fs.lstat(directory);

  if (!dirStats.isDirectory()) {
    return;
  }

  const files = await fs.readdir(directory);

  for (const fileName of files) {
    const fullPath = path.join(directory, fileName);
    await fs.remove(fullPath);
  }
}

exports.emptyDirectory = emptyDirectory;

async function writeToPath(directory, obj) {
  if (Array.isArray(obj)) {
    await fs.ensureDir(directory);

    for (let i = 0; i < obj.length; i++) {
      const newDir = path.join(directory, `${i}`);
      await writeToPath(newDir, obj[i]);
    }
  } else if (typeof obj === 'object') {
    await fs.ensureDir(directory);

    for (const key of Object.keys(obj)) {
      const newDir = path.join(directory, key);
      await writeToPath(newDir, obj[key]);
    }
  } else if (typeof obj === 'string') {
    fs.writeFileSync(directory, obj);
  }
}

exports.writeToPath = writeToPath;

async function readFromPath(directory) {
  const pathExists = await fs.exists(directory);

  if (!pathExists) {
    return;
  }

  const dirStats = await fs.lstat(directory);

  if (!dirStats.isDirectory()) {
    const buf = await fs.readFile(directory);
    return buf.toString();
  }

  const files = await fs.readdir(directory);
  const accum = {};

  for (const fileName of files) {
    const fullPath = path.join(directory, fileName);
    const value = await readFromPath(fullPath);
    accum[fileName] = value;
  }

  return accum;
}

exports.readFromPath = readFromPath;

async function handleFile(handler, key, body, backoffMS = 500, numTries = 3) {
  try {
    return await handler({
      Key: key,
      Body: body
    });
  } catch (e) {
    if (numTries > 0) {
      await new Promise((res, rej) => setTimeout(() => res(), backoffMS));
      await handleFile(handler, key, body, backoffMS * 2, numTries - 1);
    }

    throw e;
  }
}

exports.handleFile = handleFile;

function throwIfNotJSONExt(stackFile) {
  const extension = path.extname(stackFile);

  if (extension === '.yaml' || extension === '.yml') {
    throw new Error(`Yaml is not yet supported. Please convert the CloudFormation stack ${stackFile} to json.`);
  }

  if (extension !== '.json') {
    throw new Error(`Invalid extension ${extension} for stack ${stackFile}`);
  }
}

exports.throwIfNotJSONExt = throwIfNotJSONExt;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2ZpbGVVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxNQUFBLElBQUEsR0FBQSxZQUFBLENBQUEsT0FBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBOztBQUVBLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxVQUFELENBQWxCOztBQU1PLGVBQWUsY0FBZixDQUE4QixTQUE5QixFQUErQztBQUNwRCxRQUFNLFVBQVUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFILENBQVUsU0FBVixDQUF6Qjs7QUFDQSxNQUFJLENBQUMsVUFBTCxFQUFpQjtBQUNmO0FBQ0Q7O0FBQ0QsUUFBTSxRQUFRLEdBQUcsTUFBTSxFQUFFLENBQUMsS0FBSCxDQUFTLFNBQVQsQ0FBdkI7O0FBQ0EsTUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFULEVBQUwsRUFBNkI7QUFDM0I7QUFDRDs7QUFDRCxRQUFNLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQyxPQUFILENBQVcsU0FBWCxDQUFwQjs7QUFDQSxPQUFLLE1BQU0sUUFBWCxJQUF1QixLQUF2QixFQUE4QjtBQUM1QixVQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBTCxDQUFVLFNBQVYsRUFBcUIsUUFBckIsQ0FBakI7QUFDQSxVQUFNLEVBQUUsQ0FBQyxNQUFILENBQVUsUUFBVixDQUFOO0FBQ0Q7QUFDRjs7QUFkRCxPQUFBLENBQUEsY0FBQSxHQUFBLGNBQUE7O0FBZ0JPLGVBQWUsV0FBZixDQUEyQixTQUEzQixFQUE4QyxHQUE5QyxFQUFzRDtBQUMzRCxNQUFJLEtBQUssQ0FBQyxPQUFOLENBQWMsR0FBZCxDQUFKLEVBQXdCO0FBQ3RCLFVBQU0sRUFBRSxDQUFDLFNBQUgsQ0FBYSxTQUFiLENBQU47O0FBQ0EsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBeEIsRUFBZ0MsQ0FB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