528a4d59e2a92563c8e8f17efc301db6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printBlock = exports.print = exports.printObject = void 0;

const ast_1 = require("./ast");

const TAB = '  ';

function printIf(node, indent = '') {
  if (node.inline) {
    return `#if( ${printExpr(node.predicate, '')} ) ${printExpr(node.expr, '')} #end`;
  }

  return `${indent}#if( ${printExpr(node.predicate, '')} )\n${printExpr(node.expr, indent + TAB)}\n${indent}#end`;
}

function printIfElse(node, indent = '') {
  if (node.inline) {
    return `#if( ${printExpr(node.predicate)} ) ` + `${printExpr(node.ifExpr)} ` + `#else ` + `${printExpr(node.elseExpr)} ` + `#end`;
  }

  return `${indent}#if( ${printExpr(node.predicate)} )\n` + `${printExpr(node.ifExpr, indent + TAB)}\n` + `${indent}#else\n` + `${printExpr(node.elseExpr, indent + TAB)}\n` + `${indent}#end`;
}

function printAnd(node, indent = '') {
  return indent + node.expressions.map(e => printExpr(e)).join(' && ');
}

function printOr(node, indent = '') {
  return indent + node.expressions.map(e => printExpr(e)).join(' || ');
}

function printParens(node, indent = '') {
  return `${indent}(${printExpr(node.expr)})`;
}

function printEquals(node, indent = '') {
  return `${indent}${printExpr(node.leftExpr)} == ${printExpr(node.rightExpr)}`;
}

function printNotEquals(node, indent = '') {
  return `${indent}${printExpr(node.leftExpr)} != ${printExpr(node.rightExpr)}`;
}

function printForEach(node, indent = '') {
  return `${indent}#foreach( ${printExpr(node.key)} in ${printExpr(node.collection)} )\n` + node.expressions.map(e => printExpr(e, indent + TAB)).join('\n') + `\n${indent}#end`;
}

function printString(node) {
  return `"${node.value}"`;
}

function printBool(node) {
  return `${node.value}`;
}

function printRaw(node, indent = '') {
  return `${indent}${node.value}`;
}

function printQuotes(node) {
  return `"${printExpr(node.expr)}"`;
}

function printInt(node) {
  return `${node.value}`;
}

function printFloat(node) {
  return `${node.value}`;
}

function printNull(node) {
  return `null`;
}

function printReference(node) {
  return `\$${node.value}`;
}

function printQuietReference(node, indent = '') {
  return `${indent}$util.qr(${node.value})`;
}

function printObject(node, indent = '') {
  const attributes = node.attributes.map((attr, i) => {
    return `${indent}${TAB}"${attr[0]}": ${printExpr(attr[1], indent + TAB)}${i < node.attributes.length - 1 ? ',' : ''}`;
  });
  const divider = attributes.length > 0 ? `\n${indent}` : '';
  return `{${divider}${attributes.join(divider)}${divider}}`;
}

exports.printObject = printObject;

function printList(node, indent = '') {
  const values = node.expressions.map(e => printExpr(e, '')).join(', ');
  return `${indent}[${values}]`;
}

function printSet(node, indent = '') {
  return `${indent}#set( ${printReference(node.key)} = ${printExpr(node.value, '')} )`;
}

function printComment(node, indent = '') {
  return `${indent}## ${node.text} **`;
}

function printCompoundExpression(node, indent = '') {
  if (node.recurseIndent) {
    return node.expressions.map(node => printExpr(node, indent)).join(node.joiner);
  }

  return indent + node.expressions.map(node => printExpr(node)).join(node.joiner);
}

function printToJson(node, indent = '') {
  return `${indent}$util.toJson(${printExpr(node.expr, '')})`;
}

function printNot(node, indent = '') {
  return `${indent}!${printExpr(node.expr, '')}`;
}

function printNewLine(node) {
  return '\n';
}

function printReturn(node, indent = '') {
  var suffix = '';

  if (node.value !== undefined) {
    suffix = printParens(ast_1.parens(node.value));
  }

  return `${indent}#return` + suffix;
}

function printExpr(expr, indent = '') {
  if (!expr) {
    return '';
  }

  switch (expr.kind) {
    case 'If':
      return printIf(expr, indent);

    case 'IfElse':
      return printIfElse(expr, indent);

    case 'And':
      return printAnd(expr, indent);

    case 'Or':
      return printOr(expr, indent);

    case 'Parens':
      return printParens(expr, indent);

    case 'Equals':
      return printEquals(expr, indent);

    case 'NotEquals':
      return printNotEquals(expr, indent);

    case 'ForEach':
      return printForEach(expr, indent);

    case 'String':
      return printString(expr);

    case 'Raw':
      return printRaw(expr, indent);

    case 'Quotes':
      return printQuotes(expr);

    case 'Float':
      return printFloat(expr);

    case 'Int':
      return printInt(expr);

    case 'Boolean':
      return printBool(expr);

    case 'Null':
      return printNull(expr);

    case 'Reference':
      return printReference(expr);

    case 'QuietReference':
      return printQuietReference(expr, indent);

    case 'Object':
      return printObject(expr, indent);

    case 'List':
      return printList(expr, indent);

    case 'Set':
      return printSet(expr, indent);

    case 'Comment':
      return printComment(expr, indent);

    case 'CompoundExpression':
      return printCompoundExpression(expr, indent);

    case 'Util.ToJson':
      return printToJson(expr, indent);

    case 'Not':
      return printNot(expr, indent);

    case 'NewLine':
      return printNewLine(expr);

    case 'Return':
      return printReturn(expr, indent);

    default:
      return '';
  }
}

function print(expr) {
  return printExpr(expr);
}

exports.print = print;

function printBlock(name) {
  return expr => {
    const wrappedExpr = ast_1.compoundExpression([ast_1.comment(`[Start] ${name}.`), expr, ast_1.comment(`[End] ${name}.`)]);
    return printExpr(wrappedExpr);
  };
}

exports.printBlock = printBlock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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