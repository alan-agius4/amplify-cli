59b9446a94a44c77793da7819991e0e1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateModelSchema = exports.EXTRA_DIRECTIVES_DOCUMENT = exports.specifiedRules = void 0;

const language_1 = require("graphql/language");

const validation_1 = require("graphql/validation");

const buildASTSchema_1 = require("graphql/utilities/buildASTSchema");

const SingleFieldSubscriptions_1 = require("graphql/validation/rules/SingleFieldSubscriptions");

const KnownTypeNames_1 = require("graphql/validation/rules/KnownTypeNames");

const FragmentsOnCompositeTypes_1 = require("graphql/validation/rules/FragmentsOnCompositeTypes");

const VariablesAreInputTypes_1 = require("graphql/validation/rules/VariablesAreInputTypes");

const ScalarLeafs_1 = require("graphql/validation/rules/ScalarLeafs");

const FieldsOnCorrectType_1 = require("graphql/validation/rules/FieldsOnCorrectType");

const KnownDirectives_1 = require("graphql/validation/rules/KnownDirectives");

const KnownArgumentNames_1 = require("graphql/validation/rules/KnownArgumentNames");

const UniqueArgumentNames_1 = require("graphql/validation/rules/UniqueArgumentNames");

const ValuesOfCorrectType_1 = require("graphql/validation/rules/ValuesOfCorrectType");

const VariablesInAllowedPosition_1 = require("graphql/validation/rules/VariablesInAllowedPosition");

const OverlappingFieldsCanBeMerged_1 = require("graphql/validation/rules/OverlappingFieldsCanBeMerged");

const UniqueInputFieldNames_1 = require("graphql/validation/rules/UniqueInputFieldNames");

const ProvidedRequiredArguments_1 = require("graphql/validation/rules/ProvidedRequiredArguments");

const UniqueOperationNames_1 = require("graphql/validation/rules/UniqueOperationNames");

const LoneAnonymousOperation_1 = require("graphql/validation/rules/LoneAnonymousOperation");

const UniqueFragmentNames_1 = require("graphql/validation/rules/UniqueFragmentNames");

const KnownFragmentNames_1 = require("graphql/validation/rules/KnownFragmentNames");

const NoUnusedFragments_1 = require("graphql/validation/rules/NoUnusedFragments");

const PossibleFragmentSpreads_1 = require("graphql/validation/rules/PossibleFragmentSpreads");

const NoFragmentCycles_1 = require("graphql/validation/rules/NoFragmentCycles");

const UniqueVariableNames_1 = require("graphql/validation/rules/UniqueVariableNames");

const NoUndefinedVariables_1 = require("graphql/validation/rules/NoUndefinedVariables");

const NoUnusedVariables_1 = require("graphql/validation/rules/NoUnusedVariables");

const UniqueDirectivesPerLocation_1 = require("graphql/validation/rules/UniqueDirectivesPerLocation");

exports.specifiedRules = [UniqueOperationNames_1.UniqueOperationNames, LoneAnonymousOperation_1.LoneAnonymousOperation, SingleFieldSubscriptions_1.SingleFieldSubscriptions, KnownTypeNames_1.KnownTypeNames, FragmentsOnCompositeTypes_1.FragmentsOnCompositeTypes, VariablesAreInputTypes_1.VariablesAreInputTypes, ScalarLeafs_1.ScalarLeafs, FieldsOnCorrectType_1.FieldsOnCorrectType, UniqueFragmentNames_1.UniqueFragmentNames, KnownFragmentNames_1.KnownFragmentNames, NoUnusedFragments_1.NoUnusedFragments, PossibleFragmentSpreads_1.PossibleFragmentSpreads, NoFragmentCycles_1.NoFragmentCycles, UniqueVariableNames_1.UniqueVariableNames, NoUndefinedVariables_1.NoUndefinedVariables, NoUnusedVariables_1.NoUnusedVariables, KnownDirectives_1.KnownDirectives, UniqueDirectivesPerLocation_1.UniqueDirectivesPerLocation, KnownArgumentNames_1.KnownArgumentNames, UniqueArgumentNames_1.UniqueArgumentNames, ValuesOfCorrectType_1.ValuesOfCorrectType, ProvidedRequiredArguments_1.ProvidedRequiredArguments, VariablesInAllowedPosition_1.VariablesInAllowedPosition, OverlappingFieldsCanBeMerged_1.OverlappingFieldsCanBeMerged, UniqueInputFieldNames_1.UniqueInputFieldNames];
const EXTRA_SCALARS_DOCUMENT = language_1.parse(`
scalar AWSDate
scalar AWSTime
scalar AWSDateTime
scalar AWSTimestamp
scalar AWSEmail
scalar AWSJSON
scalar AWSURL
scalar AWSPhone
scalar AWSIPAddress
scalar BigInt
scalar Double
`);
exports.EXTRA_DIRECTIVES_DOCUMENT = language_1.parse(`
directive @aws_subscribe(mutations: [String!]!) on FIELD_DEFINITION
directive @aws_auth(cognito_groups: [String!]!) on FIELD_DEFINITION
directive @aws_api_key on FIELD_DEFINITION | OBJECT
directive @aws_iam on FIELD_DEFINITION | OBJECT
directive @aws_oidc on FIELD_DEFINITION | OBJECT
directive @aws_cognito_user_pools(cognito_groups: [String!]) on FIELD_DEFINITION | OBJECT

# Allows transformer libraries to deprecate directive arguments.
directive @deprecated(reason: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ENUM | ENUM_VALUE
`);
const NOOP_QUERY = language_1.parse(`
type Query {
  noop: String
}
`);

exports.validateModelSchema = doc => {
  const fullDocument = {
    kind: language_1.Kind.DOCUMENT,
    definitions: [...exports.EXTRA_DIRECTIVES_DOCUMENT.definitions, ...doc.definitions, ...EXTRA_SCALARS_DOCUMENT.definitions]
  };
  const schemaDef = doc.definitions.find(d => d.kind === language_1.Kind.SCHEMA_DEFINITION);
  const queryOperation = schemaDef ? schemaDef.operationTypes.find(o => o.operation === 'query') : undefined;
  const queryName = queryOperation ? queryOperation.type.name.value : 'Query';
  const existingQueryType = doc.definitions.find(d => d.kind !== language_1.Kind.DIRECTIVE_DEFINITION && d.kind !== language_1.Kind.SCHEMA_DEFINITION && d.name && d.name.value === queryName);

  if (!existingQueryType) {
    fullDocument.definitions.push(...NOOP_QUERY.definitions);
  }

  const schema = buildASTSchema_1.buildASTSchema(fullDocument);
  return validation_1.validate(schema, fullDocument, exports.specifiedRules);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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