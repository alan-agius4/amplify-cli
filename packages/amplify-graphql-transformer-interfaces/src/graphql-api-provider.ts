import {
  NoneDataSource,
  HttpDataSource,
  DynamoDbDataSource,
  LambdaDataSource,
  BaseDataSource,
  CfnResolver,
} from '@aws-cdk/aws-appsync';
import { IFunction } from '@aws-cdk/aws-lambda';
import { ITable } from '@aws-cdk/aws-dynamodb';
import { Construct, IConstruct, Stack } from '@aws-cdk/core';

export interface AppSyncFunctionConfigurationProvider extends IConstruct {
  readonly arn: string;
  readonly functionId: string;
}
export interface DataSourceOptions {
  /**
   * The name of the data source, overrides the id given by cdk
   *
   * @default - generated by cdk given the id
   */
  readonly name?: string;
  /**
   * The description of the data source
   *
   * @default - No description
   */
  readonly description?: string;
}

export interface TemplateProvider {
  bind(
    scope: Construct,
  ): {
    s3Location: {
      bucketName: string;
      objectKey: string;
      httpUrl: string;
    };
  };
}

export interface GraphQLApiProvider {
  addHttpDataSource(name: string, endpoint: string, options?: DataSourceOptions, stack?: Stack): HttpDataSource;
  addDynamoDbDataSource(name: string, table: ITable, options?: DataSourceOptions, stack?: Stack): DynamoDbDataSource;
  addNoneDataSource(name: string, options?: DataSourceOptions, stack?: Stack): NoneDataSource;
  addLambdaDataSource(name: string, lambdaFunction: IFunction, options?: DataSourceOptions, stack?: Stack): LambdaDataSource;

  addAppSyncFunction: (
    name: string,
    requestMappingTemplate: TemplateProvider,
    responseMappingTemplate: TemplateProvider,
    dataSourceName: string,
    stack?: Stack,
  ) => AppSyncFunctionConfigurationProvider;

  addResolver: (
    typeName: string,
    fieldName: string,
    requestMappingTemplate: TemplateProvider,
    responseMappingTemplate: TemplateProvider,
    dataSourceName?: string,
    pipelineConfig?: string[],
    stack?: Stack,
  ) => CfnResolver;

  getDataSource: (name: string) => BaseDataSource | void;
  hasDataSource: (name: string) => boolean;
}
